<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ordina JWorks Tech Blog</title>
    <description>Ordina JWorks Tech blog
</description>
    <link>https://ordina-jworks.github.io/</link>
    <atom:link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 30 Sep 2016 09:01:40 +0000</pubDate>
    <lastBuildDate>Fri, 30 Sep 2016 09:01:40 +0000</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>JOIN 2016</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Next week, on the 5th of October 2016, the JWorks Business Unit of Ordina will organize its yearly JOIN event. The purpose of this event is to share knowledge between colleagues and fellow Java, JVM, JavaScript, Cloud and DevOps enthusiasts. Last year, a total of 83 attendees visited Ordina Belgium’s headquarters in Mechelen to learn and talk about the hottest technology trends and developments.
This year we expect to have more than 100 attendees, and what’s most exciting is that the event is completely free of charge and everyone is invited. Food and drinks are provided (including a barbecue).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;join-2016-schedule&quot;&gt;JOIN 2016 Schedule&lt;/h3&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;JOIN 2016 Schedule&quot; src=&quot;/img/JOIN-schedule-small.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Here are some of the highlights of the day:&lt;/p&gt;

&lt;h3 id=&quot;am---12am---docker-for-java-developers---arun-gupta&quot;&gt;10AM - 12AM - Docker for Java Developers - Arun Gupta&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;float-image p-image&quot; src=&quot;/img/arun-gupta.png&quot; alt=&quot;Arun Gupta&quot; style=&quot;width: 100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Arun has been an avid Docker user for many years and is also one of the Docker Captains, among being a Java Champion and JUG leader.
He will bring us a very informative talk about the current state of Docker and how Java Developers can get started with Docker in no time.&lt;/p&gt;

&lt;p&gt;We’re very much looking forward to this one!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;During another talk he will talk about &lt;strong&gt;Couchbase&lt;/strong&gt;, the product company he’s working for at the moment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;More information about Arun in his &lt;a href=&quot;https://blog.docker.com/2016/03/docker-community-spotlight-arun-gupta/&quot;&gt;Docker Community Spotlight&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;pm---6pm---the-google-cloud-platform---koen-maes&quot;&gt;5PM - 6PM - The Google Cloud Platform - Koen Maes&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;float-image p-image&quot; src=&quot;/img/koen-maes.jpg&quot; alt=&quot;Koen Maes&quot; style=&quot;width: 100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Koen Maes provides expert advice and development services for Google Cloud Platform and related products.
He is a Google Cloud Platform Authorized Trainer &amp;amp; partner and has been working in the software industry since the early nineties and with web/Internet technology since its inception.
He designed key applications for several large corporations as well as running a handful of startups of his own, some more successful than others.
Since his first encounters with AppEngine in 2009, he never looked back and has been specializing in Google Cloud Platform ever since.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We are currently working for one of our customers on a large scale greenfield microservices system in the Google Cloud Platform, so this will be very especially interesting for us as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;pm---7pm---reactive-programming---stephane-maldini&quot;&gt;6PM - 7PM - Reactive Programming - Stephane Maldini&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;float-image p-image&quot; src=&quot;/img/stephane-maldini.jpeg&quot; alt=&quot;Stephane Maldini&quot; style=&quot;width: 100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A multi-tasker eating tech 24/7, Stephane is interested in cloud computing, data science and messaging.
Leading the Reactor Project, Stephane Maldini is on a mission to help developers create reactive and efficient architectures on the JVM and beyond.
He is also one of the main contributors for Reactive support in the upcoming Spring 5 framework.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;David Karnok, RxJava project lead, identifies the Reactor project as the new standard for reactive applications in the Java world.
Most of the developers in our JWorks unit are using Spring (as opposed to J2EE), so this talk is gonna be &lt;strong&gt;very&lt;/strong&gt; interesting.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;pm---8pm---typescript-enjoying-large-scale-browser-development---joost-de-vries&quot;&gt;7PM - 8PM - Typescript: enjoying large scale browser development - Joost De Vries&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;float-image p-image&quot; src=&quot;/img/joost-devries.jpg&quot; alt=&quot;Joost De Vries&quot; style=&quot;width: 100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Joost De Vries is one of our Dutch colleagues at &lt;a href=&quot;https://www.codestar.nl/#center&quot;&gt;Codestar&lt;/a&gt;. He will talk about Typescript and how it enables development of large scale front end applications.&lt;/p&gt;

&lt;p&gt;You can find him on &lt;a href=&quot;https://twitter.com/jouke&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://github.com/joost-de-vries&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;food&quot;&gt;Food&lt;/h3&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;JOIN 2016 Schedule&quot; src=&quot;/img/bbq-food-drinks.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We have foreseen &lt;strong&gt;food and drinks&lt;/strong&gt; during the conference and we will &lt;strong&gt;end the night with something special&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We hope and believe it will make everyone &lt;strong&gt;very&lt;/strong&gt; happy! Another reason to JOIN us @Ordina, the 5th of October:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Morning reception:
    &lt;ul&gt;
      &lt;li&gt;Coffee or Tea&lt;/li&gt;
      &lt;li&gt;Mini biscuits and chocolates&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Lunch:
    &lt;ul&gt;
      &lt;li&gt;Luxury sandwiches &amp;amp; subs with salads, French cheese, grey shrimp, prawns or Parma ham&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Viking bread&lt;/strong&gt; with smoked salmon&lt;/li&gt;
      &lt;li&gt;Grilled chicken wraps&lt;/li&gt;
      &lt;li&gt;Vegetarian options also available&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Afternoon coffee break:
    &lt;ul&gt;
      &lt;li&gt;Coffee or Soda&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Candy bars&lt;/strong&gt; or &lt;strong&gt;fruit salad&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Dinner:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;BBQ&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Marinated prawn (scampi)&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Greenway&lt;/em&gt; balls (vegetarian)&lt;/li&gt;
      &lt;li&gt;Spicy &lt;strong&gt;chipolatas&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Marinated chicken satés&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Steak chimichurri&lt;/strong&gt; cut and grilled &lt;em&gt;à la minute&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;Coleslaw, tomatoes, cucumbers, carrots, potato salad, mix of salads, red onions and olives&lt;/li&gt;
      &lt;li&gt;Bread, potatoes and sauces&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;subscribing&quot;&gt;Subscribing&lt;/h3&gt;

&lt;p&gt;Anyone who still wants to attend the free 2016 JOIN event at Ordina Mechelen, can subscribe on the link below:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ordina.be/nl-nl/evenementen/2016/join-2016/&quot;&gt;https://www.ordina.be/nl-nl/evenementen/2016/join-2016/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Sep 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/conferences/2016/09/27/JOIN-2016.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/conferences/2016/09/27/JOIN-2016.html</guid>
        
        <category>JOIN</category>
        
        <category>Spring</category>
        
        <category>Docker</category>
        
        <category>Java</category>
        
        <category>Angular</category>
        
        <category>Typescript</category>
        
        
        <category>Conferences</category>
        
      </item>
    
      <item>
        <title>Monitoring with Prometheus</title>
        <description>&lt;p&gt;It is needless to say the world is shifting towards DevOps and microservices.
This holy grail we aim for adds a great deal of complexity.
Monitoring included.
Rather than having to monitor one system,
we are suddenly faced with the challenge to oversee our manifold services.
There are numerous monitoring systems available,
but not all of them are fit for monitoring large, distributed systems.&lt;/p&gt;

&lt;p&gt;Black box monitoring systems like &lt;a href=&quot;https://www.nagios.org&quot;&gt;Nagios&lt;/a&gt; allow you to check if an application is alive and healthy.
This is done by e.g. pinging the service,
checking if there is enough disk space,
or monitoring the CPU usage.
In a world of distributed architectures where high availability and fast response times are key,
it is not sufficient to be only aware if a service is alive.
It is crucial to know how a service is working internally as well.
How many HTTP requests is it receiving?
Are they handled correctly?
How fast are requests handled for different endpoints?
Are there many errors being logged?
How many disk IO operations is the service performing?
These are all important questions that need to be monitored to keep a service functional.&lt;/p&gt;

&lt;p&gt;Prometheus is a &lt;strong&gt;white box monitoring and alerting&lt;/strong&gt; system that is designed for large, scalable environments.
With Prometheus,
we can answer all these questions,
by exposing the internal state of your applications.
By monitoring this internal state,
we can throw alerts and act upon certain events.
For example,
if the average request rate per second of a service goes up,
or the &lt;a href=&quot;https://en.wikipedia.org/wiki/Quantile&quot;&gt;fifty percent quantile&lt;/a&gt; response time of a service suddenly passes a certain threshold,
we could act upon this by upscaling the service.&lt;/p&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#rise-of-prometheus&quot;&gt;The Rise of Prometheus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#architecture&quot;&gt;Architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#data-model&quot;&gt;Data Model&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#slice-dice-with-the-query-language&quot;&gt;Slice &amp;amp; Dice with the Query Language&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#instrumenting-your-services&quot;&gt;Instrumenting Your Services&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#exporters&quot;&gt;Exporters&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#scraping-the-targets&quot;&gt;Scraping the Targets&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#visualization-and-analytics&quot;&gt;Visualization and Analytics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#alert-alert&quot;&gt;Alert! Alert!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#monitoring-time&quot;&gt;Monitoring Time!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#final-words&quot;&gt;Final Words&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;rise-of-prometheus&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-rise-of-prometheus&quot;&gt;The Rise of Prometheus&lt;/h1&gt;

&lt;p&gt;As with most great technologies,
there is usually a great story hiding behind them.
Nothing is different with Prometheus.
Incubated at &lt;a href=&quot;https://soundcloud.com/&quot;&gt;SoundCloud&lt;/a&gt;,
&lt;em&gt;the&lt;/em&gt; social platform for sharing sounds and music,
Prometheus has come a long way.&lt;/p&gt;

&lt;p&gt;When SoundCloud was just a start-up,
they originally developed their application as a single application.
Many features later,
this resulted in one big, monolithic application called &lt;em&gt;the Mothership&lt;/em&gt;.
With only a few thousand artists and users sharing music,
the application performed sufficiently.&lt;/p&gt;

&lt;p&gt;However,
nowadays,
about 12 hours of music is uploaded &lt;em&gt;every minute&lt;/em&gt; to SoundCloud.
The platform is used by hundreds of millions of users every day.
To be able to handle this size of volume,
SoundCloud adapted a more scalable approach.
Deciding against a complete rewrite of their whole technology stack,
they stopped adding new features to the Mothership.
Instead, new features were written as microservices,
living next to the Mothership.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to know more about how SoundCloud moved from one monolithic application to a microservices architecture,
you can find a &lt;a href=&quot;https://developers.soundcloud.com/blog/building-products-at-soundcloud-part-1-dealing-with-the-monolith&quot;&gt;three-part&lt;/a&gt;
&lt;a href=&quot;https://developers.soundcloud.com/blog/building-products-at-soundcloud-part-2-breaking-the-monolith&quot;&gt;blog post&lt;/a&gt;
&lt;a href=&quot;https://developers.soundcloud.com/blog/building-products-at-soundcloud-part-3-microservices-in-scala-and-finagle&quot;&gt;series&lt;/a&gt;
 on their developer blog (which is an excellent read, by the way).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Moving towards a microservices architecture paved the way for many possibilities for SoundCloud,
but it also introduced a lot of complexity.
Monitoring a single application is easy.
Monitoring hundreds of different services with thousands of instances is an entirely different story.
SoundCloud’s original monitoring set-up consisted of &lt;a href=&quot;https://graphiteapp.org/&quot;&gt;Graphite&lt;/a&gt; and &lt;a href=&quot;https://github.com/etsy/statsd&quot;&gt;StatsD&lt;/a&gt;.
This setup did not suffice for the new, scalable microservices architecture.
The amount of generated events could not be handled in a reliable way.&lt;/p&gt;

&lt;p&gt;SoundCloud started looking for a new monitoring tool,
while keeping the following requirements in mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;strong&gt;multi-dimensional data model&lt;/strong&gt;,
where data can be sliced and diced along multiple dimensions like host, service, endpoint and method.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Operational simplicity&lt;/strong&gt;,
so that you can setup monitoring anywhere you want,
whenever you want,
without having to have a Ph.D. in configuration management.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Scalable and decentralized&lt;/strong&gt;,
for independent and reliable monitoring.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;strong&gt;powerful query language&lt;/strong&gt; that utilizes the data model for meaningful alerting and visualisation.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since no existing system combined all of these features,
Prometheus was born from a pet project at SoundCloud.&lt;/p&gt;

&lt;p&gt;Although the project has been &lt;a href=&quot;https://github.com/prometheus&quot;&gt;open source&lt;/a&gt; from the beginning,
SoundCloud did not make any noise about it until the project was mature enough.
In January 2015,
after 2 years of development and internal usage,
the project was &lt;a href=&quot;https://developers.soundcloud.com/blog/prometheus-monitoring-at-soundcloud&quot;&gt;publicly announced&lt;/a&gt;
and a &lt;a href=&quot;https://prometheus.io&quot;&gt;website&lt;/a&gt; was put online.
The amount of attention it received was totally unexpected for the team at SoundCloud.
After a &lt;a href=&quot;https://news.ycombinator.com/item?id=8995696&quot;&gt;post on Hacker News&lt;/a&gt;,
which made it all the way to the top,
things got serious.
There was a sharp rise in contributions, questions, GitHub issues, conference invites, and all that stuff.&lt;/p&gt;

&lt;p&gt;The following image depicts the amount of stars the project received on GitHub since its inception.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img style=&quot;max-width: 640px;&quot; alt=&quot;Prometheus Github Stars&quot; src=&quot;/img/prometheus/prometheus-github-stars.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;architecture&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;architecture&quot;&gt;Architecture&lt;/h1&gt;

&lt;p&gt;Prometheus’ architecture is pretty straightforward.&lt;/p&gt;

&lt;p&gt;Prometheus servers scrape (pull) metrics from &lt;em&gt;instrumented jobs&lt;/em&gt;.
If a service is unable to be instrumented,
the server can scrape metrics from an intermediary &lt;em&gt;push gateway&lt;/em&gt;.
There is no distributed storage.
Prometheus servers store all metrics locally.
They can run rules over this data and generate new time series,
or trigger alerts. Servers also provide an API to query the data.
Grafana utilizes this functionality and can be used to build dashboards.&lt;/p&gt;

&lt;p&gt;Finally,
Prometheus servers know which targets to scrape from due to service discovery,
or static configuration.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Prometheus Architecture&quot; src=&quot;/img/prometheus/prometheus-architecture.svg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;architecture&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;data-model&quot;&gt;Data Model&lt;/h1&gt;

&lt;p&gt;At its core,
Prometheus stores all data as &lt;strong&gt;time series&lt;/strong&gt;.
A time series is a stream of timestamped values that belong to the same metric and the same labels.
The labels cause the metrics to be multi-dimensional.&lt;/p&gt;

&lt;p&gt;For example,
if we wish to monitor the total amount of HTTP requests on our API,
we could create a metric named &lt;strong&gt;api_http_requests_total&lt;/strong&gt;.
Now,
to make this metric multi-dimensional,
we can add labels.
Labels are simple key value pairs.
For HTTP requests,
we can attach a label named &lt;strong&gt;method&lt;/strong&gt; that takes the HTTP method as value.
Other possible labels include the endpoint that is called on our API,
and the HTTP status returned by the server for that request.&lt;/p&gt;

&lt;p&gt;The notation for a metric like that could be the following:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;api_http_requests_total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/api/posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;200&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now,
if we start sampling values for this metric,
we could end up with the following time series:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Metrics&lt;/th&gt;
      &lt;th&gt;Timestamp&lt;/th&gt;
      &lt;th&gt;Value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;api_http_requests_total{method=&quot;GET&quot;, endpoint=&quot;/api/posts&quot;, status=&quot;200&quot;}&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@1464623917237&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;68856&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;api_http_requests_total{method=&quot;GET&quot;, endpoint=&quot;/api/posts&quot;, status=&quot;500&quot;}&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@1464623917237&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;5567&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;api_http_requests_total{method=&quot;GET&quot;, endpoint=&quot;/api/posts&quot;, status=&quot;200&quot;}&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@1464624516508&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;76909&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;api_http_requests_total{method=&quot;GET&quot;, endpoint=&quot;/api/posts&quot;, status=&quot;500&quot;}&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@1464624516508&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;6789&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;One of the great aspects of time series
is the fact that the amount of generated time series is independent of the amount of events.
Even though your server might suddenly get a spike in traffic,
the amount of time series generated stays the same.
Only the outputted value of the time series is different.
This is wonderful for scalability.&lt;/p&gt;

&lt;p&gt;Prometheus offers four metric types which can be used to generate one or multiple time series.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;counter&lt;/strong&gt; is a metric which is a numerical value that is only incremented,
never decremented.
Examples include the total amount of requests served,
how many exceptions that occur, etc.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;gauge&lt;/strong&gt; is a metric similar to the counter. It is a numerical value that can go either up or down.
Think of memory usage, cpu usage, amount of threads, or perhaps a temperature.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;&lt;a href=&quot;https://www.google.com/search?q=histogram&quot;&gt;histogram&lt;/a&gt;&lt;/strong&gt; is a metric that samples observations.
These observations are counted and placed into configurable buckets.
Upon being scraped,
a &lt;em&gt;histogram&lt;/em&gt; provides multiple time series,
including one for each bucket,
one for the sum of all values,
and one for the count of the events that have been observed.
A typical use case for a histogram is the measuring of response times.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;summary&lt;/strong&gt; is similar to a &lt;em&gt;histogram&lt;/em&gt;,
but it also calculates configurable &lt;a href=&quot;https://en.wikipedia.org/wiki/Quantile&quot;&gt;quantiles&lt;/a&gt;.
Depending on your requirements,
you either use a &lt;a href=&quot;https://prometheus.io/docs/practices/histograms/&quot;&gt;histogram or a summary&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;slice-dice-with-the-query-language&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;slice--dice-with-the-query-language&quot;&gt;Slice &amp;amp; Dice with the Query Language&lt;/h1&gt;

&lt;p&gt;A powerful data model needs a powerful query language.
Prometheus offers one,
and it is also one of Prometheus’ key features.
The Prometheus query language,
or &lt;em&gt;promql&lt;/em&gt;,
is an expressive, functional language.
One which apparently,
by the way,
is &lt;a href=&quot;http://www.robustperception.io/conways-life-in-prometheus/&quot;&gt;Turing complete&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The language is easy to use.
Monitoring things like CPU usage,
memory usage, amount of HTTP request served, etc. are pretty straightforward,
and the language makes it effortless.
Using an &lt;strong&gt;instant vector selector&lt;/strong&gt;,
you can select time series from a metric.&lt;/p&gt;

&lt;p&gt;For example,
Continuing with our API example,
we can select all the time series of the metric &lt;code class=&quot;highlighter-rouge&quot;&gt;api_http_requests_total&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;api_http_requests_total&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can dive a little bit deeper by filtering these time series on their labels using curly braces (&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;).
Let’s say we want to monitor requests that failed due to an internal server error.
We can achieve this by selecting the time series of the metric &lt;code class=&quot;highlighter-rouge&quot;&gt;api_http_requests_total&lt;/code&gt;
where the label &lt;code class=&quot;highlighter-rouge&quot;&gt;status&lt;/code&gt; is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;500&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;api_http_requests_total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can also define a time window if we only want to have time series of a certain period.
This is done by using a &lt;strong&gt;range vector selector&lt;/strong&gt;.
The following example selects time series of the last hour:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;api_http_requests_total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The time duration is specified as a number followed by a character depicting the time unit:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;s&lt;/strong&gt; - seconds&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;m&lt;/strong&gt; - minutes&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;h&lt;/strong&gt; - hours&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;d&lt;/strong&gt; - days&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;w&lt;/strong&gt; - weeks&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt; - years&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can go further back in time by using an &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt;.
This example selects time series that happened at least an hour ago:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;api_http_requests_total&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can use functions in our queries to create more useful results.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;rate()&lt;/code&gt; function calculates the per-second average rate of time series in a range vector.
Combining all the above tools,
we can get the rates of HTTP requests of a specific timeframe.
The query below will calculate the per-second rates of all HTTP requests
that occurred in the last 5 minutes an hour ago:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;api_http_requests_total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A slightly more complex example selects the top 3 endpoints which have the most HTTP requests
not being served correctly in the last hour:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;topk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;api_http_requests_total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can see,
Prometheus can provide a lot of useful information with several simple queries that only have a few basic functions and operators.
There is also support for sorting, aggregation, interpolation and other mathematical wizardry that you can find in other query languages.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;instrumenting-your-services&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;instrumenting-your-services&quot;&gt;Instrumenting Your Services&lt;/h1&gt;

&lt;p&gt;One of the requirements to be able to query data and get results,
obviously,
is the fact that there must be data that can be queried.
Generating data can be done by instrumenting your services.
Prometheus offers client libraries for
&lt;a href=&quot;https://github.com/prometheus/client_golang&quot;&gt;Go&lt;/a&gt;,
&lt;a href=&quot;https://github.com/prometheus/client_java&quot;&gt;Java/Scala&lt;/a&gt;,
&lt;a href=&quot;https://github.com/prometheus/client_python&quot;&gt;Python&lt;/a&gt; and
&lt;a href=&quot;https://github.com/prometheus/client_ruby&quot;&gt;Ruby&lt;/a&gt;.
There is also a lengthy list of unofficial third-party clients for other languages,
including clients for Bash and Node.js.
These clients enable you to expose metrics endpoints through HTTP.&lt;/p&gt;

&lt;p&gt;This is totally different compared to other,
more traditional,
monitoring tools.
Normally,
the application is unaware that it is being monitored.
With Prometheus,
you must instrument your code
and explicitly define the metrics you want to expose.
This allows you to generate highly granular data which you can query.
However,
this technique is not much different than logging.
Logging statements are,
most of the time,
also explicitly defined in the code,
so why not for monitoring as well?&lt;/p&gt;

&lt;p&gt;For short-lived jobs,
like cronjobs,
scraping may be too slow to gather the metrics.
For these use cases,
Prometheus offers an alternative,
called the &lt;a href=&quot;https://github.com/prometheus/pushgateway&quot;&gt;Pushgateway&lt;/a&gt;.
Before a job disappears,
it can push metrics to this gateway,
and Prometheus can scrape the metrics from this gateway later on.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;exporters&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;exporters&quot;&gt;Exporters&lt;/h1&gt;

&lt;p&gt;Not everything can be instrumented.
Third-party tools that do not support Prometheus metrics natively,
can be monitored with &lt;strong&gt;exporters&lt;/strong&gt;.
Exporters can collect statistics and existing metrics,
and convert them to Prometheus metrics.
An exporter,
just like an instrumented service,
exposes these metrics through an endpoint,
and can be scraped by Prometheus.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://prometheus.io/docs/instrumenting/exporters/&quot;&gt;large variety of exporters&lt;/a&gt; is already available.
If you want to monitor third-party software that does not have an exporter publicly available,
you can write your own &lt;a href=&quot;https://prometheus.io/docs/instrumenting/writing_exporters/&quot;&gt;custom exporter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;scraping-the-targets&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;scraping-the-targets&quot;&gt;Scraping the Targets&lt;/h1&gt;

&lt;p&gt;Pulling metrics from instances is called scraping.
Scraping is done at configurable intervals by the Prometheus server.
Prometheus allows you to configure &lt;strong&gt;jobs&lt;/strong&gt; that fetch time series from &lt;strong&gt;instances&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;scrape_interval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;15s&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Scrape targets every 15 seconds&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;scrape_timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;15s&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Timeout after 15 seconds&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Attach the label monitor=dev-monitor to all scraped time series scraped by this server&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;monitor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;dev-monitor'&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;scrape_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;job_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;job-name&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;scrape_interval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10s&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Override the default global interval for this job&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;scrape_timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10s&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Override the default global timeout for this job&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;target_groups&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# First group of scrape targets&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;localhost:9100'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;localhost:9101'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;first-group'&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Second group of scrape targets&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;localhost:9200'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;localhost:9201'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;second-group'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This configuration file is pretty self-explanatory.
You can define defaults for all jobs in the &lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt; root element.
These defaults can then be overridden by each job,
if necessary.&lt;/p&gt;

&lt;p&gt;A job itself has a name and a list of target groups.
In most cases,
a job has one list of targets (one target group),
but Prometheus allows you to split these between different groups,
so you can add different labels to each scraped metric of that group.
Next to your own custom labels,
Prometheus will additionally append the &lt;code class=&quot;highlighter-rouge&quot;&gt;job&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;instance&lt;/code&gt; labels to the sampled metrics automatically.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;visualization-and-analytics&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;visualization-and-analytics&quot;&gt;Visualization and Analytics&lt;/h1&gt;

&lt;p&gt;Prometheus has its own dashboard,
called &lt;strong&gt;&lt;a href=&quot;https://github.com/prometheus/promdash&quot;&gt;PromDash&lt;/a&gt;&lt;/strong&gt;,
but it has been &lt;strong&gt;deprecated&lt;/strong&gt; in favor of &lt;a href=&quot;http://grafana.org&quot;&gt;Grafana&lt;/a&gt;.
Grafana supports Prometheus metrics out-of-the-box
and makes setting up metrics visualization effortless.
After adding a Prometheus data source,
you can immediately start creating dashboards using &lt;a href=&quot;#slice-dice-with-the-query-language&quot;&gt;PromQL&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;figures&quot;&gt;
  &lt;a href=&quot;/img/prometheus/grafana-datasource.jpg&quot;&gt;
  &lt;figure&gt;
      &lt;img style=&quot;max-width: 320px;&quot; alt=&quot;Prometheus Datasource&quot; src=&quot;/img/prometheus/grafana-datasource.jpg&quot; /&gt;
      &lt;figcaption&gt;Step 1: Create datasource&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;/a&gt;

  &lt;a href=&quot;/img/prometheus/grafana-dashboard.jpg&quot;&gt;
  &lt;figure&gt;
    &lt;img style=&quot;max-width: 320px;&quot; alt=&quot;Grafana Dashboard&quot; src=&quot;/img/prometheus/grafana-dashboard.jpg&quot; /&gt;
    &lt;figcaption&gt;Step 2: Profit&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;alert-alert&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;alert-alert&quot;&gt;Alert! Alert!&lt;/h1&gt;

&lt;p&gt;Prometheus provides an &lt;a href=&quot;https://github.com/prometheus/alertmanager&quot;&gt;Alert Manager&lt;/a&gt;.
This Alert Manager is highly configurable and supports many notification methods natively.
You can define &lt;strong&gt;routes&lt;/strong&gt; and &lt;strong&gt;receivers&lt;/strong&gt;,
so you have fine-grained control over every alert and how it is treated.
It is possible to suppress alerts and define inhibition rules,
so you can prevent getting thousands of the same alert if a many-node cluster goes down.&lt;/p&gt;

&lt;p&gt;Alerts can be generated by defining &lt;strong&gt;alerting rules&lt;/strong&gt;.
This is done in Prometheus and not in the Alert Manager.
Here are a few simple alerting rule examples:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Alert for any instance that have a median request latency &amp;gt;1s.
ALERT APIHighRequestLatency
  IF api_http_request_latencies_second{quantile=&quot;0.5&quot;} &amp;gt; 1
  FOR 1m
  ANNOTATIONS {
    summary = &quot;High request latency on &quot;,
    description = &quot; has a median request latency above 1s (current value: s)&quot;,
  }

ALERT CpuUsage
IF cpu_usage_total &amp;gt; 95
FOR 1m
LABELS { severity=&quot;critical&quot;}
ANNOTATIONS {
  summary = &quot;YOU MUST CONSTRUCT ADDITIONAL PYLONS&quot;
  description = &quot;CPU usage is above 95%&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After an alert is generated and sent to the Alert Manager,
it can be routed using &lt;strong&gt;routes&lt;/strong&gt;.
There is one root route on which each incoming alert enters,
and you can define child routes to route alerts to the correct receiver.
These routes can be configured using a YAML configuration file:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# The root route on which each incoming alert enters.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# The default receiver&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;receiver&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;team-X'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# The child route trees.&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# This is a regular expressiong based route&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;match_re&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^(foo|bar)$&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;receiver&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;team-foobar&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Another child route&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;severity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;critical&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;receiver&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;team-critical&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are multiple types of &lt;a href=&quot;https://prometheus.io/docs/alerting/configuration/#receiver-receiver&quot;&gt;&lt;strong&gt;receivers&lt;/strong&gt;&lt;/a&gt; to which you can push notifications to.
You can push alert notifications to SMTP,
&lt;a href=&quot;https://www.hipchat.com&quot;&gt;HipChat&lt;/a&gt;,
&lt;a href=&quot;https://www.pagerduty.com&quot;&gt;PagerDuty&lt;/a&gt;,
&lt;a href=&quot;https://pushover.net/&quot;&gt;PushOver&lt;/a&gt;,
&lt;a href=&quot;https://slack.com&quot;&gt;Slack&lt;/a&gt; and &lt;a href=&quot;https://www.opsgenie.com/&quot;&gt;OpsGenie&lt;/a&gt;.
Additionally,
you can use a web hook to send HTTP POST requests to a certain endpoint with the alert as JSON,
if you wish to push notifications to somewhere else.
Check out &lt;a href=&quot;http://www.robustperception.io/audio-alerting-with-prometheus/&quot;&gt;this guy’s audio alarm&lt;/a&gt;,
which alerts him when his internet goes down!&lt;/p&gt;

&lt;p&gt;The receivers are configured in the same YAML configuration file:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;receivers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Email receiver&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;team-X'&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;email_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;alerts@team-x.com'&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Slack receiver that sends alerts to the #general channel.&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;team-foobar'&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;slack_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;api_url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://foobar.slack.com/services/hooks/incoming-webhook?token=&amp;lt;token&amp;gt;'&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;general'&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Webhook receiver with a custom endpoint&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;team-critical'&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;webhook_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;team.critical.com'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;monitoring-time&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;monitoring-time&quot;&gt;Monitoring Time!&lt;/h1&gt;

&lt;p&gt;Do you wish to get your hands dirty quickly with Prometheus?
Perfect!
I have prepared a project for demonstration purposes,
which can be found &lt;a href=&quot;https://github.com/ordina-jworks/prometheus-demo&quot;&gt;on the Ordina JWorks GitHub repository&lt;/a&gt;.
The project can be set up using only one command,
leveraging &lt;a href=&quot;https://docker.com/getdocker&quot;&gt;Docker&lt;/a&gt; and &lt;a href=&quot;https://www.gnu.org/s/make/manual/make.html&quot;&gt;Make&lt;/a&gt;.
It covers most of the features discussed in this blog post.&lt;/p&gt;

&lt;p&gt;First clone the project with Git:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git clone git@github.com:ordina-jworks/prometheus-demo.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After the project is cloned,
run &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; in the project directory:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will compile all applications,
build or pull all necessary Docker images,
and start the complete project using Docker Compose.
The following containers are started:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker ps
CONTAINER ID        IMAGE                              COMMAND                  PORTS                     NAMES
c620b49edf4c        prom/alertmanager                  &lt;span class=&quot;s2&quot;&gt;&quot;/bin/alertmanager -c&quot;&lt;/span&gt;   0.0.0.0:32902-&amp;gt;9093/tcp   prometheusdemo_alertmanager_1
67b461b6a44b        grafana/grafana                    &lt;span class=&quot;s2&quot;&gt;&quot;/run.sh&quot;&lt;/span&gt;                0.0.0.0:32903-&amp;gt;3000/tcp   prometheusdemo_grafana_1
920792d123bd        google/cadvisor                    &lt;span class=&quot;s2&quot;&gt;&quot;/usr/bin/cadvisor -l&quot;&lt;/span&gt;   0.0.0.0:32900-&amp;gt;8080/tcp   prometheusdemo_cadvisor_1
215c20eb849b        ordina-jworks/prometheus-prommer   &lt;span class=&quot;s2&quot;&gt;&quot;/bin/sh -c /entrypoi&quot;&lt;/span&gt;   0.0.0.0:32901-&amp;gt;9090/tcp   prometheusdemo_prometheus_1
f3cfc2f63f00        tomverelst/prommer                 &lt;span class=&quot;s2&quot;&gt;&quot;/bin/prommer -target&quot;&lt;/span&gt;                             prometheusdemo_prommer_1
574f14998424        ordina-jworks/voting-app           &lt;span class=&quot;s2&quot;&gt;&quot;/main&quot;&lt;/span&gt;                  0.0.0.0:32899-&amp;gt;8080/tcp   prometheusdemo_voting-app_1
66f2a00fcbcb        ordina-jworks/alert-console        &lt;span class=&quot;s2&quot;&gt;&quot;/main&quot;&lt;/span&gt;                  0.0.0.0:32898-&amp;gt;8080/tcp   prometheusdemo_alert-console_1
4fd707d4e80c        ordina-jworks/voting-generator     &lt;span class=&quot;s2&quot;&gt;&quot;/main -vote=cat -max&quot;&lt;/span&gt;   8080/tcp                  prometheusdemo_vote-cats_1
5b876a131ad0        ordina-jworks/voting-generator     &lt;span class=&quot;s2&quot;&gt;&quot;/main -vote=dog -max&quot;&lt;/span&gt;   8080/tcp                  prometheusdemo_vote-dogs_1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can see,
a lot of containers are started!
You can view the public ports of the containers in this list,
which you need to access the applications.
The project consists of the following components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/prometheus/prometheus&quot;&gt;&lt;strong&gt;Prometheus&lt;/strong&gt;&lt;/a&gt; which scrapes the metrics and throws alerts&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/grafana/grafana&quot;&gt;&lt;strong&gt;Grafana&lt;/strong&gt;&lt;/a&gt; to visualize metrics and show fancy graphs&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/prometheus/alertmanager&quot;&gt;&lt;strong&gt;Alert Manager&lt;/strong&gt;&lt;/a&gt; to collect all alerts and route them with a rule based system&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/google/cadvisor&quot;&gt;&lt;strong&gt;cAdvisor&lt;/strong&gt;&lt;/a&gt; which exposes container and host metrics&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tomverelst/prommer&quot;&gt;&lt;strong&gt;Prommer&lt;/strong&gt;&lt;/a&gt;, a custom Prometheus target discovery tool&lt;/li&gt;
  &lt;li&gt;An &lt;strong&gt;alert console&lt;/strong&gt; which displays the alerts in the console&lt;/li&gt;
  &lt;li&gt;A &lt;strong&gt;voting application&lt;/strong&gt; which registers and counts votes&lt;/li&gt;
  &lt;li&gt;A &lt;strong&gt;voting generator&lt;/strong&gt; which generates votes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The voting application exposes a custom metric called &lt;code class=&quot;highlighter-rouge&quot;&gt;voting_amount_total&lt;/code&gt;.
This metric holds the total amount of votes and is labeled by the type of vote,
e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;voting_amount_total{name=dog}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An alerting rule is configured in Prometheus that checks for the amount of votes.
Once it passes a certain threshold,
the alert is fired.
This alert is sent to the &lt;strong&gt;Alert Manager&lt;/strong&gt;,
which in turn routes it to the custom &lt;strong&gt;alert console&lt;/strong&gt; through a webhook.&lt;/p&gt;

&lt;div class=&quot;figures&quot;&gt;
  &lt;a href=&quot;/img/prometheus/demo-rule-inactive.png&quot;&gt;
  &lt;figure&gt;
      &lt;img style=&quot;max-width: 320px;&quot; alt=&quot;Inactive alert&quot; src=&quot;/img/prometheus/demo-rule-inactive.png&quot; /&gt;
      &lt;figcaption&gt;Inactive alert&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;/a&gt;


&lt;/div&gt;

&lt;div class=&quot;figures&quot;&gt;
  &lt;a href=&quot;/img/prometheus/demo-rule-active.png&quot;&gt;
  &lt;figure&gt;
    &lt;img style=&quot;max-width: 320px;&quot; alt=&quot;Active alert&quot; src=&quot;/img/prometheus/demo-rule-active.png&quot; /&gt;
    &lt;figcaption&gt;The alert is fired&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;alert console&lt;/strong&gt; logs the JSON body of the POST request from the &lt;strong&gt;Alert Manager&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We can check the output of these logs using Docker Compose:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker-compose logs -f --tail&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;all&quot;&lt;/span&gt; alert-console
Attaching to prometheusdemo_alert-console_1
alert-console_1  | &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;receiver&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;alert_console&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;status&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;firing&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;alerts&quot;&lt;/span&gt;:[&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;status&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;firing&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;labels&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;alertname&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;TooManyCatVotes&quot;&lt;/span&gt;,
&lt;span class=&quot;s2&quot;&gt;&quot;instance&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;172.19.0.5:8080&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;job&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;voting-app&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;cat&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;severity&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;critical&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;annotations&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;summary&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;Too many votes for cats!
&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;startsAt&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;2016-09-22T17:09:22.807Z&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;endsAt&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;0001-01-01T00:00:00Z&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;generatorURL&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;http://215c20eb849b:9090/graph#%5B%7B%22expr%
22%3A%22votes_amount_total%7Bname%3D%5C%22cat%5C%22%7D%20%3E%20100%22%2C%22tab%22%3A0%7D%5D&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;groupLabels&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;alertname&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;TooManyCatV
otes&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;commonLabels&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;alertname&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;TooManyCatVotes&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;instance&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;172.19.0.5:8080&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;job&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;voting-app&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;cat&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;severity&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;critical
&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;commonAnnotations&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;summary&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;Too many votes for cats!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;externalURL&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;http://c620b49edf4c:9093&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;groupKey&quot;&lt;/span&gt;:101200
6562800295578&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;grafana&quot;&gt;Grafana&lt;/h3&gt;

&lt;p&gt;The default credentials for Grafana are &lt;code class=&quot;highlighter-rouge&quot;&gt;admin:admin&lt;/code&gt;.
After logging in,
you must first configure a &lt;strong&gt;Prometheus data source&lt;/strong&gt;.
Prometheus is available at &lt;code class=&quot;highlighter-rouge&quot;&gt;http://prometheus:9090&lt;/code&gt; (from within the container).&lt;/p&gt;

&lt;div class=&quot;figures&quot;&gt;
  &lt;a href=&quot;/img/prometheus/grafana-datasource.jpg&quot;&gt;
  &lt;figure&gt;
      &lt;img style=&quot;max-width: 320px;&quot; alt=&quot;Configuring Data source&quot; src=&quot;/img/prometheus/grafana-datasource.jpg&quot; /&gt;
      &lt;figcaption&gt;Configuring the data source&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;/a&gt;

  &lt;a href=&quot;/img/prometheus/grafana-dashboard.jpg&quot;&gt;
  &lt;figure&gt;
    &lt;img style=&quot;max-width: 320px;&quot; alt=&quot;Grafana Dashboard&quot; src=&quot;/img/prometheus/grafana-dashboard.jpg&quot; /&gt;
    &lt;figcaption&gt;Visualizing metrics&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cadvisor&quot;&gt;cAdvisor&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;cAdvisor&lt;/strong&gt; also has a simple dashboard which displays most important host and container metrics.
Since Prometheus scrapes cAdvisor,
these metrics are also available from Grafana.&lt;/p&gt;

&lt;div class=&quot;figures&quot;&gt;
  &lt;a href=&quot;/img/prometheus/cadvisor-throughput.png&quot;&gt;
  &lt;figure&gt;
      &lt;img style=&quot;max-width: 320px;&quot; alt=&quot;Throughput&quot; src=&quot;/img/prometheus/cadvisor-throughput.png&quot; /&gt;
      &lt;figcaption&gt;Network Throughput&lt;/figcaption&gt;
  &lt;/figure&gt;

  &lt;/a&gt;

  &lt;a href=&quot;/img/prometheus/cadvisor-cpu-usage.png&quot;&gt;
  &lt;figure&gt;
      &lt;img style=&quot;max-width: 320px;&quot; alt=&quot;CPU Usage per Core&quot; src=&quot;/img/prometheus/cadvisor-cpu-usage.png&quot; /&gt;
      &lt;figcaption&gt;CPU Usage per Core&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;final-words&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;final-words&quot;&gt;Final Words&lt;/h1&gt;

&lt;p&gt;Just a few months ago,
the Prometheus team &lt;a href=&quot;https://prometheus.io/blog/2016/05/09/prometheus-to-join-the-cloud-native-computing-foundation/&quot;&gt;joined the Cloud Native Computing Foundation&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Today, we are excited to announce that the CNCF’s Technical Oversight Committee voted unanimously to accept Prometheus as a second hosted project after Kubernetes!
You can find more information about these plans in the &lt;a href=&quot;https://cncf.io/news/announcement/2016/05/cloud-native-computing-foundation-accepts-prometheus-second-hosted-project&quot;&gt;official press release&lt;/a&gt; by the CNCF.&lt;/p&gt;

  &lt;p&gt;By joining the CNCF, we hope to establish a clear and sustainable project governance model, as well as benefit from the resources, infrastructure, and advice that the independent foundation provides to its members.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Cloud Native Computing Foundation&lt;/em&gt; (&lt;a href=&quot;http://cncf.io/&quot;&gt;CNCF&lt;/a&gt;) is a nonprofit, open standardization organisation which commits itself to advance the development of cloud native technologies,
formed under the Linux Foundation.
It is a shared effort by the industry to create innovation for container packaged, microservices based, dynamically scheduled applications and operations.
Prometheus has proven itself to be worthy to be an industry standard in alerting and monitoring.
It offers a wide-range of features,
from instrumenting to alerting,
and is supported by many other tools.
If you are looking for a monitoring tool,
definitely give it a shot!&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Sep 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/monitoring/2016/09/23/Monitoring-with-Prometheus.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/monitoring/2016/09/23/Monitoring-with-Prometheus.html</guid>
        
        <category>Prometheus</category>
        
        
        <category>Monitoring</category>
        
      </item>
    
      <item>
        <title>API Testing with Postman and Newman</title>
        <description>&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;For the purpose of this tutorial it is mandatory to have &lt;a href=&quot;https://www.getpostman.com/&quot; target=&quot;_blank&quot;&gt;Postman&lt;/a&gt; installed which is available as a Chrome extension, as well as a Mac application. It is also mandatory to create an account at &lt;a href=&quot;https://www.algorithmia.com/&quot; target=&quot;_blank&quot;&gt;Algorithmia&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;creating-and-selecting-an-environment&quot;&gt;Creating and selecting an environment&lt;/h3&gt;
&lt;p&gt;Postman’s environment functionality makes it very easy to switch between different environments. A set of variables can be configured per environment and when switching from one environment to another one these will be replaced accordingly. For example let’s create an environment called “production”.  Click the “No environment” dropdown in the header and select “Manage environments”.
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/postman-2016/manage_environment.png&quot; alt=&quot;Alt text&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
Select the “Add” button on the popup that is presented to you.  Add &lt;code class=&quot;highlighter-rouge&quot;&gt;url https://api.algorithmia.com/v1/algo/&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;key simNz9pf7hfAQNifdA224K1GFhs1&lt;/code&gt;.  Don’t forget to replace the secret by your own key.
 &lt;br /&gt;
 &lt;br /&gt;
&lt;img src=&quot;/img/postman-2016/manage_environment_values.jpg&quot; alt=&quot;Alt text&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
Finally select the “Production” environment in the environment dropdown and let’s create our first request.
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/postman-2016/manage_environment_production.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;creating-a-post-request&quot;&gt;Creating a POST request&lt;/h3&gt;
&lt;p&gt;Enter &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}/WayneS/Calculator/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt; in the request field and change the method from GET to POST.  We need to add some additional headers as well so add &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type application/json&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization Simple {{key}}&lt;/code&gt;.  As you can see, we are using the environment variables &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt; so when switching environments, those variables will get replaced.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt; format can only be used in the request URL/URL params/Header values/form-data/url-encoded values/Raw body content/Helper fields.
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/postman-2016/request_headers.png&quot; alt=&quot;Alt text&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
Postman also has a few dynamic variables which you can use. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{$guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt; is generating a random v4 style guid, &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{$timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt; is the current timestamp, &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{$randomInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt; a random integer between 0 and 1000. More of those will be added in future releases. But for now, let us just simply enter &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;x=log(2)&quot;&lt;/code&gt; as the raw content of our request.
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/postman-2016/request_body.png&quot; alt=&quot;Alt text&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
Finally let’s hit the “Send” button and if everything goes as expected, we should receive the following response.
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/postman-2016/request_send.jpg&quot; alt=&quot;Alt text&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
Next we are going to write our test, but first let us save our request into a collection. By clicking on the create collection button on the collections tab, the following popup will be displayed.  Simply enter “Calculator” as the name of the collection and hit the create button.
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/postman-2016/create_collection.jpg&quot; alt=&quot;Alt text&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
Now hit the “Save” button next to the request field. Enter “Log” as the name of the request and select “Calculator” from the dropdown menu.
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/postman-2016/request_save.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;writing-a-test&quot;&gt;Writing a test&lt;/h3&gt;
&lt;p&gt;A Postman test is essentially JavaScript code which sets values for the special ‘tests’ object. To know which other objects and libraries are available while writing your test cases, make sure you check the following &lt;a href=&quot;https://www.getpostman.com/docs/sandbox&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;. Let’s copy following code snippet in the Tests sandbox.
&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;tests[&lt;span class=&quot;s2&quot;&gt;&quot;Status code is 200&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; responseCode.code &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; 200;
var jsonData &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; JSON.parse&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;responseBody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
tests[&lt;span class=&quot;s2&quot;&gt;&quot;Verify result&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; jsonData.result.x &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.69314718056&quot;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/img/postman-2016/test.jpg&quot; alt=&quot;Alt text&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
The test will run each time you hit the “Send” button. Let’s say we need a custom function to set some variables, this can easily be achieved in the pre-request sandbox as shown below:
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/postman-2016/custom_function.jpg&quot; alt=&quot;Alt text&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
Here we are using the ‘postman’ object and are calling the setEnvironmentVariable function on it, this allows us to assign the result of our function to a variable on the environment scope for later use.&lt;/p&gt;

&lt;h3 id=&quot;collection-runner&quot;&gt;Collection Runner&lt;/h3&gt;
&lt;p&gt;Let’s assume we want to run several tests at once. Postman has a Collection Runner utility that allows us to just do that, even thousands of tests if we want. To access the runner click on “Runner” in the top header then select  “Calculator” as the collection and “Production” as the environment. We want the runner to do that 2 times so enter 2 in the iteration inputfield like shown in the screenshot below.
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/postman-2016/runner_full.jpg&quot; alt=&quot;Alt text&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
Scroll down and hit the blue “Start Test” button. Following test report will be presented to you.
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/postman-2016/runner_result.jpg&quot; alt=&quot;Alt text&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
Writing a request and tests for each different permutation of data could get tiresome and tedious. On the test runner screen we are given the option to choose a data file. This data file can be either a CSV or a JSON file, but will allow us to set up data in bulk to be run through the test runner. Create a new csv file and copy following snippet into it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;input,expected_result
2,&quot;0.69314718056&quot;
224,&quot;5.41164605186&quot;
3000,&quot;8.00636756765&quot;
388949,&quot;12.8712035086&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We need to rewrite the body of our request so it will use the variable of our csv as follows.
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/postman-2016/request_csv.jpg&quot; alt=&quot;Alt text&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
We also need to rewrite our test. Like you can see we use the ‘data’ object to call our expected_result variable.
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/postman-2016/test_csv.jpg&quot; alt=&quot;Alt text&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
Back to the runner window. Select the “Calculator” collection and the “Production” environment. Click the “Choose Files” button and select the csv file you just created, click the “Preview” button to check for any inconsistenties. As there are 4 entries in our csv we want to use to feed our test enter 4 in the iteration inputfield.
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/postman-2016/runner_csv.jpg&quot; alt=&quot;Alt text&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
Hit the “Start Test” button and you will now see 12 green tests. Pretty neat, isn’t it?
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/postman-2016/runner_result_csv.jpg&quot; alt=&quot;Alt text&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;newman&quot;&gt;Newman&lt;/h3&gt;
&lt;p&gt;Integrating Postman tests with build systems can easily be accomplished with Newman. Newman is the command line tool companion for Postman. It can be installed through the Node.js package manager, npm. You’ll find more information on how the install Newman &lt;a href=&quot;https://github.com/postmanlabs/newman&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After Newman is installed we can export our previously created collection and environment. Select the ‘Calculator’ collection and hit export and save as ‘my_collection.json’.
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/postman-2016/export_collection.jpg&quot; alt=&quot;Alt text&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
To export the ‘Production’ environment select ‘Manage Environment’ and on the next popup hit export and save as ‘prod_environment.json’.
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/postman-2016/export_environment.jpg&quot; alt=&quot;Alt text&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now run you test with Newman using following command where my_collection.json is the exported collection, my_data.csv the csv, prod_environment.json the environment and -n the number of lines from our csv.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;newman run my_collection.json -n 4 -d my_data.csv -e prod_environment.json
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;p&gt;In this tutorial we saw how to create a request and a test. We saw how to create a collection and how to run it with the collection runnner and Newman.
I hope you enjoyed this tutorial and if you have any question feel free to add these as a comment or to email me at &lt;a href=&quot;mailto:gregory.rinaldi@ordina.be&quot;&gt;gregory.rinaldi@ordina.be&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;useful-links&quot;&gt;Useful links&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.getpostman.com/docs/importing_swagger&quot; target=&quot;_blank&quot;&gt;Importing Swagger files&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.getpostman.com/slack-invite&quot; target=&quot;_blank&quot;&gt;Postman Slack invite&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.getpostman.com/docs/importing_curl&quot; target=&quot;_blank&quot;&gt;Importing cURL commands&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.getpostman.com/docs/creating_curl&quot; target=&quot;_blank&quot;&gt;Creating cURL commands&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.getpostman.com/docs/soap_requests&quot; target=&quot;_blank&quot;&gt;Making SOAP requests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.getpostman.com/docs/newman_in_docker&quot; target=&quot;_blank&quot;&gt;Running Newman in Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.getpostman.com/docs/helpers&quot; target=&quot;_blank&quot;&gt;Authentication helpers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.getpostman.com/docs/creating_documentation&quot; target=&quot;_blank&quot;&gt;Publish Documentation for your Collections&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.getpostman.com/2016/03/23/conditional-workflows-in-postman/&quot; target=&quot;_blank&quot;&gt;Conditional Workflows in Postman&lt;/a&gt; (work in progress)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/newman/&quot; target=&quot;_blank&quot;&gt;Newman&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;integrating_with_jenkins/&quot; target=&quot;_blank&quot;&gt;Integrating Newman with Jenkins &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 16 Sep 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/testing/2016/09/16/Automation-testing-with-postman.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/testing/2016/09/16/Automation-testing-with-postman.html</guid>
        
        <category>Postman</category>
        
        <category>Integration Testing</category>
        
        <category>Newman</category>
        
        <category>Automation</category>
        
        <category>Testing</category>
        
        
        <category>Testing</category>
        
      </item>
    
      <item>
        <title>Microservices Dashboard</title>
        <description>&lt;p&gt;&lt;img class=&quot;center-block&quot; alt=&quot;Architecture&quot; src=&quot;/img/microservices-dashboard/screenshot.png&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So you’ve jumped on the hype train, built a bunch of microservices, and got your first releases under your belt. 
Now what?
Our experiences taught us this is the easy part.
With the newly obtained microservices freedom, teams easily plunge into a world of cowboys and unicorns.
The big ball of mud is just around the corner.
Panic, mayhem and chaos loom over the organisation, waiting for everything to spin out of control.
Especially for any enterprise not residing in Silicon Valley, maintaining some sort of governance and compliancy is essential.&lt;/p&gt;

&lt;p&gt;What does a microservice architecture mean not just for the developers, but also for analysts and managers?
What can we as developers do to offer them peace of mind?&lt;/p&gt;

&lt;h3 id=&quot;managers-like-to-have-a-grip-on-things&quot;&gt;Managers like to have a grip on things&lt;/h3&gt;

&lt;p&gt;They want to get a sense of compliancy and maturity of the components part of the ecosystem.
In theory a microservices architecture gives developers complete freedom to use whatever tools and frameworks they want inside their microservice.
In practice, managers often want to slightly restrict that freedom to avoid complete chaos.
It’s not uncommon for managers and architects to impose a set of choices developers can choose from, and goals the teams have to achieve.
In order to facilitate recruitment and knowledge transfer, developers could be forced to choose between for instance Java or Javascript.
Similarly, architects might enforce every microservice to have a quality gate in place and to have a technical debt less than five days.&lt;/p&gt;

&lt;p&gt;Aside from the technical aspects inside a microservice, compliancy is even more crucial at the contract level.
They should be defined according to an architectural vision and comply to standards across the organisation.
Having the ability to track these compliancy regulations and quality assurances is a key enabler for management to push for technical excellence.
Too often managers are left clueless on how much effort is required to mature the architecture and which teams they have to chase.
Having a dashboard at their disposal indicating where a lack of compliancy and maturity needs their attention can help to ensure budget and priorities are in line with the architectural goals.&lt;/p&gt;

&lt;p&gt;Aside from compliancy and maturity, managers want some level of change management in place.
Oftentimes this is achieved through ticketing systems and cumbersome processes.
A microservice architecture goes hand in hand with devops, including full automation and decoupling.
In that respect, teams ought to be able to define their own release schedule as there is no need for a waterfall manual testing effort of months on end, and the impact on the ecosystem is contained and managed due to the decoupled nature of microservices.
Change management in a devops organisation is much more a read-model instead of a process-heavy model.
Managers want to know what is currently out there and what will be out there in the future.
This doesn’t require a manual ticketing system, simply a smart dashboard with a timeline.&lt;/p&gt;

&lt;h3 id=&quot;analysts-need-to-know-what-functionality-is-out-there&quot;&gt;Analysts need to know what functionality is out there&lt;/h3&gt;

&lt;p&gt;In order to reuse functionality and avoid duplication, functional analysts have a strong need for an overview of the current functional landscape.
Knowing which resources are exposed by what microservices, and which events and messages are being sent back and forth between microservices and queues, can go a long way in helping analysts understand the state of the architecture.&lt;/p&gt;

&lt;p&gt;Furthermore, impact analysis can significantly improve when an overview of components and how they are linked together is available to the analysts.
Not only does it encourage analysts to identify and inform consumers of a changing service, it can help to avoid introducing breaking changes due to negligence or ignorance.
During troubleshooting, testers and analysts should be able to find out what services and backends are involved in a certain functional flow.&lt;/p&gt;

&lt;p&gt;Just like managers, functional analysts are interested in upcoming features and releases.
On top of that, analysts can benefit from being able to define the future state of the ecosystem.
Especially when multiple teams are working on similar functionality, it can be notoriously difficult to avoid duplication and breaches of bounded contexts.
Using a dashboard to define what is coming up, can help to give them an unambiguous view of the current and future landscape.&lt;/p&gt;

&lt;h3 id=&quot;developers-can-benefit-from-a-broader-view-as-well&quot;&gt;Developers can benefit from a broader view as well&lt;/h3&gt;

&lt;p&gt;In a devops organisation, developers have the responsibility to not only build but also run their services.
Knowing which versions are deployed where, can assist developers in verifying whether their deployments are successful, but also to determine the versions of their dependencies.&lt;/p&gt;

&lt;p&gt;A graphical dashboard can go a long way in providing clarity to developers.
But most of all, it can act as a hub for other tools and documentation available.
Integrations can be made with for instance API documentation, performance tooling, service registries, in-depth instance-specific dashboards and perhaps even reactive insights.&lt;/p&gt;

&lt;h2 id=&quot;the-introduction-of-the-microservices-dashboard&quot;&gt;The introduction of the Microservices Dashboard&lt;/h2&gt;

&lt;p&gt;Visualising the state of the architecture and dependencies in the system can be a huge benefit to all stakeholders in the IT organisation.
The Microservices Dashboard is a brand new open source project, which officially launched its first major release at Spring One Platform.
Building on top of Spring Boot and Spring Cloud, it visualises your microservice architecture and integrates with tools every microservice architecture benefits from.
This ranges from consumer-driven-contract testing over service discovery to hypermedia traversal and more.&lt;/p&gt;

&lt;p&gt;Microservices Dashboard is a simple application to visualize links between microservices and the encompassing ecosystem.
This AngularJS application consumes endpoints exposed by its server component.
It displays four columns: UI, Resources, Microservices and Backends.
Each of these columns show nodes and links between them.
The information for these links come from Spring Boot Actuator health endpoints, Pact consumer-driven-contract tests and hypermedia indexes, which are aggregated in the microservices-dashboard-server project.&lt;/p&gt;

&lt;h2 id=&quot;the-architecture&quot;&gt;The architecture&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; alt=&quot;Architecture&quot; src=&quot;/img/microservices-dashboard/architecture.png&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The dashboard currently consists out of an AngularJS 1.x application which communicates over HTTP to a Spring Boot application.
The frontend uses D3.js to visualise the nodes in the four columns.
We are currently in the process of completely rebuilding the frontend stack.
Next version will be running on Angular 2, Typescript and EcmaScript 6.
Most of D3.js will be taken care of by Angular 2 itself.&lt;/p&gt;

&lt;p&gt;Thanks to this refactor we’ll see the introduction of RxJS, making the frontend much more reactive in nature.
This aligns our frontend and backend components goals, since the backend is already running RxJava.
Our efforts currently focus on replicating all functionalities currently available in the dashboard, albeit with much more attention to quality and testing.
Subsequently new features and enhancements will be built on top of a much more mature and extendible frontend application.&lt;/p&gt;

&lt;p&gt;Our server component is powered by Spring Boot’s auto configuration.
It’s a library which, once on the classpath of a regular Spring Boot application, will automatically transform the Spring Boot application into a JSON graph-serving engine.
It does so by using aforementioned RxJava.
The idea of the server application is that it will fetch information from the microservices ecosystem, with for instance Spring Cloud’s integration of service registries, and collect details of components and their relation within said ecosystem.
Needless to say collecting this information requires a lot of outbound calls, and can pose a serious performance burden in case the landscape gets bigger.
Making intelligent use of the system’s resources is absolutely necessary, and RxJava does just that.
In the future we might migrate to &lt;a href=&quot;https://projectreactor.io/&quot;&gt;Spring’s Reactor&lt;/a&gt; which has a more formal integration of the ReactiveX specification and better integration with Spring itself.
Once the frontend’s revamp is completed, the last step towards an end-to-end reactive flow is the HTTP connection between both components.
Currently the server still converts the Observable to blocking, undoing a lot of the performance gains we could achieve.
Yet even while eventually blocking, we’ve benchmarked a thirty percent performance gain in switching from CompletableFutures to Observables thanks to the more sustained async handling.&lt;/p&gt;

&lt;p&gt;Aside from its reactive nature, the server component of the dashboard is also built in a very pluggable way.
Information is retrieved from the ecosystem through so-called aggregators.
Currently four aggregators are provided: the health-indicators aggregator, the index aggregator, the mappings aggregator and the Pact aggregator.
We’re looking into supporting Spring Cloud’s recent addition, Spring Cloud Contract, as a source for aggregation.
New aggregators can be easily added, and all existing aggregators can be overridden, extended, turned on and off.
In the next section we’ll go through these aggregators and their purpose.&lt;/p&gt;

&lt;h2 id=&quot;collecting-information-from-the-ecosystem&quot;&gt;Collecting information from the ecosystem&lt;/h2&gt;

&lt;p&gt;The dashboard on its own doesn’t really make a lot of sense when it’s not connected to the architecture it’s supposed to visualise.
Aggregators pull in information which eventually gets translated into nodes and links on the dashboard.&lt;/p&gt;

&lt;h4 id=&quot;health-indicators-aggregator&quot;&gt;Health-indicators aggregator&lt;/h4&gt;

&lt;p&gt;Spring Boot exposes production-ready endpoints through its Actuator module.
The health endpoint returns information regarding the current health status of the application.
The source of this information is a bunch of health indicators, describing various components and dependencies of the application.
For instance, an application can have a dependency on a database, for which a health indicator will usually provide health information to the health endpoint, indicating whether the database is up and the connection pool hasn’t been depleted.&lt;/p&gt;

&lt;p&gt;Hence, health indicators describe an up-to-date relationship between the application they run on and its dependencies.
Spring Cloud ensures health indicators are automatically enabled when you are using service discovery, circuit breakers, a config server or other Spring Cloud services. However, health indicators don’t automatically describe a relationship between an application and another application it calls.
Luckily Spring Boot has a very easy way of adding custom health indicators.
As such, developers can add a health indicator the moment a remote service call is added to the application.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;What about real-time?&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;Using health indicators we are certain the application calls another application programmatically.
This provides clarity in terms of the calls in the code and therefore the dependencies that exist across the applications.
However, using this method we aren’t sure whether this remote call is actually being executed at runtime.
These concerns are currently provided by other tools such as Twitter’s Zipkin.
In the future we will integrate the dashboard with real-time traffic information from Zipkin or similar tooling.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;index-aggregator&quot;&gt;Index aggregator&lt;/h4&gt;

&lt;p&gt;REST over HTTP is arguably the most popular communicational style in microservices architectures.
Therefore, gathering information on where and how REST is used can be quite useful.
Index and mappings aggregators perform this specific task, albeit each in a different way.&lt;/p&gt;

&lt;p&gt;The index aggregator relies on a subconstraint of REST called HATEOAS.
It stands for Hypermedia As The Engine Of Application State, and describes the idea of adding links in the payload of responses to other resources.
This enables discovery of resources, much like we are using the world wide web from its inception.
It prevents the need to bookmark URIs to resources, decoupling implementations and enabling independent evolution of the service.&lt;/p&gt;

&lt;p&gt;Similarly to a regular website, REST APIs using HATEOAS require a homepage or index from which the resource discovery starts.
Simply creating an index resource with links to the other resources the service provides, and exposing this index resource at the root of the application takes care of this.
Spring HATEOAS provides useful tools to add links to resources.&lt;/p&gt;

&lt;p&gt;Once every microservice has an index resource, we can use service discovery to discover all the services, and fetch all the index resources to map out the landscape of resources.
This is an excellent source for the dashboard, as it shows the relation between microservices and the RESTful resources they expose.&lt;/p&gt;

&lt;h4 id=&quot;mappings-aggregator&quot;&gt;Mappings aggregator&lt;/h4&gt;

&lt;p&gt;Oftentimes, RESTful resources are exposed in a more traditional way (using REST level 2) without the added complexity of HATEOAS.
While this is not fully REST compliant, it is most common among APIs using JSON over HTTP.
Spring Boot offers a handy endpoint in their Actuator module, called the mappings endpoint.
It describes all the resources exposed by the application when Spring MVC REST is used.
While also describing Spring’s own resources, a simple filter allows us to deduct node and link information from these endpoints to visualise in the dashboard.&lt;/p&gt;

&lt;h4 id=&quot;pact-aggregator&quot;&gt;Pact aggregator&lt;/h4&gt;

&lt;p&gt;In a microservices architecture, testing is absolutely crucial.
As the primary benefit of microservices is faster time-to-market, changes happen all the time.
Not only unit and integration testing is required, but also more advanced contract testing to act as a safety net.
Consumer-driven-contract testing allows the consumer (the client) to define what he expects from the producer (the service), and ensure the producer validates that definition every time a change is made to the service.
This allows the consumer to rest at ease, knowing the producer will remain backwards compatible or version accordingly, and gives the producer knowledge of who uses exactly which parts of its service.
The latter gives the producer the chance to request consumers to update their service in case they are causing too much complexity on the producer’s side due to backwards compatibility.&lt;/p&gt;

&lt;p&gt;Tests like these document with guaranteed certainty relations between clients and services or services and services.
Querying the contracts that define these relations offer a great source of information for the dashboard’s nodes and links between them.
When working with the consumer-driven-contract testing framework Pact, a repository called the Pact-broker holds all the available contracts and exposes them through a REST interface.
Our Pact aggregator makes use of this interface to pull the information into the dashboard.&lt;/p&gt;

&lt;p&gt;Spring Cloud recently added the Spring Cloud Contract module to their portfolio, based on Accurest.
We’re planning to integrate the Microservices Dashboard with Spring Cloud Contract in the near future as well.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The Microservices Dashboard gives managers, analysts and developers peace of mind when working in a microservices architecture.
Not only does it map relations between components in a visually attractive manner, it can also be a great tool for compliancy, change management, functional analysis and troubleshooting.&lt;/p&gt;

&lt;p&gt;The dashboard is currently at version 1.0.1, and can be downloaded through maven central.
To quickly get up and running, make sure to check out the &lt;a href=&quot;http://ordina-jworks.github.io/microservices-dashboard/1.0.1/&quot;&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since the project is still fairly new, any feedback is greatly appreciated.
You can reach us through &lt;a href=&quot;https://gitter.im/ordina-jworks/microservices-dashboard&quot;&gt;Gitter&lt;/a&gt; or &lt;a href=&quot;https://github.com/ordina-jworks/microservices-dashboard&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Sep 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/microservices/2016/09/12/Microservices-Dashboard-1.0.1.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/microservices/2016/09/12/Microservices-Dashboard-1.0.1.html</guid>
        
        <category>Microservices</category>
        
        <category>Dashboard</category>
        
        <category>Spring</category>
        
        <category>Spring Boot</category>
        
        <category>RxJava</category>
        
        <category>Pact</category>
        
        <category>Hypermedia</category>
        
        <category>Hateoas</category>
        
        
        <category>Microservices</category>
        
      </item>
    
      <item>
        <title>SpringOne Platform</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://springoneplatform.io/&quot;&gt;SpringOne Platform&lt;/a&gt; is the successor of &lt;a href=&quot;https://springoneplatform.io/2015&quot;&gt;SpringOne 2GX&lt;/a&gt;, with a focus mainly on &lt;a href=&quot;https://spring.io&quot;&gt;Spring&lt;/a&gt; and &lt;a href=&quot;https://www.cloudfoundry.org/&quot;&gt;Cloud Foundry&lt;/a&gt;. Next to these technical topics, SpringOne Platform also offered many sessions on cultural transformation and DevOps. Cultural transformation and DevOps are key to deliver meaningful solutions more quickly. This can be achieved by creating empowered teams, able to make independent decisions. To implement these collaborative teams, leadership buy-in is hugely important. Getting away from legacy thinking will allow enterprises to obtain short feedback cycles and thus continuously improve.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;from-imperative-to-reactive-web-apps---rossen-stoyanchev&quot;&gt;From Imperative To Reactive Web Apps - Rossen Stoyanchev&lt;/h2&gt;

&lt;p&gt;The marquee feature of Spring 5, will be first class support for Reactive Web applications. Reactive programming is about non-blocking, event-driven applications with &lt;a href=&quot;http://www.reactivemanifesto.org/glossary#Back-Pressure&quot;&gt;back-pressure&lt;/a&gt;. Back-pressure helps to ensure a good collaboration between producers and consumers. The &lt;a href=&quot;http://www.reactivemanifesto.org/&quot;&gt;Reactive Manifesto&lt;/a&gt; is an interesting read on this topic.&lt;/p&gt;

&lt;p&gt;To support reactive, Spring 5 will use &lt;a href=&quot;http://projectreactor.io/&quot;&gt;Project Reactor&lt;/a&gt; (led by Stéphane Maldini) through the &lt;a href=&quot;https://github.com/spring-projects/spring-framework/tree/master/spring-web-reactive&quot;&gt;Spring Web Reactive&lt;/a&gt; project. This &lt;a href=&quot;https://spring.io/blog/2016/07/28/reactive-programming-with-spring-5-0-m1&quot;&gt;blogpost&lt;/a&gt;, by Rossen Stoyanchev is a nice starting point to learn about &lt;a href=&quot;https://projectreactor.io/core/docs/api/reactor/core/publisher/Flux.html&quot;&gt;Flux&lt;/a&gt;, &lt;a href=&quot;https://projectreactor.io/core/docs/api/reactor/core/publisher/Mono.html&quot;&gt;Mono&lt;/a&gt; and the Spring Reactive world.&lt;/p&gt;

&lt;h2 id=&quot;managing-secrets-at-scale---mark-paluch&quot;&gt;Managing Secrets at Scale - Mark Paluch&lt;/h2&gt;
&lt;p&gt;In a world, where we run large amounts of microservices in orchestrated containers, we can never forget about security, encrypting passwords, storing keys, rotating secrets, etc. Today, applications consume both first and third party APIs and need authentication and authorization to do this in a safe way. Traditional patterns cannot keep the security bar high with dynamic deployment scenarios.&lt;/p&gt;

&lt;p&gt;As a &lt;a href=&quot;https://www.ordina.be/en/services-et-solutions/themas/secure-by-design/&quot;&gt;Secure-By-Design&lt;/a&gt; company, this talk immediately caught my attentation. In a Spring world, we can use &lt;a href=&quot;https://github.com/spring-cloud-incubator/spring-cloud-vault-config&quot;&gt;Spring Cloud Vault Config&lt;/a&gt;, wrapping &lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;Vault&lt;/a&gt;. An interesting tutorial on this Spring library is available on &lt;a href=&quot;https://spring.io/blog/2016/06/24/managing-secrets-with-vault&quot;&gt;spring.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Slides from the talk are available &lt;a href=&quot;https://t.co/ye2EoeO1tJ&quot;&gt;online&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;its-not-you-its-us-winning-over-people-for-yourself-and-the-team---neha-batra&quot;&gt;It’s not you, it’s us: Winning over people for yourself and the team - Neha Batra&lt;/h2&gt;

&lt;p&gt;This was one of the non-technical talks, but aimed to help with the daily management of technical projects. Neha’s session was the most interactive one I attended at SpringOne Platform: about 10 minutes in the session, she wanted us to pair to do a personal SWOT analysis with a stranger in the room and see how we can learn from each other. Everyone participated and I believe this might actually be useful in the context of a project. Something to try out!&lt;/p&gt;

&lt;p&gt;She ended her session with a tool chest to prevent and mitigate issues as they come up:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SWOT analysis&lt;/li&gt;
  &lt;li&gt;Personal goals&lt;/li&gt;
  &lt;li&gt;Inception&lt;/li&gt;
  &lt;li&gt;Set schedule / cadence&lt;/li&gt;
  &lt;li&gt;Provide feedback&lt;/li&gt;
  &lt;li&gt;Provide a “safe haven”&lt;/li&gt;
  &lt;li&gt;Collect and discuss concerns&lt;/li&gt;
  &lt;li&gt;Talk in person&lt;/li&gt;
  &lt;li&gt;Write down useful conversations&lt;/li&gt;
  &lt;li&gt;Find a way to align first (eg. TDD + pair programming)&lt;/li&gt;
  &lt;li&gt;Daily retros&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The slidedeck of her talk is available on &lt;a href=&quot;http://www.slideshare.net/NehaBatra5/its-not-you-its-us-winning-over-people-for-yourself-and-the-team&quot;&gt;Slideshare&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-five-stages-of-cloud-native---casey-west&quot;&gt;The five stages of Cloud Native - Casey West&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;float-image p-image&quot; src=&quot;/img/s1p/casey-west.jpg&quot; alt=&quot;Casey West&quot; style=&quot;width: 100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another non-technical talk, from the talented and funny Casey West, on how companies are adopting the &lt;strong&gt;Cloud Native&lt;/strong&gt; approach to software development.
The talk was very entertaining and resonated with the audience to such an extent, that there was constantly someone laughing. The slides itself don’t say much without explanation so I’ll try to clarify them a bit here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Analogous to the &lt;a href=&quot;https://en.wikipedia.org/wiki/K%C3%BCbler-Ross_model&quot;&gt;Kübler-Ross model&lt;/a&gt;, there are five stages when adopting Cloud Native development&lt;/strong&gt;:&lt;/p&gt;

&lt;h3 id=&quot;denial&quot;&gt;Denial&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/caseywest&quot;&gt;@caseywest&lt;/a&gt; immediately grasps the crowd’s attention with these very familiar quotes:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Containers are just tiny virtual machines”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No they’re not. Stop treating them as such. Moving a huge application or database from a virtual machine to a container doesn’t really solve anything.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“We don’t need to automate Continuous Delivery because we already automate our infrastructure with Puppet”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The problem is that these measures are not enough and &lt;strong&gt;they don’t solve enough of the problem&lt;/strong&gt;. Managing infrastructure and deploying applications using Puppet scripts already is a great improvement by treating &lt;em&gt;Infrastructure as Code&lt;/em&gt; but it &lt;strong&gt;still requires too much manual labour&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;anger&quot;&gt;Anger&lt;/h3&gt;

&lt;p&gt;Again, the goal of these funny quotes is prove a very valid point:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“It works on my machine”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The following quote isn’t in the slides but might also sound familiar:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Let me do a hotfix, I can figure it out”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and my favourite:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“DEV is just YOLO-ing sh#t to production”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These illustrate the problems, you are likely to get when trying to develop Cloud Native applications without the proper culture in place.
This is a &lt;strong&gt;clear breakdown in communication&lt;/strong&gt; and is more a &lt;em&gt;people problem&lt;/em&gt; than an IT problem.
It just doesn’t work, especially when also considering the compliance or legal aspect. There is a &lt;strong&gt;lack of acknowledgement&lt;/strong&gt; that we need roles and responsibilities.&lt;/p&gt;

&lt;h3 id=&quot;bargaining&quot;&gt;Bargaining&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;“What if we create microservices that all talk to the same datasource?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Single data model and data ownership are not possible this way.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“We crammed this monolith in a container and called it a microservice”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Applications need to adhere to some restrictions to run and scale in the cloud, otherwise you cannot take advantage of the benefits of a platform.
Often, there also is the notion of something called &lt;strong&gt;bi-modal IT&lt;/strong&gt;.
This is basically dividing your company up into &lt;strong&gt;sad mode&lt;/strong&gt; vs &lt;strong&gt;awesome mode&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A lot of organizations believe &lt;strong&gt;they don’t need to change&lt;/strong&gt; and prefer to stay in sad mode, they use &lt;strong&gt;bi-modal IT&lt;/strong&gt; as an excuse. Honestly, nobody really wants to work in sad mode.&lt;/p&gt;

&lt;h3 id=&quot;depression&quot;&gt;Depression&lt;/h3&gt;

&lt;p&gt;Once people actually start creating Cloud Native applications, the depression kicks in:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“We created 200 microservices and forgot to setup Jenkins”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A common mistake is &lt;strong&gt;not&lt;/strong&gt; to go for a fully automated CI/CD pipeline from the start.
This should be your first action when you start a new project. It is necessary to &lt;strong&gt;automate your path to production&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“We have an automated build pipeline but release twice a year”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When business is not on board with rapid, iterative delivery, you will never get the desired fast feedback loops.&lt;/p&gt;

&lt;h3 id=&quot;acceptance&quot;&gt;Acceptance&lt;/h3&gt;

&lt;p&gt;Finally, everyone start realizing the painful, but obvious truth:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;All software sucks&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;by which he means that creating software is not easy and will never become easy. But we can try to make it as easy as possible for ourselves.&lt;/p&gt;

&lt;p&gt;Casey also advises us to &lt;a href=&quot;https://en.wikipedia.org/wiki/CAP_theorem&quot;&gt;respect the CAP theorem&lt;/a&gt;, respect &lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_law&quot;&gt;Conway’s Law&lt;/a&gt; and &lt;strong&gt;automate everything&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Also, don’t expect to get all of these things right from the start. Taking baby steps and improving gradually over time is certainly possible. An example is to put a monolith inside a container and start breaking it up into more manageable pieces.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;amp;TLDR;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/s1p/operability.jpg&quot; alt=&quot;Casey West&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The (very pretty) slides can be found on &lt;a href=&quot;http://www.slideshare.net/Pivotal/the-five-stages-of-cloud-native&quot;&gt;Slideshare&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;ordina&quot;&gt;Ordina&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://ordina.be&quot;&gt;Ordina&lt;/a&gt; was represented at SpringOne Platform with 2 speakers and 3 talks:&lt;/p&gt;

&lt;h3 id=&quot;writing-your-own-spring-boot-starter---dieter-hubau&quot;&gt;Writing your own Spring Boot Starter - Dieter Hubau&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Turbots&quot;&gt;Dieter Hubau&lt;/a&gt; gave a very nice introduction on how to write your own &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/master/spring-boot-starters&quot;&gt;Spring Boot Starter&lt;/a&gt;. A Spring Boot Starter is the de-facto standard tool for starting with a greenfield Spring project. He started by explaining the magic behind Spring Boot Starters (and &lt;a href=&quot;http://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-auto-configuration.html&quot;&gt;@AutoConfiguration&lt;/a&gt;) and ended with a cool game of Josh Long Pokemon, deployed on Cloud Foundry.&lt;/p&gt;

&lt;p&gt;His slides are available &lt;a href=&quot;http://www.slideshare.net/SpringCentral/writing-your-own-spring-boot-starter&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;writing-comprehensive-and-guaranteed-up-to-date-rest-api-documentation---andreas-evers&quot;&gt;Writing Comprehensive and Guaranteed Up-to-date REST API Documentation - Andreas Evers&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/andreasevers&quot;&gt;Andreas Evers&lt;/a&gt; talked about &lt;a href=&quot;http://projects.spring.io/spring-restdocs/&quot;&gt;Spring REST Docs&lt;/a&gt; to generate documentation that is always up to date. To achieve this, a test-driven approach can be used: generate snippets from integration tests. Combine these snippets with manually written templates and finally generate HTML. Personally, I have always been a huge fan of “documentation-as-code” and Spring REST Docs is a great tool to achieve this goal.&lt;/p&gt;

&lt;p&gt;His slides are available &lt;a href=&quot;https://speakerdeck.com/andreasevers/writing-comprehensive-and-guaranteed-up-to-date-rest-api-documentation-springone-platform-2016&quot;&gt;here&lt;/a&gt;. This &lt;a href=&quot;https://ordina-jworks.github.io/conference/2016/06/30/SpringIO16-Spring-Rest-Docs.html&quot;&gt;blogpost&lt;/a&gt; by &lt;a href=&quot;https://ordina-jworks.github.io/author/kevin-van-houtte/&quot;&gt;Kevin Van Houtte&lt;/a&gt; provides more insight and examples on Spring REST Docs.&lt;/p&gt;

&lt;h3 id=&quot;ignite-microservices-dashboard---andreas-evers&quot;&gt;Ignite: Microservices Dashboard - Andreas Evers&lt;/h3&gt;
&lt;p&gt;On Monday evening, Andreas pitched the &lt;a href=&quot;https://github.com/ordina-jworks/microservices-dashboard&quot;&gt;Ordina Microservices Dashboard&lt;/a&gt; that was released a couple of hours earlier. The Ordina Microservices Dashboard left a big impression:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;400&quot; alt=&quot;Microservices Dashboard&quot; src=&quot;/img/s1p/msd.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Definitely worth checking out. Expect an in-depth blogpost here soon!&lt;/p&gt;

&lt;h2 id=&quot;simplifying-the-future---adrian-cockroft&quot;&gt;Simplifying the Future - Adrian Cockroft&lt;/h2&gt;

&lt;p&gt;The closing keynote at SpringOne Platform was reserved for one of the most influential people in our industry: &lt;a href=&quot;https://www.linkedin.com/in/adriancockcroft&quot;&gt;Adrian Cockcroft&lt;/a&gt;. Always at the edge of technology, Adrian often is credited with making Microservices a mature and useful architectural pattern. His talk focussed on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simplifying work&lt;/li&gt;
  &lt;li&gt;Simplify the organization&lt;/li&gt;
  &lt;li&gt;Simplify things we build&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I really recommend watching &lt;a href=&quot;https://www.youtube.com/watch?v=DGK6jjamzfY&quot;&gt;his entire presentation&lt;/a&gt; on YouTube.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/s1p/main.png&quot; alt=&quot;Main&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/s1p/panel.png&quot; alt=&quot;Panel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/s1p/adrian.png&quot; alt=&quot;Adrian&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/s1p/vegas.png&quot; alt=&quot;Vegas&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Aug 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/conferences/2016/08/09/s1p.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/conferences/2016/08/09/s1p.html</guid>
        
        <category>Security</category>
        
        <category>Spring</category>
        
        <category>CloudFoundry</category>
        
        <category>Las Vegas</category>
        
        <category>Cloud</category>
        
        <category>Pivotal</category>
        
        
        <category>Conferences</category>
        
      </item>
    
      <item>
        <title>A web of trusted commits</title>
        <description>&lt;h2 id=&quot;who-do-you-trust&quot;&gt;Who Do You Trust?&lt;/h2&gt;
&lt;p&gt;When you’re building software with people from around the world, it’s important to validate that commits and tags are coming from an identified source. By using a distributed revision control system like Git, anyone can have an offline copy of your project’s code repository. In theory having a central repository is not necessary, but it can be used to provide an “official” source from which other developers can clone from and work on. These other floating repositories may contain malicious code because, unfortunately, it is remarkably easy to fake your identity when committing code using Git.&lt;/p&gt;

&lt;p&gt;The following command allows any individual with bad intentions to commit (malicious) code under your name, meaning that you will get the blame for the backdoor or exploit “you” committed:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;  &lt;span class=&quot;c&quot;&gt;# Individual commit.
&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -a -m &lt;span class=&quot;s2&quot;&gt;&quot;a message&quot;&lt;/span&gt; --author &lt;span class=&quot;s2&quot;&gt;&quot;Sherlock H. &amp;lt;sherlock.h@bakerstreet.org&amp;gt;&quot;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# Global settings.
&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config --global user.name &lt;span class=&quot;s1&quot;&gt;'Sherlock H.'&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config --global user.email sherlock.h@bakerstreet.org
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;ensuring-trust&quot;&gt;Ensuring Trust&lt;/h2&gt;

&lt;p&gt;This blog post tells the story of Sherlock H. Sherlock is a witty developer who holds any security-related topic very close to his heart. After a fair amount of pondering about how he could solve the problem of black-hearted developers impersonating his personality, he decided to add &lt;strong&gt;a Digital Signature&lt;/strong&gt; to his commits. By adding a signature Sherlock can finally sleep soundly at night because the signature indicates that he really issued the commit and that it has not been tampered with since he sent it. Moreover it can be used to trace the origin of malicious code that has made its way into a repository. The signature also assures non-repudiation, meaning that it becomes difficult for the signer to deny having signed something because the Digital Signature is unique to both the commit and the signer, and binds them together. Sherlock can now wholeheartedly vouch for the commit.&lt;/p&gt;

&lt;p&gt;Consider the following scenario:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sherlock wants to send an urgent message to his fellow developer John W. telling that their application has been compromised by Jim M, a criminal mastermind who only has unkind intentions. John wants the guarantee that the message he received is sent by Sherlock and has not been tampered with by Jim.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In order to securely exchange messages, both Sherlock and John will make use of their &lt;strong&gt;Key Pairs&lt;/strong&gt;. A Key Pair consists of a &lt;strong&gt;Public and Private Key&lt;/strong&gt; which are two unique mathematically related cryptographic keys. As its name suggests, the Public Key is made available to everyone by handing out copies or sharing them through a publicly accessible repository. The Private Key however must be kept confidential to its respective owner.&lt;/p&gt;

&lt;p&gt;Sherlock and John can do the following with the use of their Key Pair:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Signing&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;The message is still readable to everyone.&lt;/li&gt;
      &lt;li&gt;Guarantee of the sender’s identity (aka Sherlock).&lt;/li&gt;
      &lt;li&gt;Guarantee that the message has not been tampered with since it has been signed by the sender (aka Sherlock).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Encryption&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;The message is only readable by the designated recipient (aka John).&lt;/li&gt;
      &lt;li&gt;No guarantee of the sender’s identity (aka Sherlock).&lt;/li&gt;
      &lt;li&gt;Encryption can be done &lt;strong&gt;symmetrically&lt;/strong&gt; by using a Shared Secret Key, a single key is then used for both encryption and decryption. &lt;strong&gt;Asymmetrical&lt;/strong&gt; encryption (aka Public Key encryption) with a Public/Private Keypair uses one key for encryption and another for decryption. Note that the advantages and challenges of using either encryption type is beyond the scope of this blog post.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;enforcing-trust&quot;&gt;Enforcing Trust&lt;/h2&gt;

&lt;p&gt;Sherlock will combine a digital signature with encryption to convince John that his message is trustworthy.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sherlock wants to send the following message to John: &lt;code class=&quot;highlighter-rouge&quot;&gt;Data! Data! Data! I can’t make bricks without clay.&lt;/code&gt;. He calculates the &lt;strong&gt;Hash&lt;/strong&gt; of this message by applying a publicly known hashing algorithm to the message. The calculated hash by using the SHA-256 hashing algorithm is &lt;code class=&quot;highlighter-rouge&quot;&gt;d6ba26816599a75310c4c263126d4b44979c7026f90e1db8e9b317d6658f3811&lt;/code&gt;. The hash value is unique to the hashed data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sherlock encrypts the Hash with his Private Key. This encrypted Hash together with a certificate containing additional information about the sender forms the Digital Signature. The reason why the Hash is encrypted and not the entire message, is that a hash function can convert an arbitrary input into a fixed length value which is usually much shorter than the original message. This saves time since hashing is much faster than signing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sherlock sends the original message and its Digital Signature to John.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;John receives the message and Digital Signature.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Whatever is encrypted with a Public Key can only be decrypted by using its corresponding Private Key and vice versa. Therefore John uses Sherlock’s Public Key to decrypt the Signature.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;John also re-calculates the Hash of the original message by applying the same hashing algorithm as Sherlock.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;John compares the Hash he calculated himself and the decrypted Hash received with Sherlock’s message.
If they’re identical he knows the message has not been tampered with during transit.
Should the message been compromised by Jim, then John would have calculated a different Hash than the encrypted Hash that Sherlock has sent along with his message.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; alt=&quot;Digital Signature&quot; src=&quot;/img/web-of-trusted-commits/digital_signature.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;creating-an-identity&quot;&gt;Creating An Identity&lt;/h2&gt;

&lt;p&gt;In order to sign his commits, Sherlock decided to use &lt;strong&gt;Gnu Privacy Guard (GPG)&lt;/strong&gt; as his weapon of choice. GPG is a complete and free implementation of the OpenPGP standard. It allows to encrypt and sign data and communication, features a versatile key management system as well as access modules for all kinds of public key directories.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Download and install GPG from the &lt;a href=&quot;https://www.gnupg.org/download/&quot;&gt;official website&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open a command prompt&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;      &lt;span class=&quot;c&quot;&gt;# Generate a new Key Pair.
&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gpg --gen-key
      &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Sherlock accepted the default &lt;code class=&quot;highlighter-rouge&quot;&gt;RSA and RSA&lt;/code&gt; key. RSA is a widely-used asymmetric encryption algorithm and is named after Ron Rivest, Adi Shamir and Len Adleman who invented it in 1977. Should you be interested in more mathematical details how this algorithm works, I can highly recommend watching &lt;a href=&quot;https://www.youtube.com/watch?v=wXB-V_Keiu8&quot;&gt;“Public Key Cryptography: RSA Encryption Algorithm”&lt;/a&gt; on YouTube.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enter the desired key size. I recommend the &lt;code class=&quot;highlighter-rouge&quot;&gt;maximum key size of 4096 bits&lt;/code&gt; because they provide far better long-term security. While the default of 2048 bits is secure now, it won’t be in the future. 1024 bit keys are already considered within the range of being breakable and while technology advances 2048 bit keys will also become breakable. Eventually 4096 bit keys will be broken too, but that will be so far in the future that better encryption algorithms will also likely have been developed by then.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sherlock accepted the &lt;code class=&quot;highlighter-rouge&quot;&gt;default expiration&lt;/code&gt; for his key.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;He entered his &lt;code class=&quot;highlighter-rouge&quot;&gt;real name and email address&lt;/code&gt;. Sherlock provided the verified email address for his GitHub account. This will make it very easy to link his account with his Public Key.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Provide a &lt;code class=&quot;highlighter-rouge&quot;&gt;secure passphrase&lt;/code&gt;. Choose wisely and be sure to remember it because else the key cannot be used and any data encrypted using that key will be lost.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Congratulations, a newly fresh Key Pair should be generated now.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;      &lt;span class=&quot;c&quot;&gt;# List all keys.
&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gpg --list-keys
        pub   4096R/90C3C3DE 2016-07-24
        uid     Sherlock H &amp;lt;sherlock.h@bakerstreet.org&amp;gt;
        sub   4096R/586B3A7B 2016-07-24
      &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Like many other developers, Sherlock is very active on GitHub and would like to link his Public Key with his account. He therefore will need to create a textual version of his Public Key. After having executed the command below, the content of the generated ‘pubkey.txt’ needs to be added to his account as described in the &lt;a href=&quot;https://help.github.com/articles/adding-a-new-gpg-key-to-your-github-account/&quot;&gt;GitHub Help pages&lt;/a&gt;. More details about distributing and registering your Public Key to a key server can be found in the chapter ‘&lt;a href=&quot;https://www.gnupg.org/gph/en/manual.html#AEN464&quot;&gt;Distributing keys&lt;/a&gt;’ of the GPG Users Guide. For other usages like encryption and decryption, please refer to &lt;a href=&quot;http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto.html&quot;&gt;GPG’s Mini HowTo&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;c&quot;&gt;# Export the Public Key to a text file.
&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gpg --armor --output pubkey.txt --export &lt;span class=&quot;s1&quot;&gt;'Sherlock H'&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;signing-your-work&quot;&gt;Signing Your Work&lt;/h2&gt;
&lt;p&gt;Once Sherlock generated his Key Pair, he can configure Git to use it for signing commits and tags. Following tools can be used to store a GPG key passphrase in a keychain so he doesn’t have to provide it every time he signs a commit: &lt;a href=&quot;https://gpgtools.org/&quot;&gt;GPG Suite&lt;/a&gt; (Mac) or &lt;a href=&quot;https://www.gpg4win.org/&quot;&gt;Gpg4win&lt;/a&gt; (Windows).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;  &lt;span class=&quot;c&quot;&gt;# Set the signing key by taking your Public Key id as parameter.
&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config --global user.signingkey 90C3C3DE

  &lt;span class=&quot;c&quot;&gt;# Automatically signs every commit.
&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config --global commit.gpgsign &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# Manually sign a commit.
&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -S -m &lt;span class=&quot;s2&quot;&gt;&quot;some commit message&quot;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# Verify whether your commit has been signed.
&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log --show-signature

    commit 81314da640320c65896a4348842d303a754f37d2
    gpg: Signature made Sun Jul 24 15:02:25 2016 CEST using RSA key ID 90C3C3DE
    gpg: Good signature from &lt;span class=&quot;s2&quot;&gt;&quot;Sherlock H &amp;lt;sherlock.h@bakerstreet.org&amp;gt;&quot;&lt;/span&gt;
    Author: Sherlock H &amp;lt;sherlock.h@bakerstreet.org&amp;gt;
    Date:   Sun Jul 24 15:01:52 2016 +0200

  &lt;span class=&quot;c&quot;&gt;# Verify all signatures during merge. If the signatures can not be verified then merge will be aborted.
&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge --verify-signatures other_branch
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Earlier this year GitHub &lt;a href=&quot;https://github.com/blog/2144-gpg-signature-verification&quot;&gt;announced&lt;/a&gt; that they now will show when commits and tags are signed and verified using any of the contributor’s GPG keys upload to GitHub. Keep your eyes open for commits and tags labeled with those green &lt;code class=&quot;highlighter-rouge&quot;&gt;verified&lt;/code&gt; badges.&lt;/p&gt;

&lt;h2 id=&quot;secure-by-design&quot;&gt;Secure-By-Design&lt;/h2&gt;
&lt;p&gt;Ordina’s &lt;a href=&quot;https://www.ordina.be/en/services-et-solutions/themas/secure-by-design/&quot;&gt;Secure-By-Design programme&lt;/a&gt; encourages to consider and take account of possible security risks as early as possible in a business process.
So follow Sherlock’s example by embedding and safeguarding security in your daily work as a developer and &lt;strong&gt;Sign Your Work!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/categories/gpg/&quot;&gt;GitHub’s Help on GPG&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gnupg.org/gph/en/manual/book1.html&quot;&gt;The GNU Privacy Handbook&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto.html&quot;&gt;GPG’s Mini HowTo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mikegerwitz.com/papers/git-horror-story&quot;&gt;“A Git Horror Story”&lt;/a&gt; by Mike Gerwitz&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=wXB-V_Keiu8&quot;&gt;“Public Key Cryptography: RSA Encryption Algorithm”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 25 Jul 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/security/2016/07/25/Web-of-trusted-commits.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/security/2016/07/25/Web-of-trusted-commits.html</guid>
        
        <category>Security</category>
        
        <category>Git</category>
        
        <category>Encryption</category>
        
        <category>Digital Signature</category>
        
        <category>Cryptography</category>
        
        
        <category>Security</category>
        
      </item>
    
      <item>
        <title>Spring I/O 16: Bridging the worlds of DDD &amp; REST</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.springio.net&quot;&gt;SpringIO 2016 in Barcelona&lt;/a&gt; was loaded with tons of interesting talks and workshops about Spring Cloud, Spring Boot, Spring Data, Microservices, REST &amp;amp; HATEOAS, Reactive programming, and many many more.
In this blogpost I will highlight Oliver Gierke’s 2 hour presentation about bridging the world of Domain Driven Design (DDD) and the world of Representational State Transfer (REST).&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Oliver Gierke&quot; src=&quot;/img/ddd-rest/oliver-gierke.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oliver Gierke (&lt;a href=&quot;https://twitter.com/olivergierke&quot;&gt;@olivergierke&lt;/a&gt;) is the lead of the Spring Data project at Pivotal and member of the JPA 2.1 expert group. He has been into developing enterprise applications and open source projects for over 10 years. His working focus is centered around software architecture, DDD, REST, and persistence technologies.&lt;/p&gt;

&lt;h2 id=&quot;domain-driven-design&quot;&gt;Domain Driven Design&lt;/h2&gt;
&lt;p&gt;DDD is an approach to developing software that meets core business objectives by providing on the one hand tactical modeling tools which include well founded patterns and concepts such as entities, repositories and factories. On the other hand DDD also facilitates strategic principles and methodologies for analyzing and modeling domains such as Bounded Contexts and Context Maps.&lt;/p&gt;

&lt;p&gt;For an in depth understanding of DDD I highly recommend reading &lt;a href=&quot;http://dddcommunity.org/book/evans_2003/&quot;&gt;“Domain Driven Design - Tackling Complexity in the Heart of Software”&lt;/a&gt; by Eric Evans (&lt;a href=&quot;https://twitter.com/ericevans&quot;&gt;@ericevans0&lt;/a&gt;). There’s also a &lt;a href=&quot;https://www.infoq.com/minibooks/domain-driven-design-quickly&quot;&gt;short, quick-readable summary and introduction&lt;/a&gt; to the fundamentals of DDD made available by InfoQ.&lt;/p&gt;

&lt;p&gt;Oliver’s talk at SpringIO 2016 highlighted a few basic DDD concepts like Entities, Value Objects, Repositories, Aggregates and Bounded Contexts.&lt;/p&gt;

&lt;h3 id=&quot;value-objects&quot;&gt;Value Objects&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Avoid Stringly typed code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Value Objects&lt;/strong&gt; are vital building blocks of DDD. They are small immutable objects that encapsulate value, validation and behaviour. You can use them to group related values together and provide functionality related to what they represent, making implicit concepts explicit.
Some common use cases for VOs are: EmailAddress, Money, ZIPCode, Status, … avoid writing these as just plain Strings!&lt;/p&gt;

&lt;p&gt;Writing VOs can be a cumbersome task but there are some source code generator frameworks out there like &lt;a href=&quot;https://projectlombok.org/&quot;&gt;Project Lombok&lt;/a&gt; and &lt;a href=&quot;https://github.com/google/auto&quot;&gt;Google’s AutoValue&lt;/a&gt; which can handle all the boilerplate code.&lt;/p&gt;

&lt;h3 id=&quot;entities--repositories&quot;&gt;Entities &amp;amp; Repositories&lt;/h3&gt;
&lt;p&gt;In contrast to Value Objects which are identified by the attributes they carry, &lt;strong&gt;Entities&lt;/strong&gt; are distinguished by their identity. Entity objects have a life cycle because their identity defines their responsibilities and associations. It is this unique identity and their mutability that sets Entities apart from Value Objects. This means that two Value Objects with the same properties should be considered the same whereas two Entities differ even if their properties match.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Aggregates form nice representation boundaries and become the key things to refer to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An &lt;strong&gt;Aggregate&lt;/strong&gt; is a cluster of closely related entities that can be treated as a single unit. The common parent of that cluster is called an &lt;strong&gt;Aggregate Root&lt;/strong&gt;. An example can be an Order and its Line Items, these will be separate objects but it is useful to treat the Order (the Aggregate Root) together with its Line Items as a single Aggregate.&lt;/p&gt;

&lt;p&gt;When trying to discover Aggregates, we should understand the model’s invariants. An invariant is a business rule that must always be consistent and usually refers to &lt;strong&gt;transactional consistency&lt;/strong&gt;. When a transaction commits then everything inside the Aggregate should be consistent and any subsequent access by any client should return the updated value. In most cases it is a best practice to modify only one Aggregate in a single transaction. For updating multiple aggregates &lt;strong&gt;eventual consistency&lt;/strong&gt; can be used. There will be an inconsistency window during which an access may return either the old or the new value but eventually all accesses will return the last updated value. The duration of the inconsistency window can be calculated based on factors like network delays, number of copies of the object, and the system load.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;Repository&lt;/strong&gt; is an abstraction over a persistence store for Aggregates. It acts like a collection by exposing methods to add and remove objects which encapsulate the actual interaction with the underlying data store. It also has elaborate query capabilities which return fully instantiated Aggregates whose attributes values meet the criteria.&lt;/p&gt;

&lt;h3 id=&quot;bounded-context&quot;&gt;Bounded Context&lt;/h3&gt;
&lt;p&gt;DDD aims to create software models based on the underlying domain. A &lt;strong&gt;Bounded Context&lt;/strong&gt; is the boundary that surrounds a part of a particular domain. This boundary isolates the model and language from other models and therefore helps reducing ambiguity and clarifying the meaning. When the boundaries are chosen well, greater decoupling between systems can be achieved which allows to easily change or replace the internals of a BC. Avoid having transactions across multiple BCs.&lt;/p&gt;

&lt;p&gt;The language that is structured around the domain model is called the &lt;strong&gt;Ubiquitous Language&lt;/strong&gt;. It is important that this language is used by all team members (developers, analysts, business stakeholders, …) to connect all the activities of the team with the software. The vocabulary on its own does not have any relevance, it only has meaning inside a certain context. For example, an Item has a different meaning in the Orders BC than in the Products BC.&lt;/p&gt;

&lt;h3 id=&quot;domain-events&quot;&gt;Domain Events&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;Domain Event&lt;/strong&gt; is an extremely powerful tool in DDD. It is a type of message that describes something that has happened in the past and that is of interest to the business. (e.g. OrderShipped, CustomerBecamePreferred, …). It is important to model Event names and its properties according to the Ubiquitous Language of the BC where they originated. When Events need to be delivered to interested parties in either a local BC or broadcasted across BCs eventually consistency is generally used.&lt;/p&gt;

&lt;h3 id=&quot;maturity-level&quot;&gt;Maturity Level&lt;/h3&gt;
&lt;p&gt;The maturity level of the use of Domain Events can be categorized into 4 levels:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Level 0&lt;/strong&gt;: no events at all
    &lt;ul&gt;
      &lt;li&gt;procedural code with just getters and setters&lt;/li&gt;
      &lt;li&gt;data just goes in and out&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Level 1&lt;/strong&gt;: explicit operations&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Level 2&lt;/strong&gt;: some operations as events
    &lt;ul&gt;
      &lt;li&gt;domain events are used as state transition&lt;/li&gt;
      &lt;li&gt;important domain events are exposed to interested parties via feeds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Level 3&lt;/strong&gt;: event sourcing - all changes to application state are stored as a sequence of events
    &lt;ul&gt;
      &lt;li&gt;only event logs and snapshots are kept (Event Store)&lt;/li&gt;
      &lt;li&gt;separation of read and write operations (CQRS)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rest&quot;&gt;REST&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;REST ≠ CRUD via HTTP. Representation design matters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;p&gt;Just like an Aggregate, a well designed &lt;strong&gt;Resource&lt;/strong&gt; should be identifiable, referable and should have a clear scope of consistency.&lt;/p&gt;

&lt;p&gt;Exposing the core domain model directly via RESTful HTTP can lead to brittle REST interfaces because each change in the domain model will be reflected in the interface. Decoupling the core domain from the REST interface has the advantage that we can make changes to the domain and then decide in each individual case whether a change is needed in the REST interface and how to map it.&lt;/p&gt;

&lt;p&gt;Also avoid using HTTP PATCH or PUT for (complex) state transitions of your business domain because you are missing out on a lot of information regarding the real business domain event that triggered this update. For example, changing a customer’s mailing address is a POST to a new “ChangeOfAddress” resource, not a PATCH or PUT of a “Customer” resource with a different mailing address field value.
This goes hand in hand with DDD’s concept of &lt;strong&gt;Event Sourcing&lt;/strong&gt; because those state transitions are domain relevant events, not just some changes to the state of some object.&lt;/p&gt;

&lt;h3 id=&quot;hateoas&quot;&gt;HATEOAS&lt;/h3&gt;
&lt;p&gt;A RESTful HTTP client can navigate from resource to resource in two different ways. Firstly by being redirected as a result of sending data for processing to the server, and secondly by following links contained in the response of the server. The latter technique is called &lt;strong&gt;Hypermedia as the Engine of Application State&lt;/strong&gt; or HATEOAS.&lt;/p&gt;

&lt;p&gt;The goal of Hypermedia is to serve not only data but also navigation information at the same time. This has a great impact on the client architecture because now we’re trading domain knowledge with protocol complexity. The client becomes dumber because it no longer needs to know business rules in a sense that its decisions are reduced to checking whether a link is present or not, e.g. whenever there’s a cancel link in the HTTP response, then display the Cancel button. This will make the client’s behavior more dynamic.
On the other hand, the client becomes smarter because it needs to handle a smarter and more comprehensive protocol.&lt;/p&gt;

&lt;h3 id=&quot;maturity-level-1&quot;&gt;Maturity level&lt;/h3&gt;
&lt;p&gt;In analogy to the maturity level of Aggregates described earlier, &lt;strong&gt;Leonard Richardson’s model&lt;/strong&gt; can be used to determine the maturity or our REST services.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Level 0&lt;/strong&gt;: Swamp of POX
    &lt;ul&gt;
      &lt;li&gt;the HTTP protocol is used to make RPC calls without indication of the application state&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Level 1&lt;/strong&gt;: Resources
    &lt;ul&gt;
      &lt;li&gt;exposure of multiple URIs and each one is an entry point to a specific resource, e.g. http://example.org/orders, http://example.org/order/1, http://example.org/order/2&lt;/li&gt;
      &lt;li&gt;use of only one single method like POST.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Level 2&lt;/strong&gt;: HTTP verbs
    &lt;ul&gt;
      &lt;li&gt;use of HTTP protocol properties (POST, GET, DELETE, …)&lt;/li&gt;
      &lt;li&gt;use of HTTP response codes, e.g. HTTP 200 (OK)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Level 3&lt;/strong&gt;: Hypermedia controls
    &lt;ul&gt;
      &lt;li&gt;refer to description earlier in this blog post.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;translating-domain-concepts-into-web-appropriate-ones&quot;&gt;Translating domain concepts into web appropriate ones&lt;/h3&gt;

&lt;table class=&quot;table table-striped&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;DDD&lt;/th&gt;
      &lt;th&gt;REST&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Aggregate Root / Repository&lt;/td&gt;
      &lt;td&gt;Collection / Item Resource&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Relations&lt;/td&gt;
      &lt;td&gt;Links&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;IDs&lt;/td&gt;
      &lt;td&gt;URIs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@Version&lt;/td&gt;
      &lt;td&gt;ETags&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Last Modified Property&lt;/td&gt;
      &lt;td&gt;Last Modified Header&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-implementation&quot;&gt;Sample implementation&lt;/h3&gt;
&lt;p&gt;Oliver also prepared a small sample implementation using Spring Boot, Spring Data and Lombok. The project is called &lt;a href=&quot;https://github.com/olivergierke/spring-restbucks&quot;&gt;Spring RESTBucks&lt;/a&gt; and is definitely worth checking out!&lt;/p&gt;

&lt;h2 id=&quot;resources-1&quot;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/olivergierke/domain-driven-design-and-rest-1&quot;&gt;“DDD &amp;amp; REST”&lt;/a&gt; (slide deck used at SpringIO 2016) by Oliver Gierke&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/olivergierke/spring-restbucks&quot;&gt;“Spring RESTBucks”&lt;/a&gt; (sample project used at SpringIO 2016) by Oliver Gierke&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://olivergierke.de/2016/04/benefits-of-hypermedia/&quot;&gt;“Benefits of hypermedia”&lt;/a&gt; by Oliver Gierke&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dddcommunity.org/book/evans_2003/&quot;&gt;“Domain Driven Design - Tackling Complexity in the Heart of Software”&lt;/a&gt; by Eric Evans&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dddcommunity.org/book/implementing-domain-driven-design-by-vaughn-vernon/&quot;&gt;“Implementing Domain Driven Design”&lt;/a&gt; by Vaughn Vernon&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.infoq.com/minibooks/domain-driven-design-quickly&quot;&gt;“Domain Driven Design Quickly”&lt;/a&gt; by InfoQ&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 10 Jul 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/conference/2016/07/10/SpringIO16-DDD-Rest.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/conference/2016/07/10/SpringIO16-DDD-Rest.html</guid>
        
        <category>Spring IO</category>
        
        <category>Spring</category>
        
        <category>Conference</category>
        
        
        <category>conference</category>
        
      </item>
    
      <item>
        <title>Spring I/O 16: Test-driven documentation with Spring REST Docs</title>
        <description>&lt;h2 id=&quot;spring-io-2016&quot;&gt;Spring IO 2016&lt;/h2&gt;
&lt;p&gt;The main focus this year was definitely about cloud, reactive and microservices.
But it is important not to forget other topics, like documentation! 
Keep calm, you don’t have to do it manually! 
Spring made it easy for us with Spring REST Docs! 
This year at Spring IO, Andy Wilkinson himself talked about why, how and when Spring REST Docs are being used. 
Last but not least, he talked about the new features that came out in version 1.1.
Since I implemented Spring REST Docs in a project, I’ll use examples from my experiences.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Andy Wilkinson&quot; src=&quot;/img/rest-docs/andywilkinson.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;andy-wilkinson&quot;&gt;Andy Wilkinson&lt;/h3&gt;

&lt;p&gt;Andy is a Spring Boot, REST docs committer and Spring IO platform lead at Pivotal. 
You can find him on Twitter using the handle &lt;a href=&quot;https://twitter.com/ankinson&quot;&gt;@ankinson&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
Writing documentation is critical in the world of development. 
It is used to make an accurate and straight declaration and intent of what the service has to offer. 
Frontend developers will be able to know which endpoints they have to call and receive the right data. 
Now, we all know it's tedious for developers to write documentation...
It's your lucky day! Spring REST Docs will make your life easier.
While you are writing tests, Spring will generate a fully HTML api guide for you and your team. 
This blog post will take you through the best practices, how to and new features in 1.1.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Why Test driven approach&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s an accurate definition of your application (no side effects)&lt;/li&gt;
  &lt;li&gt;It describes the specific HTTP request and response&lt;/li&gt;
  &lt;li&gt;It’s straight forward without repetition&lt;/li&gt;
  &lt;li&gt;It’s easier to write (no annotations like Swagger)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;markup-languages&quot;&gt;Markup languages&lt;/h3&gt;

&lt;h4 id=&quot;asciidoctor&quot;&gt;Asciidoctor&lt;/h4&gt;
&lt;p&gt;Asciidoctor is a markup language that processes plain text and produces HTML, completely styled to suit your needs.
If you are interested in writing in Asciidoctor be sure to check out the &lt;a href=&quot;http://asciidoctor.org/docs/user-manual/#introduction-to-asciidoctor&quot;&gt;manual&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;markdown-new-in-11&quot;&gt;Markdown (New in 1.1)&lt;/h4&gt;
&lt;p&gt;With the newest version of REST Docs, the developer now has more options in terms of markup languages.
The Markdown support is not as feature-rich as Asciidoctor, but Markdown can work very well when combined with existing documentation toolchains such as &lt;a href=&quot;https://github.com/tripit/slate&quot;&gt;Slate&lt;/a&gt;.
Here is a good &lt;a href=&quot;https://github.com/spring-projects/spring-restdocs/tree/master/samples/rest-notes-slate&quot;&gt;sample&lt;/a&gt; working with slate.&lt;/p&gt;

&lt;h4 id=&quot;andys-pick&quot;&gt;Andy’s pick&lt;/h4&gt;
&lt;p&gt;Asciidoctor!
Since Asciidoctor boasts more features than Markdown, it gives Asciidoctor the edge.&lt;/p&gt;

&lt;h3 id=&quot;test-tools&quot;&gt;Test Tools&lt;/h3&gt;
&lt;p&gt;When we want to use Spring REST Docs, we’ll have to use one of the test tools. 
Here are the different tools of choice. To use these tools we’ll have to initialise which document, &lt;code class=&quot;highlighter-rouge&quot;&gt;Mockmvc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectWriter&lt;/code&gt; we’ll be using.&lt;/p&gt;

&lt;h4 id=&quot;mockmvc&quot;&gt;MockMvc&lt;/h4&gt;
&lt;p&gt;A lightweight server-less documentation generation by the Spring Framework that has been the default use in Spring REST Docs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockMvc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

 &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{method-name}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockMvcBuilders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;webAppContextSetup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;documentationConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;restDocumentation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uris&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withScheme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;alwaysDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JwtFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;objectWriter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;authToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAuthToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TestUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAuthorities&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;restassured-new-11&quot;&gt;RestAssured (New 1.1)&lt;/h4&gt;
&lt;p&gt;As an alternative, you can use RestAssured to test and document your RESTful services. 
Available in V1.1, RestAssured will be more expandable than MockMvc.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestSpecification&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestSpecBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;documentationConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;restDocumentation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;andys-pick-1&quot;&gt;Andy’s pick&lt;/h4&gt;
&lt;p&gt;This time he didn’t favor one but he mentioned that RestAssured gives you more functionality and extends your possibilities with HTTP.&lt;/p&gt;

&lt;h3 id=&quot;snip-snip-snippets-everywhere&quot;&gt;Snip, snip, snippets everywhere!&lt;/h3&gt;

&lt;h4 id=&quot;default-snippet&quot;&gt;Default Snippet&lt;/h4&gt;
&lt;p&gt;Snippets are generated by the documented test method.
Once you run the test method, you can add these snippets in your Markdown/Asciidoctor file. 
Be aware, these type of snippet will fail if you don’t have the correct response/request syntax.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;snippets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;halLinks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkWithRel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;self&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's resource&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;linkWithRel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;employee&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's projection&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;responseFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee unique database identifier&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's first name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lastName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's last name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;linkedin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's linkedin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unit&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's unit&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_links&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;links to other resources&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/employees/1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;relaxed-snippet-new-in-11&quot;&gt;Relaxed Snippet (New in 1.1)&lt;/h4&gt;
&lt;p&gt;In contrast to default snippets, relaxed snippets don’t complain when something was neglected in the document.
This is an advantage when you only need to focus on a certain scenario or specific part of the response/request.&lt;/p&gt;

&lt;h4 id=&quot;reusable-snippet-new-in-11&quot;&gt;Reusable Snippet (New in 1.1)&lt;/h4&gt;
&lt;p&gt;With the newly introduced reusable snippet, you can define a snippet at the beginning of your test class and reuse it every time you need it. 
When added to your test method, you can extend it with extra variables.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// First we define a snippet for reuse&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinksSnippet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pagingLinks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;linkWithRel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;first&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The first page of results&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;linkWithRel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;last&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The last page of results&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;linkWithRel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;next&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The next page of results&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;linkWithRel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prev&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The previous page of results&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Then you perform the mockMvc and add the snippet to the document.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// As you can see, it is expendable.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;example&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pagingLinks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;linkWithRel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alpha&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Link to the alpha resource&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;linkWithRel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bravo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Link to the bravo resource&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;type-of-snippets&quot;&gt;Type of Snippets:&lt;/h2&gt;
&lt;p&gt;A snippet can be one of the following:&lt;/p&gt;

&lt;h3 id=&quot;hypermedia-links&quot;&gt;Hypermedia links&lt;/h3&gt;
&lt;p&gt;When documenting your hypermedia application, you’ll have to define your links and where they go to. 
If you have dynamic links that can disappear at one time, you can use relaxed snippets or optional so it won’t complain.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;snippets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;halLinks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkWithRel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;self&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's resource&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;linkWithRel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;employee&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's projection&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;responseFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee unique database identifier&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_links&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;links to other resources&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;request-fields&quot;&gt;Request fields&lt;/h3&gt;
&lt;p&gt;This defines the fields you request from the client.
Normally Spring REST Docs will complain when you neglect a field but with v1.1 we now have support for Relaxed Snippets.
Because I use constraints, I made my own method `withPath, this will add an extra column constraint to the documentation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 
 &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConstrainedFields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConstraintDescriptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constraintDescriptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;ConstrainedFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;constraintDescriptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConstraintDescriptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FieldDescriptor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;constraints&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringUtils&lt;/span&gt;
                     &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collectionToDelimitedString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;constraintDescriptions&lt;/span&gt;
                             &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;descriptionsForProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;. &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postEmployee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employeeRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUsernameIgnoreCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Nivek&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Keloggs&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeValueAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 
         &lt;span class=&quot;n&quot;&gt;ConstrainedFields&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConstrainedFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 
         &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;snippets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;requestFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                         &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee unique database identifier&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                         &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's first name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                         &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lastName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's last name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                         &lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
 
         &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/employees&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HAL_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isCreated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Location&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                        
      &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;response-fields&quot;&gt;Response fields&lt;/h3&gt;
&lt;p&gt;This defines the result after consultation of a resource.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;snippets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;responseFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee unique database identifier&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's first name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lastName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's last name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                           &lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;requestresponse-headers&quot;&gt;Request/response headers&lt;/h3&gt;
&lt;p&gt;Defines your request/response headers in your API. 
This is useful when there are extra headers to set. 
When the request has to involve an authorization header for security reasons, you can add this header to your document.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/employees/1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                				&lt;span class=&quot;n&quot;&gt;requestHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; 
                						&lt;span class=&quot;n&quot;&gt;headerWithName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                								&lt;span class=&quot;s&quot;&gt;&quot;Basic auth credentials&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt; 
                				&lt;span class=&quot;n&quot;&gt;responseHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; 
                						&lt;span class=&quot;n&quot;&gt;headerWithName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-RateLimit-Limit&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                								&lt;span class=&quot;s&quot;&gt;&quot;The total number of requests permitted per period&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                						&lt;span class=&quot;n&quot;&gt;headerWithName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-RateLimit-Remaining&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                								&lt;span class=&quot;s&quot;&gt;&quot;Remaining requests permitted in current period&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                						&lt;span class=&quot;n&quot;&gt;headerWithName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-RateLimit-Reset&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                								&lt;span class=&quot;s&quot;&gt;&quot;Time at which the rate limit period will reset&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;request-parameters&quot;&gt;Request parameters&lt;/h3&gt;
&lt;p&gt;The parameters passed by in the uri as a query string are documented with the requestParameters.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/users?page=2&amp;amp;per_page=100&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestParameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; 
			&lt;span class=&quot;n&quot;&gt;parameterWithName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The page to retrieve&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; 
			&lt;span class=&quot;n&quot;&gt;parameterWithName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;per_page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Entries per page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
	&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
	
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;request-parts-new-in-11&quot;&gt;Request parts (new in 1.1)&lt;/h3&gt;
&lt;p&gt;The parts of a multipart request can be documenting using &lt;code class=&quot;highlighter-rouge&quot;&gt;requestParts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;RestAssured&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;given&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestParts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; 
			&lt;span class=&quot;n&quot;&gt;partWithName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The file to upload&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))))&lt;/span&gt; 
	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;multiPart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;example&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/upload&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;statusCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;what-makes-good-documentation&quot;&gt;What makes good documentation?&lt;/h2&gt;

&lt;h3 id=&quot;andys-pick-2&quot;&gt;Andy’s pick&lt;/h3&gt;
&lt;p&gt;He told us that the &lt;a href=&quot;https://developer.github.com/v3/&quot;&gt;GitHub API&lt;/a&gt; is one of the most complete and correct documentation there is. 
So if you want some guidelines, inspire yourself with this API.&lt;/p&gt;

&lt;h3 id=&quot;structure-and-accuracy&quot;&gt;Structure and accuracy&lt;/h3&gt;
&lt;p&gt;When documenting your application, your accuracy has to be 100% correct and understandable. 
The structure of your API is the representation of your application, so it better be good.&lt;/p&gt;

&lt;h3 id=&quot;cross-cutting-concerns&quot;&gt;Cross-cutting concerns&lt;/h3&gt;
&lt;p&gt;Andy put forward to document cross-cutting concerns on a general documentation level, avoiding repeating yourself in every single documented API call.
Concerns who made it to the top are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rate limiting&lt;/li&gt;
  &lt;li&gt;Authentication and authorisation&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;and-http-verbscodes-patch-vs-put&quot;&gt;And HTTP verbs/codes (PATCH VS PUT)&lt;/h4&gt;
&lt;p&gt;To be RESTfull, you’ll have to follow the guidelines in having a correct API design. 
This &lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/8/88/Http-headers-status.png&quot;&gt;picture&lt;/a&gt; shows you how and when to use the correct verbs and HTTP codes&lt;/p&gt;

&lt;h3 id=&quot;main-questions-if-you-are-working-with-resources&quot;&gt;3 main questions if you are working with resources&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What do they represent?&lt;/li&gt;
  &lt;li&gt;What kind of input do they accept?&lt;/li&gt;
  &lt;li&gt;What output do they produce?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last but not least: do not document uri’s!&lt;/p&gt;

&lt;h2 id=&quot;questions&quot;&gt;Questions&lt;/h2&gt;

&lt;h3 id=&quot;will-constraints-be-officially-added-in-future-releases&quot;&gt;Will constraints be officially added in future releases?&lt;/h3&gt;
&lt;p&gt;The constraints snippets won’t be added in the future.
This is because Andy wants to give the developers the choice of what they want to implement.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Since Spring REST Docs is so effective in bringing documentation to the fun part of development I highly recommend to use this in your future Spring applications. 
Not only you will be smiling when the API guide is being generated but the Frontend developers will get a more understandable view of the backend.&lt;/p&gt;

&lt;h2 id=&quot;sources&quot;&gt;Sources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/ankinson&quot;&gt;@ankinson&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.spring.io/spring-restdocs/docs/1.0.x/reference/html5/&quot;&gt;Spring REST Docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.github.com/v3/&quot;&gt;GitHub API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/8/88/Http-headers-status.png&quot;&gt;Verbs &amp;amp; HTTP codes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://asciidoctor.org/docs/user-manual/#introduction-to-asciidoctor&quot;&gt;Asciidoctor manual&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-restdocs/tree/master/samples/rest-notes-slate&quot;&gt;Slate example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 30 Jun 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/conference/2016/06/30/SpringIO16-Spring-Rest-Docs.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/conference/2016/06/30/SpringIO16-Spring-Rest-Docs.html</guid>
        
        <category>Spring IO</category>
        
        <category>Spring</category>
        
        <category>Conference</category>
        
        
        <category>conference</category>
        
      </item>
    
      <item>
        <title>DockerCon 2016 - What is new in Docker 1.12</title>
        <description>&lt;p style=&quot;text-align: center;&quot;&gt;
&lt;img style=&quot;max-width: 500px;&quot; src=&quot;/img/dockercon/dockercon.png&quot; alt=&quot;DockerCon 2016&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;orchestration-made-easy&quot;&gt;Orchestration Made Easy&lt;/h2&gt;

&lt;p&gt;Last week,
I tried out the new orchestration tools that were &lt;a href=&quot;https://github.com/docker/swarmkit&quot;&gt;made available on GitHub&lt;/a&gt;.
My first impressions were very positive.
The setup is easy and it works like a charm.
Today,
at DockerCon 2016,
these new orchestration tools were officially announced during the opening session.
There is also an &lt;a href=&quot;https://blog.docker.com/2016/06/docker-1-12-built-in-orchestration/&quot;&gt;official blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before we start talking about orchestration,
let’s take a step back and look at how easy it has become to set up a Swarm cluster.&lt;/p&gt;

&lt;p&gt;Creating a Swarm manager can be done with one simple command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker swarm init
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can run this command on any Docker 1.12 host.&lt;/p&gt;

&lt;p&gt;After we created the Swarm manager,
we can add additional nodes to the swarm by running the following command on other Docker hosts:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker swarm join &amp;lt;IP of manager&amp;gt;:2377
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s it.
No messing around with key-value stores or certificates.
Docker will automatically configure everything you need out-of-the-box.&lt;/p&gt;

&lt;p&gt;Under the hood,
Docker uses a &lt;a href=&quot;https://raft.github.io/raft.pdf&quot;&gt;Raft&lt;/a&gt; consensus.&lt;/p&gt;

&lt;p&gt;There are two types of nodes: &lt;strong&gt;manager&lt;/strong&gt; and &lt;strong&gt;worker&lt;/strong&gt;.
The first initial node is a manager.
When adding more nodes to the Swarm,
these nodes will be worker nodes by default.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/dockercon/swarm-overview.png&quot; alt=&quot;Overview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Manager nodes are responsible for managing the cluster’s desired state.
They do health checks and schedule tasks to keep this desired state.&lt;/p&gt;

&lt;p&gt;Worker nodes are responsible for executing tasks that are scheduled by the managers.
A worker node cannot change the desired state.
It can only take work and report back on the status.&lt;/p&gt;

&lt;p&gt;The role of a node is dynamic.
We can increment or reduce the amount of managers by promoting or demoting nodes.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker node promote &amp;lt;node-id&amp;gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker node demote &amp;lt;node-id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;services&quot;&gt;Services&lt;/h2&gt;

&lt;p&gt;Docker 1.12 introduces a new &lt;code class=&quot;highlighter-rouge&quot;&gt;service&lt;/code&gt; command.
A &lt;strong&gt;service&lt;/strong&gt; is a set of tasks that can be easily replicated.
A &lt;strong&gt;task&lt;/strong&gt; represents a workload and is executed by a container.
A task does not necessarily have to be a container,
but currently that is the only option.
In the future,
tasks can also be different types of workloads,
for example Unikernels.&lt;/p&gt;

&lt;p&gt;The service command is very similar to the &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; command
and utilizes a lot of similar flags which we are used to work with.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker service create --replicate 3 --name frontend --network mynet --publish 80:80/tcp frontend_image:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above command will create a service named &lt;em&gt;frontend&lt;/em&gt;,
add it to the &lt;em&gt;mynet&lt;/em&gt; network,
publish it to port 80,
and use the &lt;em&gt;frontend_image&lt;/em&gt; for this service.&lt;/p&gt;

&lt;p&gt;This does not only create the service,
but it defines the desired state.
The cluster constantly reconciles its state.
Upon a node failure,
the cluster will automatically self heal
and converge back to the desired state by scheduling new tasks on other nodes.&lt;/p&gt;

&lt;p&gt;You can also define a &lt;strong&gt;Swarm mode&lt;/strong&gt;.
For example,
if you wish to create a service that runs on &lt;em&gt;every node&lt;/em&gt;,
you can easily do this using the &lt;em&gt;global&lt;/em&gt; mode.
This will schedule all the tasks of a service on each node.
This is great for general services like monitoring.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker service create --mode&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;global --name prometheus prom/prometheus
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Just like we can put constraints on containers,
we can put constraints on services:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker daemon --label com.example.storage&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ssd&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker service ... --constraint com.example.storage&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ssd&quot;&lt;/span&gt; ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If we want more instances of our service,
we can scale our services up and down:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker service scale &lt;span class=&quot;nv&quot;&gt;frontend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10 &lt;span class=&quot;nv&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;20
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will change the desired state of the service(s),
and the managers will schedule new tasks (or remove existing tasks) to attain this desired state.&lt;/p&gt;

&lt;p&gt;We can also apply rolling updates to our services.
For example,
if we wish to upgrade our service to a newer version without any downtime,
we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;service update&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker service update myservice --image myimage:2.0 --update-parallellism 2 --update-delay 10s
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will update our service by replacing 2 tasks at the time,
every 10 seconds.
We can also use this command to change environment variables,
ports,
etc.&lt;/p&gt;

&lt;p&gt;As you can see,
the new &lt;code class=&quot;highlighter-rouge&quot;&gt;service&lt;/code&gt; subcommand is very powerful and easy to use.&lt;/p&gt;

&lt;h2 id=&quot;bundles&quot;&gt;Bundles&lt;/h2&gt;

&lt;p&gt;A Distributed Application Bundle (DAB) file declares a stack of services,
including the versioning and how the networking is setup.
It is a deployment artifact that can be used in your continuous integration tools,
all the way from your laptop to production.&lt;/p&gt;

&lt;p&gt;Currently,
one way to generate a &lt;em&gt;.dab&lt;/em&gt; file is by creating the bundle using Docker Compose:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker-compose bundle
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This command will generate a &lt;em&gt;.dab&lt;/em&gt; or &lt;em&gt;.dsb&lt;/em&gt; file,
which is just a JSON text file.
Here’s a partial example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;services&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;db&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;constraint:type==backend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;constraint:storage==ssd&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;postgres@sha256:f76245b04ddbcebab5bb6c28e76947f49222c99fec4aadb0bb1c24821a9e83ef&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Networks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;back-tier&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This feature is still experimental in Docker 1.12
and the specification is still being updated.
Docker invites everyone to provide feedback and hopes it will become the de facto standard for deploying applications.&lt;/p&gt;

&lt;h2 id=&quot;routing-mesh-networks&quot;&gt;Routing Mesh Networks&lt;/h2&gt;

&lt;p&gt;A problem with load balancers is the fact they are not container-aware,
but host-aware.
Load balancing containers has been hard up until now,
because you have to update the configuration of the load balancers as containers are started or stopped.
This is done by overriding the configuration file of the load balancer and restarting it,
or by updating the configuration in a distributed key-value store like etcd.&lt;/p&gt;

&lt;p&gt;Docker now has built in load balancing in the Engine using a container-aware routing mesh.
This mesh network can transparantly reroute traffic from any host to a container.
For example,
publishing a service on port 80 will reserve a Swarm wide ingress port,
so that each node will listen to port 80.
Each node will then reroute traffic to the container using DNS based service discovery.&lt;/p&gt;

&lt;p&gt;This is compatible with existing infrastructure.
External load balancer no longer need to know where the containers are running.
They can just point towards any node and the routing mesh will automatically redirect traffic.
Even though this introduces an extra hop,
it is still very efficient since it uses IPVS.&lt;/p&gt;

&lt;h2 id=&quot;security-out-of-the-box&quot;&gt;Security Out Of The Box&lt;/h2&gt;

&lt;p&gt;Docker now comes with out-of-the-box, zero-configuration security.
Docker sets up automatic certificate rotation,
TLS mutual authentication
and TLS encryption between nodes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/dockercon/swarm-tls.png&quot; alt=&quot;Security&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There is no way to turn off security.&lt;/strong&gt;
One of the core principles of Docker is simplicity.
Therefor,
security must be so simple to use,
that you don’t want to turn it off!&lt;/p&gt;

&lt;h2 id=&quot;container-health-check-in-dockerfile&quot;&gt;Container Health Check in Dockerfile&lt;/h2&gt;

&lt;p&gt;A new &lt;code class=&quot;highlighter-rouge&quot;&gt;HEALTHCHECK&lt;/code&gt; keyword is available for Dockerfiles.
This keyword can be used to define the health check of a container.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HEALTHCHECK --interval=5m --timeout=3s --retries 3 CMD curl -f http://localhost || exit 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the above example,
health checking is done every 5 minutes.
A container becomes unhealthy if the &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; command fails 3 times in a row with a 3 second timeout.&lt;/p&gt;

&lt;h2 id=&quot;new-plugin-subcommands-experimental&quot;&gt;New Plugin Subcommands (experimental)&lt;/h2&gt;

&lt;p&gt;A new &lt;code class=&quot;highlighter-rouge&quot;&gt;plugin&lt;/code&gt; subcommand has been added which allows you to easily manager Docker plugins.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker plugin install &amp;lt;plugin-name&amp;gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker plugin &lt;span class=&quot;nb&quot;&gt;enable&lt;/span&gt; &amp;lt;plugin-name&amp;gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker plugin disable &amp;lt;plugin-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Plugins also have a manifest file which describes the resources it needs.
You can compare it to how a new app on your smart phone asks for access to different resources,
like your photos or contacts.&lt;/p&gt;

&lt;h2 id=&quot;try-it-out&quot;&gt;Try It Out!&lt;/h2&gt;

&lt;p&gt;As of today,
the Docker for Mac/Windows beta,
which is already at Docker 1.12,
is open for everyone!
You can download it at &lt;a href=&quot;http://docker.com/getdocker&quot;&gt;docker.com/getdocker&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/conference/2016/06/20/whats-new-in-docker-112.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/conference/2016/06/20/whats-new-in-docker-112.html</guid>
        
        <category>DockerCon</category>
        
        <category>Docker</category>
        
        <category>Conference</category>
        
        
        <category>conference</category>
        
      </item>
    
      <item>
        <title>JS Conf Budapest Day 2</title>
        <description>&lt;h2 id=&quot;from-js-conf-budapest-with-love&quot;&gt;From JS Conf Budapest with love&lt;/h2&gt;

&lt;p&gt;This year’s edition of JS Conf Budapest was hosted at &lt;a href=&quot;http://akvariumklub.hu/&quot;&gt;Akvárium Klub&lt;/a&gt;.
Located right in the center of the city, below an actual pool, filled with water!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Akvárium Klub is more than a simple bar: it is a culture center with a wide musical repertoire from mainstream to underground.
There is always a good concert and a smashing exhibition, performance, or other event happening here, in a friendly scene, situated right in the city center.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JS Conf Budapest is hosted by the one and only &lt;a href=&quot;https://twitter.com/jaffathecake&quot;&gt;Jake Archibald&lt;/a&gt; from Google.
Day 2 started at 9 o’clock.
Enough time to drink great coffee and enjoy the breakfast.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/js-conf-budapest/js-conf-budapest-2016-collage.jpg&quot; alt=&quot;JS Conf Budapest 2016 Photo Collage&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;day-2-talks&quot;&gt;Day 2: Talks&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#suz-hinton-the-formulartic-spectrum&quot;&gt;Suz Hinton: The Formulartic Spectrum&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#oliver-joseph-ash-building-an-offline-page-for-theguardiancom&quot;&gt;Oliver Joseph Ash: Building an Offline Page for theguardian.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#nicolas-bevacqua-high-performance-in-the-critical-rendering-path&quot;&gt;Nicolás Bevacqua: High Performance in the Critical Rendering Path&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#anand-vemuri-offensive-and-defensive-strategies-for-client-side-javascript&quot;&gt;Anand Vemuri: Offensive and Defensive Strategies for Client-Side JavaScript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sam-bellen-changing-live-audio-with-the-web-audio-api&quot;&gt;Sam Bellen: Changing live audio with the web-audio-api&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rob-kerr-science-in-the-browser-orchestrating-and-visualising-neural-simulations&quot;&gt;Rob Kerr: Science in the Browser: Orchestrating and Visualising Neural Simulations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stefan-baumgartner-http2-is-coming-unbundle-all-the-things&quot;&gt;Stefan Baumgartner: HTTP/2 is coming! Unbundle all the things?!?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#claudia-hernandez-down-the-rabbit-hole-js-in-wonderland&quot;&gt;Claudia Hernández: Down the Rabbit Hole: JS in Wonderland&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lena-reinhard-works-on-my-machine-or-the-problem-is-between-keyboard-and-chair&quot;&gt;Lena Reinhard: Works On My Machine, or the Problem is between Keyboard and Chair&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;day-2-morning&quot;&gt;Day 2: Morning&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Suz Hinton&quot; src=&quot;/img/js-conf-budapest/speaker-noopkat.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;suz-hinton-the-formulartic-spectrum&quot;&gt;Suz Hinton: The Formulartic Spectrum&lt;/h3&gt;

&lt;p&gt;Suz is front-developer at Kickstarter. Member of the NodeJS hardware working group. Member of the Ember-A11y Project team.&lt;/p&gt;

&lt;p&gt;You can find her on Twitter using the handle &lt;a href=&quot;https://twitter.com/noopkat&quot;&gt;@noopkat&lt;/a&gt;. She blogs on &lt;a href=&quot;&quot;&gt;meow.noopkat.com&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
The physical world is just another binary machine.
Data creation, analysis, and corruption combined with JavaScript can make new and unexpected things.
Can you programmatically extract joy from the subjectivity it exists in?
Can it be translated into intentional forms to hook others in?
This session will gently take you along on a personal journey of how you can use code to expose new expressions of the mundane secrets we hold dear.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Why are we here&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Data &amp;amp; Art&lt;/li&gt;
  &lt;li&gt;Make a mess&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Feelings&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Warning, a lot of feelings&lt;/p&gt;

&lt;h4 id=&quot;personal-history&quot;&gt;Personal history&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1994&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Commodore 64 graphics book&lt;/li&gt;
  &lt;li&gt;Wants to make art on computer&lt;/li&gt;
  &lt;li&gt;The littlest artist&lt;/li&gt;
  &lt;li&gt;Accidental programmer (Suz didn’t really want to become a programmer)&lt;/li&gt;
  &lt;li&gt;Semicolon wars;; It doesn’t matter how you place your semicolon!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This story is inspired by the movie &lt;strong&gt;Contact by Carl Sagan&lt;/strong&gt; and makes Suz wonder: what does sound look like?&lt;/p&gt;

&lt;h4 id=&quot;formulartic-spectrum-made-up-word-art&quot;&gt;Formulartic spectrum (made up word: art)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Analysing PCM data (Pulse Code Modulation -&amp;gt; raw uncompressed data)&lt;/li&gt;
  &lt;li&gt;Resulted in only 13-ish lines of code&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;audioContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;decodeAudioData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;audioData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// just get the left ear, it's fine ;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getChannelData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// convert raw sample to within 0-255 range&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// convert HSL to an RGB array&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rgb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hslToRgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// create the pixel&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;imgData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;imgData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;imgData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;imgData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// put the pixels on a canvas element&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;putImageData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imgData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Suz talked about programming and art.
She spent a lot of time on the subway and was wondering if it would be possible to use the sounds of the subway to create art.
So she started by taking &lt;a href=&quot;http://noopkat.github.io/formulartic-spectrum/#slide-41&quot;&gt;the sound of the subway doors closing&lt;/a&gt; and analysing that part.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sampling the audio to pixels resulted in 300k pixels&lt;/li&gt;
  &lt;li&gt;Make it smaller by converting to 16-beat song&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://noopkat.github.io/iltsw/index2.html&quot;&gt;Check out the visualisation!&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The top section: Stand clear of the closing doors, please.&lt;/li&gt;
  &lt;li&gt;The mid section: white noise&lt;/li&gt;
  &lt;li&gt;The bottom section: ding dong!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Suz created a visualisation of the sampled audio that resulted in cats sitting on an subway.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cats can sit on 16 seats in subway car, each seat representing a beat&lt;/li&gt;
  &lt;li&gt;In total there were 308.728 samples which divided by 16 beats result in 19.295 samples per beat. Suz took the average of the sample values of each ‘beat’&lt;/li&gt;
  &lt;li&gt;The seats have different colors that represent the drum beat and oscillator note&lt;/li&gt;
  &lt;li&gt;When a cat is sitting on a chair, we get a guitar strum and note&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The subway example is made using:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SVG images&lt;/li&gt;
  &lt;li&gt;divs&lt;/li&gt;
  &lt;li&gt;CSS animations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://noopkat.github.io/iltsw/index5.html&quot;&gt;Check out the working example!&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;but-im-better-at-hardware&quot;&gt;But I’m better at hardware&lt;/h4&gt;

&lt;p&gt;So Suz created a &lt;a href=&quot;https://noopkat.github.io/formulartic-spectrum/#slide-64&quot;&gt;subway card with built in speaker&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id=&quot;recap&quot;&gt;Recap&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Creative coding gets you out of your comfort zone and teaches you to use tools you use everyday in another context&lt;/li&gt;
  &lt;li&gt;Art doesn’t care about your semicolons
    &lt;ul&gt;
      &lt;li&gt;Code can be messy&lt;/li&gt;
      &lt;li&gt;No one cares about semicolons, etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Art doesn’t care about perfection
    &lt;ul&gt;
      &lt;li&gt;Again, your code doesn’t really matter&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Art is about what you learned&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write messy code&lt;/li&gt;
  &lt;li&gt;Make lots of mistakes&lt;/li&gt;
  &lt;li&gt;You deserve a break from being judged&lt;/li&gt;
  &lt;li&gt;Code like no one’s watching&lt;/li&gt;
  &lt;li&gt;Don’t ‘git rebase -i’
    &lt;ul&gt;
      &lt;li&gt;Show the history behind good code&lt;/li&gt;
      &lt;li&gt;Code evolves from a first idea to a final solution.&lt;/li&gt;
      &lt;li&gt;At first, code might not be perfect&lt;/li&gt;
      &lt;li&gt;Don’t rebase to hide this fact&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://noopkat.github.io/formulartic-spectrum&quot;&gt;View the slides of Suz’s talk here!&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Oliver Joseph Ash&quot; src=&quot;/img/js-conf-budapest/speaker-oliverjash.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;oliver-joseph-ash-building-an-offline-page-for-theguardiancom&quot;&gt;Oliver Joseph Ash: Building an Offline Page for theguardian.com&lt;/h3&gt;

&lt;p&gt;Oliver is a software engineer working on the team behind theguardian.com.
Being passionate about the open web, he aims to work on software that exploits the decentralised nature of the web to solve non-trivial, critical problems.
With a strong background in arts as well as engineering, he approaches web development in its entirety: UX, performance, and functional programming are some of the things he enjoys most.&lt;/p&gt;

&lt;p&gt;You can find him on Twitter using the handle &lt;a href=&quot;https://twitter.com/OliverJAsh&quot;&gt;@OliverJAsh&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
You’re on a train to work and you open up the Guardian app on your phone.
A tunnel surrounds you, but the app still works in very much the same way as it usually would, despite your lack of internet connection, you still get the full experience, only the content shown will be stale.
If you tried the same for the Guardian website, however, it wouldn’t load at all.
Native apps have long had the tools to deal with these situations, in order to deliver rich user experiences whatever the user’s situation may be.
With service workers, the web is catching up.
This talk will explain how Oliver used service workers to build an offline page for theguardian.com.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Oliver talked about the functionality they created with service workers on The Guardian.
When offline on The Guardian, you’ll get a crossword puzzle (always the most recent) that you can play.
We summarized the key parts of the talk for you.&lt;/p&gt;

&lt;h4 id=&quot;website-vs-native&quot;&gt;Website vs native&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Native&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Content is cached&lt;/li&gt;
  &lt;li&gt;Experience:
    &lt;ul&gt;
      &lt;li&gt;offline: stale content remains&lt;/li&gt;
      &lt;li&gt;server down: stale content remains&lt;/li&gt;
      &lt;li&gt;poor connection: stale while revalidate&lt;/li&gt;
      &lt;li&gt;good connection: stale while revalidate&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Website&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Experience
    &lt;ul&gt;
      &lt;li&gt;offline: nothing&lt;/li&gt;
      &lt;li&gt;server down: nothing&lt;/li&gt;
      &lt;li&gt;poor connection: white screen of death&lt;/li&gt;
      &lt;li&gt;good connection: new content&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;how-it-works&quot;&gt;How it works&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Service workers&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Prototype built in &amp;lt; 1 day&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What is a service worker?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A script that runs in the background&lt;/li&gt;
  &lt;li&gt;Useful for features that don’t need user interaction, e.g.:
    &lt;ul&gt;
      &lt;li&gt;Listen to push events, useful for pushing notifications&lt;/li&gt;
      &lt;li&gt;Intercept and handle network requests&lt;/li&gt;
      &lt;li&gt;Future
        &lt;ul&gt;
          &lt;li&gt;Background sync&lt;/li&gt;
          &lt;li&gt;Alarms (e.g. reminders)&lt;/li&gt;
          &lt;li&gt;Geofencing&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A progressive enhancement&lt;/li&gt;
  &lt;li&gt;Trusted origins only (HTTPS only or localhost)&lt;/li&gt;
  &lt;li&gt;Chrome, Opera and Firefox stable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For now The Guardian is not yet fully on HTTPS, but they are switching at this time of writing.&lt;/p&gt;

&lt;p&gt;Some pages have service workers already enabled such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.theguardian.com/info&quot;&gt;theguardian.com/info&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.theguardian.com/science&quot;&gt;theguardian.com/science&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.theguardian.com/technology&quot;&gt;theguardian.com/technology&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.theguardian.com/business&quot;&gt;theguardian.com/business&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;how-did-they-do-it&quot;&gt;How did they do it?&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1. Create and register the service worker&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/service-worker.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can debug service workers in Chrome by selecting Service Workers under the Resources tab.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Prime the cache&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;install event: get ready!&lt;/li&gt;
  &lt;li&gt;Cache the assets needed later&lt;/li&gt;
  &lt;li&gt;Version the cache. To check if a user has an old version so you can update with newer versions&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;staticCacheName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'static'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updateCache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;caches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;staticCacheName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;'/offline-page'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;'/assets/css/main.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;'/assets/js/main.js'&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'install'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitUntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;updateCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;3. Handle requests with fetch&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fetch events
    &lt;ul&gt;
      &lt;li&gt;Default: just fetch&lt;/li&gt;
      &lt;li&gt;Override default&lt;/li&gt;
      &lt;li&gt;Intercept network requests to:
        &lt;ul&gt;
          &lt;li&gt;Fetch from the network&lt;/li&gt;
          &lt;li&gt;Read from the cache&lt;/li&gt;
          &lt;li&gt;Construct your own response&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fetch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is possible to use custom responses when using Service Workers. E.g. Use templating to construct a HTML respose from JSON.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fetch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responseBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responseOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'text/html'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;responseBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;responseOptions&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;(Im)mutable&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mutable (HTML)
    &lt;ul&gt;
      &lt;li&gt;Network first, then cache&lt;/li&gt;
      &lt;li&gt;Page -&amp;gt; service worker -&amp;gt; server or cache -&amp;gt; Page&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Immutable (assets: CSS, JS)
    &lt;ul&gt;
      &lt;li&gt;Cache first, then network&lt;/li&gt;
      &lt;li&gt;Page -&amp;gt; service worker -&amp;gt; cache or server -&amp;gt; Page&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4. Updating the crossword&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Check if the cache has been updated and if it’s not up to date, update it and delete old cache.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;isCacheUpdated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isUpdated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isUpdated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;updateCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deleteOldCaches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;offline-first&quot;&gt;Offline-first&lt;/h4&gt;

&lt;p&gt;Why should we be building with offline first?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Instantly respond with a “shell” of the page straight from cache when navigating a website&lt;/li&gt;
  &lt;li&gt;It improves the experience for users with poor connections&lt;/li&gt;
  &lt;li&gt;No more white screen of death&lt;/li&gt;
  &lt;li&gt;Show stale content whilst fetching new content&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;problems-and-caveats&quot;&gt;Problems and caveats&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Browser bugs in both Chrome and Firefox&lt;/li&gt;
  &lt;li&gt;Interleaving of versions in CDN cache&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This can be fixed with a cache manifest.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/offline-page.json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;!-- v1 --&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;assets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/v1.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;why-is-this-valuable&quot;&gt;Why? Is this valuable&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Fun&lt;/li&gt;
  &lt;li&gt;Insignificant usage due to HTTPS/browser support
    &lt;ul&gt;
      &lt;li&gt;… but plant the seed and see what happens&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Iron out browser bugs, pushes the web forward&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;“If we only use features that work in IE8, we’re condemning ourselves to live in an IE8 world.” — Nolan Lawson&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Service workers allow us to progressively enhance the experience for
    &lt;ul&gt;
      &lt;li&gt;Offline users&lt;/li&gt;
      &lt;li&gt;Users with poor connections&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;It’s easy to build an offline page&lt;/li&gt;
  &lt;li&gt;A simple offline page is a good place to start&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/oliverjash/building-an-offline-page-for-theguardian-dot-com-jsconf-budapest-may-2016&quot;&gt;The slides of Oliver’s talk can be viewed on Speaker Deck&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Nicolás Bevacqua&quot; src=&quot;/img/js-conf-budapest/speaker-nzgb.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;nicolas-bevacqua-high-performance-in-the-critical-rendering-path&quot;&gt;Nicolás Bevacqua: High Performance in the Critical Rendering Path&lt;/h3&gt;

&lt;p&gt;Nicolás loves the web. He is a consultant, a conference speaker, the author of JavaScript Application Design, an opinionated blogger, and an open-source evangelist.
He participates actively in the online JavaScript community — as well as offline in beautiful Buenos Aires.&lt;/p&gt;

&lt;p&gt;You can find him on Twitter using the handle &lt;a href=&quot;https://twitter.com/nzgb&quot;&gt;@nzgb&lt;/a&gt; and on the web under the name &lt;a href=&quot;https://ponyfoo.com/&quot;&gt;ponyfoo.com&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
This talk covers the past, present and future of web application performance when it comes to delivery optimization.
I'll start by glancing over what you're already doing -- minifying your static assets, bundling them together, and using progressive enhancement techniques.
Then I'll move on to what you should be doing -- optimizing TCP network delivery, inlining critical CSS, deferring font loading and CSS so that you don't block the rendering path, and of course deferring JavaScript.
Afterwards we'll look at the future, and what HTTP 2.0 has in store for us, going full circle and letting us forego hacks of the past like bundling and minification.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id=&quot;getting-started&quot;&gt;Getting started&lt;/h4&gt;

&lt;p&gt;Measure what is going on and see what is going on!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use the Chrome DevTools Audits.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Per-resource advice&lt;/li&gt;
  &lt;li&gt;Caching best practices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;PageSpeed Insights (Google)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/&quot;&gt;developers.google.com/speed/pagespeed/insights/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Insights for mobile&lt;/li&gt;
  &lt;li&gt;Insights for desktop&lt;/li&gt;
  &lt;li&gt;Get a rough 1-100 score&lt;/li&gt;
  &lt;li&gt;Best practices&lt;/li&gt;
  &lt;li&gt;Practical advice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;WebPageTest (webpagetest.org)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.webpagetest.org/&quot;&gt;webpagetest.org&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gives analytics and metrics where you can act on&lt;/li&gt;
  &lt;li&gt;A lot of statistics&lt;/li&gt;
  &lt;li&gt;PageSpeed Score&lt;/li&gt;
  &lt;li&gt;Waterfall View: figure out how to parallelize your download to speed up loading&lt;/li&gt;
  &lt;li&gt;Makes it easy to spot FOIT&lt;/li&gt;
  &lt;li&gt;Calculates SpeedIndex: SpeedIndex takes the visual progress of the visible page loading and computes an overall score for how quickly the content painted&lt;/li&gt;
  &lt;li&gt;Inspect every request&lt;/li&gt;
  &lt;li&gt;Analyze TCP traffic&lt;/li&gt;
  &lt;li&gt;Identify bottlenecks&lt;/li&gt;
  &lt;li&gt;Visualize progress&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;automate&quot;&gt;Automate!&lt;/h4&gt;

&lt;p&gt;But we can automate a lot!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Measure early. Measure often.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;PageSpeed Insights is available as npm module.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;npm install psi -g&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Webpagetest is also available as npm module but is a bit slower.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;npm install webpagetest-api underscore-cli&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;YSlow is available for different platforms.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;npm install grunt-yslow --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;budgets&quot;&gt;Budgets&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Enforce a performance budget&lt;/li&gt;
  &lt;li&gt;Track impact of every commit&lt;/li&gt;
  &lt;li&gt;What should I track? More info about this on &lt;a href=&quot;https://timkadlec.com/2014/11/performance-budget-metrics&quot;&gt;timkadlec.com/2014/11/performance-budget-metrics&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Milestone Timings: Load time, time to interact, “time to first tweet”&lt;/li&gt;
      &lt;li&gt;SpeedIndex: Average time at which parts of a page are displayed&lt;/li&gt;
      &lt;li&gt;Quantity based metrics: Request count, page weight, image weight …&lt;/li&gt;
      &lt;li&gt;Rule based metrics: YSlow grade, PageSpeed score, etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Budgeting can also be automated using the grunt-perfbudget plugin.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;npm install grunt-perfbudget --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;what-can-we-do-beyond-minification&quot;&gt;What can we do beyond minification?&lt;/h4&gt;

&lt;p&gt;Minification is usually the first thing developers think of when talking about optimizing your code for speed.
But what are the things we can do beyond minification?&lt;/p&gt;

&lt;p&gt;A lot of best practices on optimizing performance in your app are described in the &lt;a href=&quot;http://www.amazon.com/High-Performance-Browser-Networking-performance/dp/1449344763&quot;&gt;High Performance Browser Networking&lt;/a&gt; book written by Ilya Grigorik.&lt;/p&gt;

&lt;p&gt;For all the detailed tips and tricks we suggest to &lt;a href=&quot;https://ponyfoo.com/presentations/high-performance-in-the-critical-path&quot;&gt;view the slides for Nicolás’s talk on ponyfoo.com&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Anand Vemuri&quot; src=&quot;/img/js-conf-budapest/speaker-brownhat57.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;anand-vemuri-offensive-and-defensive-strategies-for-client-side-javascript&quot;&gt;Anand Vemuri: Offensive and Defensive Strategies for Client-Side JavaScript&lt;/h3&gt;

&lt;p&gt;Anand is Senior Application Security Consultant at nVisium&lt;/p&gt;

&lt;p&gt;You can find him on Twitter using the handle &lt;a href=&quot;https://twitter.com/brownhat57&quot;&gt;@brownhat57&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
This talk will specifically focus on the other less common client-side vulnerabilities that are not as frequently discussed.
Intentionally vulnerable applications developed with client-side JavaScript frameworks will be attacked and exploited live.
Remediation strategies will also be discussed so that developers have tools to prevent these vulnerabilities.
Through strengthening the security posture of JavaScript applications, we can take strides towards creating a more secure Internet.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id=&quot;break-the-web-together&quot;&gt;Break the web together!&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;They say the best offense is good defense.
No. The best offense is offense.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;hands-on-vulnerability-exploitation-of-medcellar&quot;&gt;Hands-on vulnerability exploitation of medcellar&lt;/h4&gt;

&lt;p&gt;Anand’s talk started by explaining the most common web application vulnerabilities that currently exist.
We’re talking about SQL Injection, Cross Site Scripting (XSS) and Cross Site Request Forgery (CSRF).
During the talk, Anand used an open source application that contains all of these vulnerabilities and which is available for you as a developer to fool around with.
The application is called ‘MedCellar’ and you can find it on &lt;a href=&quot;https://github.com/relotnek/medcellar&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;xss--csrf&quot;&gt;XSS &amp;amp; CSRF&lt;/h4&gt;

&lt;p&gt;We saw how to perform XSS attacks and CSRF attacks on the MedCellar Application.
These attacks weren’t extremely harmful at first but showed just how they could be exploited.&lt;/p&gt;

&lt;p&gt;Using the Burp Suite’s proxy, we were able to inspect all requests/responses the application was performing to get more insights in how the app actually worked.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://portswigger.net/burp/&quot;&gt;Burp Suite&lt;/a&gt; is an integrated platform for performing security testing of web applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;XSS&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;attacks users&lt;/li&gt;
  &lt;li&gt;JS Injection&lt;/li&gt;
  &lt;li&gt;Exploits can be bad, really bad&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;XSS is a serious vulnerability. It may not seem so for some people or clients but it really is!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How do we exploit apps where users have direct control&lt;/li&gt;
  &lt;li&gt;How do we attack web apps on a private network&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;CSRF Attacks!!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“Session Riding”&lt;/li&gt;
  &lt;li&gt;Attacker sends malicious URL to submit a form to a third party domain&lt;/li&gt;
  &lt;li&gt;Victim is tricked into interacting with the malicious link and performs undesirable actions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using a third party domain you can create a form (you won 1 million dollars) to perform an action like this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BeEF&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;During the talk, Anand demonstrated how to perform XSS and CSRF attacks.
However, it seemed like you were only able to hack yourself.&lt;/p&gt;

&lt;p&gt;Things got serious though, when Anand demonstrated how you could exploit these vulnerabilities way more by using a special Linux distro called Kali Linux and BeEF (Browser Exploitation Framework).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.kali.org/&quot;&gt;Kali Linux&lt;/a&gt; is a linux distro designed specifically for Penetration Testing and Ethical Hacking.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://beefproject.com/&quot;&gt;BeEF&lt;/a&gt; is a Penetration Testing tool that focusses on the browser and possible vulnerabilities in it and the applications running in it.&lt;/p&gt;

&lt;p&gt;Combining these two, Anand was able to do basically anything in the users browser and he demonstrated this by running some random audio in the users browser.
Playing audio isn’t that harmful, but you could have installed a keyLogger instead and start tracking anything the user types on his computer.
That seems to be a little bit worse than playing some audio!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When you enter a coffee shop and see someone using this, disconnect from the internet and run away as fast as you possibly can.” - Quote from Anand&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;mitigate-against-these-attacks&quot;&gt;Mitigate against these attacks&lt;/h4&gt;

&lt;p&gt;Implementation of a CSRF mitigation is Tough!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Method Interchange&lt;/li&gt;
  &lt;li&gt;Beware of CSRF Token replay&lt;/li&gt;
  &lt;li&gt;Token must be tied to the user’s session on the server&lt;/li&gt;
  &lt;li&gt;CSRF Token exposed as GET Param: Could potentially have logs or some other network traffic see the CSRF token and intercept it that way.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But, luckily for us, CSRF middleware which implements these mitigations has already been developed for us! You can find these libraries on github:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/koajs/csrf&quot;&gt;koajs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hapijs/crumb&quot;&gt;crumb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/expressjs/csurf&quot;&gt;csurf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;key-takeaways&quot;&gt;Key takeaways&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;App Sec vulnerabilities can be used in combination&lt;/li&gt;
  &lt;li&gt;No state changing operations should be GET requests&lt;/li&gt;
  &lt;li&gt;Make sure the CSRF token is cryptographically secure
    &lt;ul&gt;
      &lt;li&gt;Random !== Cryptographically secure&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CSRF Middleware Saves Lives!!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oh… And&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cross Origin Resource sharing (CORS)
    &lt;ul&gt;
      &lt;li&gt;Access-control-Allow-Origin: * IS BAD!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;day-2-afternoon&quot;&gt;Day 2: afternoon&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Sam Bellen&quot; src=&quot;/img/js-conf-budapest/speaker-sambego.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;sam-bellen-changing-live-audio-with-the-web-audio-api&quot;&gt;Sam Bellen: Changing live audio with the web-audio-api&lt;/h3&gt;

&lt;p&gt;Sam is developer at Made with love.&lt;/p&gt;

&lt;p&gt;You can find him on Twitter using the handle &lt;a href=&quot;https://twitter.com/sambego&quot;&gt;@sambego&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
As a guitar player, I usually use some effects pedals to change the sound of my guitar.
I started wondering: “What if, it would be possible to recreate these pedals using the web-audio-api?”.
Well, it turns out, it is entirely possible to do so.
This talk takes you through the basics of the web-audio-api and explains some of the audio-nodes I’ve used to change the live sound of my guitar.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Presentation can be found here: https://github.com/Sambego/pedalboard-presentation&lt;/p&gt;

&lt;h4 id=&quot;get-the-sound-in-the-browser&quot;&gt;Get the sound in the browser&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Create new audio context.&lt;/li&gt;
  &lt;li&gt;Get the audio input of your computer: navigator.getUserMedia()&lt;/li&gt;
  &lt;li&gt;Create inputNode from the media stream we just fetched&lt;/li&gt;
  &lt;li&gt;Connect the inputNode to the audiocontext.destination&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;add-effects-to-the-sound&quot;&gt;Add effects to the sound&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Volume pedal&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a gainNode = audioContext.createGain();&lt;/li&gt;
  &lt;li&gt;Value of gain is 0 tot 1&lt;/li&gt;
  &lt;li&gt;So for now we have input -&amp;gt; gain -&amp;gt; output.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Distortion pedal&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make the audio sound rough.&lt;/li&gt;
  &lt;li&gt;Create a waveShaperNode = audioContext.createWaveShaper();&lt;/li&gt;
  &lt;li&gt;Set a value&lt;/li&gt;
  &lt;li&gt;So for now we have input -&amp;gt; Waveshaper -&amp;gt; output.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Delay pedal&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;delayNode = audioContext.createDelay();&lt;/li&gt;
  &lt;li&gt;Set a value delayNode.delayTime.value = 1 (1 second)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Reverb pedal&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Some kind of echo on your sound&lt;/li&gt;
  &lt;li&gt;convolverNode = audioContext.createConvolver()&lt;/li&gt;
  &lt;li&gt;Load impulse-response-file and do some crazy stuff&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;How to create an oscilator&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;oscilatorNode = audioContext.createOscilator()&lt;/li&gt;
  &lt;li&gt;Set Hz value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;web-midi-api&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Request access and start doing things with it&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Rob Kerr&quot; src=&quot;/img/js-conf-budapest/speaker-robrkerr.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rob-kerr-science-in-the-browser-orchestrating-and-visualising-neural-simulations&quot;&gt;Rob Kerr: Science in the Browser: Orchestrating and Visualising Neural Simulations&lt;/h3&gt;

&lt;p&gt;Rob works at IBM Research Australia.&lt;/p&gt;

&lt;p&gt;You can find him on Twitter using the handle &lt;a href=&quot;https://twitter.com/robrkerr&quot;&gt;@robrkerr&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
My talk will show how the old-school, computationally-heavy software used in science can be set free using the centralized power of cloud resources and the ubiquity of the browser.
We'll see real-time, publicly-broadcast, simulations of the electrical activity in brain cells, visualised in 3D using Javascript.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id=&quot;neuroscience-introduction&quot;&gt;Neuroscience introduction&lt;/h4&gt;

&lt;p&gt;The topic for this talk was quite some heavy material.
However, Rob managed to give us a quick, super high-level, introduction to neuroscience and more specifically an introduction to how neurons actually work.&lt;/p&gt;

&lt;p&gt;Very High level, there are 3 parts in a neuron:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dendrites&lt;/li&gt;
  &lt;li&gt;Neuron body (Soma)&lt;/li&gt;
  &lt;li&gt;Axons.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Neurons receive electrical signals through their dendrites, and transmit those to the neuron body, called the Soma.
From the neuron body, new electrical signals travel to other neurons.
Sending electrical current from one neuron to another is being done through its axons.
So the axons actually send electrical signals to other neurons and those other neurons receive these signals trough their dendrites.&lt;/p&gt;

&lt;p&gt;A better, more thorough explanation of neurons is being described on &lt;a href=&quot;https://en.wikipedia.org/wiki/Neuron&quot;&gt;Wikipedia&lt;/a&gt;, but we needed a super simplified explanation of neurons and their main components to further explain what Rob showed us.&lt;/p&gt;

&lt;h4 id=&quot;science-in-the-browser&quot;&gt;Science in the browser&lt;/h4&gt;

&lt;p&gt;Neurons and their main components can be ‘encoded’ in special files .swc files.
These files contain multiple records with an ID, X, Y, Z, Radius and Parent-link.
Using all the records and their properties allows you to visually represent the neurons.&lt;/p&gt;

&lt;p&gt;There’s already an online repository containing these encoded neurons which you can find &lt;a href=&quot;http://www.neuromorpho.org/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, what does all of this have to do with the browser or JS or anything you would expect at JSConf?
Well, while he was working on his Ph.D. thesis, he started playing around with JS and its related technologies.
And he continued to do so since then, all in function of the neuroscience domain.&lt;/p&gt;

&lt;p&gt;As we saw earlier, there’s already a webpage where you can upload swc files with neuron data to visually represent these, but these are rather static images.
Instead, Rob decided to create a platform which can also simulate the behaviour of such a neuron when you trigger it with electrical current on its dendrites.&lt;/p&gt;

&lt;h4 id=&quot;technology-stack&quot;&gt;Technology stack&lt;/h4&gt;

&lt;p&gt;Rob used a combination of tools and technologies to build the platform.
Together with his colleagues at IBM research Australia, they built an entire Cloud platform that could perform these complex simulations.&lt;/p&gt;

&lt;p&gt;On their IBM Bluemix cloud they run Docker Containers running the algorithm that performs the neuron simulations.
The algorithm is written in C and is based on mathematic formula which is shown in the below image.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hodgkin-Huxley Model of the Squid Giant Axon&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Hodgkin-Huxley Model of the Squid Giant Axon&quot; src=&quot;/img/js-conf-budapest/Hodgkin-Huxley_equation.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The web application used to render the neurons used a combination of tools, most importantly:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Webgl: Web Graphics API. Javascript API for rendering interactive 3D graphics.&lt;/li&gt;
  &lt;li&gt;three.js: A Javascript 3D library that uses WebGL.&lt;/li&gt;
  &lt;li&gt;D3.js: Javascript library for visualizing data using HTML, SVG and CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-tool-in-action&quot;&gt;The tool in action&lt;/h4&gt;

&lt;p&gt;In the below video you can see what the tool looks and animations look like:&lt;/p&gt;

&lt;div class=&quot;responsive-embed-youtube&quot;&gt;
	&lt;iframe src=&quot;https://www.youtube.com/embed/z_7c6JjicGE?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;The tool enables researchers to replay a scenario where a certain spike is triggered in a branch of the neuron.
This gives scientists a lot of knowledge and insights about how neurons behave.&lt;/p&gt;

&lt;p&gt;Rob gave a really entertaining talk with some really cool visuals of neurons in action.
He introduced us to just the right amount of neuroscience to be able to follow what he was actually doing and showing!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Stefan Baumgartner&quot; src=&quot;/img/js-conf-budapest/speaker-ddprrt.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;stefan-baumgartner-http2-is-coming-unbundle-all-the-things&quot;&gt;Stefan Baumgartner: HTTP/2 is coming! Unbundle all the things?!?&lt;/h3&gt;

&lt;p&gt;Stefan is a web developer/web lover based in Linz, Austria.
Currently working at Ruxit, making the web a faster place.
He is also a co-host at the German Workingdraft podcast.&lt;/p&gt;

&lt;p&gt;You can find him on Twitter using the handle &lt;a href=&quot;https://twitter.com/ddprrt&quot;&gt;@ddprrt&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
In this session, we will explore the major features of the new HTTP version and its implications for todays JavaScript developers.
We will critically analyze recommendations for deployment strategies and find out which impact they have on our current applications, as well as on the applications to come.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id=&quot;unbundle-all-the-things&quot;&gt;Unbundle all the things?&lt;/h4&gt;

&lt;p&gt;Everybody is saying to not bundle things, minify things, concatenate things, … when moving to HTTP/2.&lt;/p&gt;

&lt;p&gt;Tools like Browserify, Webpack, etc. would all become obsolete.
But why? We need to question this and see if this is actually the truth.&lt;/p&gt;

&lt;h4 id=&quot;the-best-request-is-a-request-not-being-made&quot;&gt;The best request is a request not being made&lt;/h4&gt;

&lt;p&gt;In HTTP version 1.1 we need to do as few requests possible. Pages like Giphy have 40 TCP connection at a single time!&lt;/p&gt;

&lt;p&gt;HTTP/2 was made to prevent the bad parts of HTTP/1.1&lt;/p&gt;

&lt;p&gt;HTTP/2 allows a connection to stay open and transfer multiple things over the same connection.
No need for handshakes for each file that needs to be transferred from the server to the client.&lt;/p&gt;

&lt;h4 id=&quot;rule-of-thumb&quot;&gt;Rule of thumb&lt;/h4&gt;

&lt;p&gt;A slow website on HTTP/1.1 will still be a slow website on HTTP/2.
You need to perform optimisations no matter what.&lt;/p&gt;

&lt;p&gt;Most important part: &lt;strong&gt;do not block the render path&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Only serve what you really need.
Again, &lt;strong&gt;the best request is a request not being made&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;so-unbundle-all-the-things&quot;&gt;So, unbundle all the things?&lt;/h4&gt;

&lt;p&gt;So in some way, yes unbundle all the things.
Because you don’t want to transfer bytes you don’t need, but there is something more to it.
This article about packaging will get you on the way: &lt;a href=&quot;http://engineering.khanacademy.org/posts/js-packaging-http2.htm&quot;&gt;engineering.khanacademy.org/posts/js-packaging-http2.htm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Create a lot of modules to update as flexible as possible and as small as possible.
When using ES6 we can also use Treeshaking.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create independent, exchangeable components&lt;/li&gt;
  &lt;li&gt;Create small, detachable bundles&lt;/li&gt;
  &lt;li&gt;Think about long-lasting applications and frequently of change&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use tools, not rules!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Claudia Hernández&quot; src=&quot;/img/js-conf-budapest/speaker-koste4.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;claudia-hernandez-down-the-rabbit-hole-js-in-wonderland&quot;&gt;Claudia Hernández: Down the Rabbit Hole: JS in Wonderland&lt;/h3&gt;

&lt;p&gt;Claudia is Mexican front-end developer.&lt;/p&gt;

&lt;p&gt;You can find her on Twitter using the handle &lt;a href=&quot;https://twitter.com/koste4&quot;&gt;@koste4&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
What even makes sense in Javascript?

For a language originally created in 10 days it surely has a lot of quirks and perks many JS developers are unaware of.
Sometimes, it might even seem like we fell down the rabbit hole only to find that NaN is actually a Number, undefined can be defined, +!![] equals 1, Array.sort() may not work as you suspected and so much other nonsense that can trip any JS developer’s mind.

This talk is a collection of Javascript’s oddities and unexpected behaviors that hopefully will prevent some future headaches and help understand the language that we all love in a more deeper and meaningful way.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This talk by Claudia was so much fun! We didn’t write down anything because it was virtually impossible to do. You need to see this with your own eyes!&lt;/p&gt;

&lt;p&gt;You can view the slides on &lt;a href=&quot;https://speakerdeck.com/claudiahdz/down-the-rabbit-hole-javascript-in-wonderland&quot;&gt;Speaker Deck&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Be sure to check out &lt;a href=&quot;http://www.jsfuck.com/&quot;&gt;jsfuck.com&lt;/a&gt; for some fun times and &lt;a href=&quot;https://github.com/fasttime/jquery-screwed&quot;&gt;jQuery Screwed&lt;/a&gt; to get an idea of what you can actually do with JavaScript quirks.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Lena Reinhard&quot; src=&quot;/img/js-conf-budapest/speaker-lrnrd.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;lena-reinhard-works-on-my-machine-or-the-problem-is-between-keyboard-and-chair&quot;&gt;Lena Reinhard: Works On My Machine, or the Problem is between Keyboard and Chair&lt;/h3&gt;

&lt;p&gt;Lena is teamleader, consultant and photographer.&lt;/p&gt;

&lt;p&gt;You can find her on Twitter using the handle &lt;a href=&quot;https://twitter.com/lrnrd&quot;&gt;@lrnrd&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
In this talk we will look at the many facets that affect our decision making and interactions, and work out how we can change for the better.
Together, we will take a look at the effects that our software has on the daily lives of the thousands of people who are using it.
You’ll learn what you can do as an individual to support change into a positive direction, and how you can help debug this system and make a difference in the tech industry.
You’ll leave knowing about practical things you can do in your daily life to make the tech industry a better, more inclusive and diverse environment that is a better place for everyone.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id=&quot;code-debugging&quot;&gt;Code debugging&lt;/h4&gt;

&lt;p&gt;Debugging can be hard and it becomes harder when working with complex software.&lt;/p&gt;

&lt;p&gt;Spaghetti code is difficult to read and maintain.
It can be code that is not organised, has lots of dependencies and is difficult to debug.&lt;/p&gt;

&lt;h4 id=&quot;the-tech-industry-is-bugged&quot;&gt;The Tech Industry is bugged&lt;/h4&gt;

&lt;p&gt;A lot of people already contributed to the tech industry.
It has grown very fast and has many flaws.&lt;/p&gt;

&lt;p&gt;That’s why we need to have a look at it and try to fix the defects.&lt;/p&gt;

&lt;h4 id=&quot;understanding-ourselves&quot;&gt;Understanding ourselves&lt;/h4&gt;

&lt;p&gt;To be able to fix this we need to understand ourselves. Our flaws, limitations, …&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We are privileged and need to understand that.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Privilege: The human version of “works on my machine”.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Privilege is sitting in your comfy home and not knowing a big thunderstorm is coming that could harm people.&lt;/p&gt;

&lt;p&gt;Privilege is being able to stand up when attending a standup and not having to sit because you are disabled.&lt;/p&gt;

&lt;h4 id=&quot;we-are-biased&quot;&gt;We are biased&lt;/h4&gt;

&lt;p&gt;We need to understand we are biased.
More often we are being objective and often that is not OK.&lt;/p&gt;

&lt;p&gt;We all have biases and we need to realise and understand.&lt;/p&gt;

&lt;h4 id=&quot;empathy&quot;&gt;Empathy&lt;/h4&gt;

&lt;p&gt;We need to understand that we need to be empathetic.
Empathy is the right direction.&lt;/p&gt;

&lt;h4 id=&quot;creativity&quot;&gt;Creativity&lt;/h4&gt;

&lt;p&gt;Creativity is necessary to design and build good software.&lt;/p&gt;

&lt;h4 id=&quot;diversity&quot;&gt;Diversity&lt;/h4&gt;

&lt;p&gt;And so is diversity and understanding each other.&lt;/p&gt;

&lt;h4 id=&quot;inclusion&quot;&gt;Inclusion&lt;/h4&gt;

&lt;p&gt;Inclusion means all people in the group are respected for who they are.
The lack of inclusion and diversity is a real problem in our industry.&lt;/p&gt;

&lt;h4 id=&quot;the-tech-industry&quot;&gt;The Tech Industry&lt;/h4&gt;

&lt;p&gt;Let’s look at some key points within our industry.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Company&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lack of diversity&lt;/li&gt;
  &lt;li&gt;Lack of inclusion&lt;/li&gt;
  &lt;li&gt;Harassment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Society&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Racism&lt;/li&gt;
  &lt;li&gt;Patriarchy&lt;/li&gt;
  &lt;li&gt;Capitalism&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tech industry&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lack of diversity&lt;/li&gt;
  &lt;li&gt;Lack of inclusion&lt;/li&gt;
  &lt;li&gt;Harassment&lt;/li&gt;
  &lt;li&gt;Racism&lt;/li&gt;
  &lt;li&gt;Patriarchy&lt;/li&gt;
  &lt;li&gt;Capitalism&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;software-can-help-people&quot;&gt;Software can help people&lt;/h4&gt;

&lt;p&gt;Our software can help people. A screenreader, accessibility, …&lt;/p&gt;

&lt;h4 id=&quot;but-can-also-ruin-lives&quot;&gt;But can also ruin lives&lt;/h4&gt;

&lt;p&gt;Our software is racist.
Our software (tools like Siri or Cortana or Snapchat) does not correctly recognise skin color, alters skin color and does not recognise harassment or racism.
Animations in software can trigger panic attacks or epileptic attacks.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We have a collective responsibility and need to take that very seriously.
Technology and our code is not neutral. Our work is political and has consequences on lives.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;debugging-the-system&quot;&gt;Debugging the system&lt;/h4&gt;

&lt;p&gt;Change starts with you, starts with all of us.
What can we do to debug the system?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Educate yourself&lt;/strong&gt;, about systemic issues and oppression&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Practice empathy&lt;/strong&gt;, because we need it to be good designers and developers&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Work on Humility&lt;/strong&gt;, because none of us are Unicorns&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Understanding Privileges&lt;/strong&gt;, and use them for good&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Address biases&lt;/strong&gt;, and establish policies to address them&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Listen&lt;/strong&gt;, and actively look for voices outside of your networks&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Amplify others’ voices&lt;/strong&gt;, and speak less&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Work on diversity&lt;/strong&gt;, because it’s our moral obligation&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Work on inclusion&lt;/strong&gt;, to make spaces welcoming and safe&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Give&lt;/strong&gt;, our knowledge, time, technical skills, money&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Work on being allies&lt;/strong&gt;, constantly&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Quite a talk on some serious matter to close the second day of JS Conf Budapest.&lt;/p&gt;

&lt;p&gt;Have you experienced these things yourself in the tech industry?&lt;/p&gt;

&lt;p&gt;Have you contributed to debugging the tech industry?&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;day-2-conclusion&quot;&gt;Day 2: Conclusion&lt;/h2&gt;

&lt;p&gt;Just like day 1, day 2 was one hell of a nice day packed full of great speakers and a superb atmosphere!&lt;/p&gt;

&lt;p&gt;The talks by &lt;a href=&quot;#rob-kerr-science-in-the-browser-orchestrating-and-visualising-neural-simulations&quot;&gt;Rob Kerr&lt;/a&gt; and the one of &lt;a href=&quot;#lena-reinhard-works-on-my-machine-or-the-problem-is-between-keyboard-and-chair&quot;&gt;Lena Reinhart&lt;/a&gt; surely got the most attention.
Rob’s talk because it was impressive to see what they achieved over a course of 2 years to visualise neurons in the browser.
Lena’s talk because we got slammed in the face about how faulty the tech industry is at the moment.&lt;/p&gt;

&lt;p&gt;This year’s edition was, just like the one we attended last year a very good one!
It is nice to see such a diverse community that cares about technology and people.
This is something we should be very proud of.&lt;/p&gt;

&lt;p&gt;A big thank you to the organisers and volunteers to make JS Conf Budapest what it is!&lt;/p&gt;

&lt;h3 id=&quot;find-us-on-the-family-photo&quot;&gt;Find us on the family photo!&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/js-conf-budapest/js-conf-budapest-2016-family-photo.jpg&quot; alt=&quot;JS Conf Budapest 2016 Family Photo&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;next-year&quot;&gt;Next year&lt;/h3&gt;

&lt;p&gt;In 2017, JS Conf Budapest will be held on the 14th and 15th of September.&lt;/p&gt;

&lt;p&gt;We will surely be present for what will be another great edition! See you next year!&lt;/p&gt;

&lt;h3 id=&quot;js-conf-budapest-2016-day-1&quot;&gt;JS Conf Budapest 2016, day 1&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/conference/2016/05/12/JS-Conf-Budapest-day-1.html&quot;&gt;Read our full report on day 1 of JS Conf Budapest here!&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 13 May 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/conference/2016/05/13/JS-Conf-Budapest-day-2.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/conference/2016/05/13/JS-Conf-Budapest-day-2.html</guid>
        
        <category>JS Conf Budapest</category>
        
        <category>JavaScript</category>
        
        <category>Conference</category>
        
        
        <category>conference</category>
        
      </item>
    
  </channel>
</rss>
