<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ordina JWorks Tech Blog</title>
    <description>Ordina JWorks Tech blog
</description>
    <link>https://ordina-jworks.github.io/</link>
    <atom:link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 17 Mar 2016 19:59:10 +0000</pubDate>
    <lastBuildDate>Thu, 17 Mar 2016 19:59:10 +0000</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>AngularTS: A new look @ Angular</title>
        <description>&lt;h2 id=&quot;combining-the-best-of-two-worlds&quot;&gt;Combining the best of two worlds.&lt;/h2&gt;

&lt;p&gt;Since my introduction to the heroic AngularJS framework at Devoxx around 4 years ago.
I was intrigued and set for an adventure.
With the upcoming release of Angular 2 we have to prepare ourselves with the migrating road map coming up.
One of the core changes in Angular was changing the code language to TypeScript.
This blog will cover the use of Angular components in TypeScript.
But what is this TypeScript? 
TypeScript is a superset of JavaScript that focuses on strong typing and the new ES6 features: classes, interfaces and modules.
Like in common Object-oriented languages such as Java and C# these features aren’t new.
These features gives the developer the opportunity to build a object oriented architecture in JavaScript.
With that in mind, let’s see what the advantages are:&lt;/p&gt;

&lt;h3 id=&quot;transpiling&quot;&gt;Transpiling&lt;/h3&gt;
&lt;p&gt;The DOM on your website can only recognize JavaScript.
With this said they had to come up with a way to compile TS.
Because TS is a superset of JS it can transpile to plain JavaScript before including it into HTML.
Transpilers are integrated in the latest IDE’s. 
Any valid JavaScript is valid TypeScript.&lt;/p&gt;

&lt;h3 id=&quot;strongly-typed&quot;&gt;Strongly typed&lt;/h3&gt;
&lt;p&gt;When you are used to plain JavaScript, you notice that every time you need a variable, your type is loosely typed.
With TypeScript they give you the opportunity to give every variable its own type.
This comes with great beneficials like better refactoring, less bugs and better type checking at compile time.&lt;/p&gt;

&lt;h3 id=&quot;oo-architecture&quot;&gt;OO architecture&lt;/h3&gt;
&lt;p&gt;TypeScript offers an Object-oriented architecture experience, which means all code is defined in classes, interfaces and most of those classes can be instantiated into objects. It also supports encapsulation, which protects the data from unintended access and modification.&lt;/p&gt;

&lt;h2 id=&quot;learning-path-of-angularts&quot;&gt;Learning path of AngularTS&lt;/h2&gt;
&lt;p&gt;If you’re no stranger to AngularJS you will notice that the structure remains the same. 
Two way data binding, controllers, services, … 
But be aware that it has a different syntax in TypeScript. 
I will show you the different best practices to implement these components.&lt;/p&gt;

&lt;h2 id=&quot;typescript-definition-files&quot;&gt;TypeScript Definition Files&lt;/h2&gt;
&lt;p&gt;When using TS we have to reference to TSD files.
These files describe the types defined in external libraries such as Angular. 
To install the Angular TSD files we use typings.
To use the typings manager we install it with:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;npm install typings --global&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Afterwards install Angular with:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;typings install Angular --ambient --save&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--ambient --save&lt;/code&gt; enables the flag and persists the selection in ‘typings.json’&lt;/p&gt;

&lt;p&gt;All the installed TSD files are gathered in the typings folder.
In the main.d.ts file you will see the references the application will use for Angular.
Since Angular has multiple libraries, you can use the search command to find the proper definition you need.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;typings search Angular&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is possible that you have to declare the referencing on the top of your file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/// &amp;lt;reference path=&quot;../../typings/main.d.ts&quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;modules&quot;&gt;Modules&lt;/h2&gt;

&lt;h3 id=&quot;angular-modules&quot;&gt;Angular Modules&lt;/h3&gt;
&lt;p&gt;Modules are here to help us modularize our code.
But it is important to know that if you’re not planning to make third libraries or use separated common code.
It is a best practice to use only one main module as the root of your application. 
To let the module know of the existence of every component, they have to register themselves.
Below every component declaration you will see a registration to the module. 
When registering the module you have to add all the libraries you want to depend upon.
In this example we inject the routing service for navigation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JWorks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;use strict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jworks360&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ngRoute&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;internal-typescript-modules&quot;&gt;Internal TypeScript Modules&lt;/h3&gt;
&lt;p&gt;These modules are similar to namespaces.
You can define an unique namespace around your code.
This will encapsulate variables, interfaces and classes. 
TypeScript supports sub namespaces for further encapsulation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JWorks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;use strict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;transpiled-javascript&quot;&gt;Transpiled JavaScript&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JWorks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JWorks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JWorks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JWorks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To encapsulate our code, the module will transpile to an IIFE (Immediately-Invoked Function Expression) around our components.
This will avoid global code which helps prevent variables and function declarations from living longer than expected in the global scope, which also helps avoid variable collisions.&lt;/p&gt;

&lt;h2 id=&quot;entity-class&quot;&gt;Entity Class&lt;/h2&gt;
&lt;p&gt;Now that TypeScript supports Object-oriented programming, we can analyse our business problem and define the business objects into entity classes.
When you analyse and define these entities you can define which properties and methods each entity needs.
If you have a couple entities, you can even establish a relationship.
This will provide a clear view on what you want to achieve and have the possibility to create multiple instances of these classes. 
When building an entity class you can optionally define an interface to show what the intention of the class is.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JWorks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IEmployee&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nl&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;nx&quot;&gt;eat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;food&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IEmployee&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 
          &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){}&lt;/span&gt;

          &lt;span class=&quot;nx&quot;&gt;eat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;food&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;c1&quot;&gt;//implementation&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To use your entity class in a controller you have to define the export key.
This will expose the class to other classes.
When exporting the interface you will use it as a data type.&lt;/p&gt;

&lt;h3 id=&quot;class-as-property&quot;&gt;Class as property&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IEmployee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;instance-of-the-class&quot;&gt;Instance of the class&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;access-property&quot;&gt;Access property&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;call-methods&quot;&gt;Call methods&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eggs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;controllers&quot;&gt;Controllers&lt;/h2&gt;
&lt;p&gt;As you know the controller defines the model to the view of your application, methods for every action your require and the scope where you hold a two way binding.
Because TS offers an object oriented architecture, we can use classes and interfaces instead of functions.
Interfaces are as in OO languages a contract you make and implementable by classes.
When implemented, all methods and properties have to be used in the class.
Classes declare and implement the properties and methods exposed to the view.
Every class has his own constructor function, in this function we can declare default property values and other initialisation code.&lt;/p&gt;

&lt;h3 id=&quot;controller-interface&quot;&gt;Controller Interface&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Jworks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IEmployeeController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IPerson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IPerson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The interface will show you the intent of our controller and declare the properties and methods that will be used.
When you look at the syntax, you see that the properties are strong typed and the type is declared after the colon.
If you aren’t aware of the type of a property, you can fall back to the general type ‘any’.
For the methods declared in the interface you have to specify the necessary parameters and the return type.
The parameters have the same syntax as the properties declared.&lt;/p&gt;

&lt;h3 id=&quot;controller-class&quot;&gt;Controller Class&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JWorks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EmployeeController&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IEmployeeController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$inject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EmployeeService&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employeeService&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IEmployeeService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IEmployee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Nivek&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Kevin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;employeeService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEmployee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
             &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;added successfully!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jworks360&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EmployeeController&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EmployeeController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;dependency-injection-in-classes&quot;&gt;Dependency Injection in classes&lt;/h3&gt;
&lt;p&gt;When a service is needed in your controller, it needs to be injected in order to use it.
In the above example it is important you declare the &lt;code class=&quot;highlighter-rouge&quot;&gt;static $injection&lt;/code&gt; above your constructor.
The reason behind this is that in your constructor you will initialise the injected services.
By doing this the constructor will recognize the injection. 
If you inject a custom service you have to reference to the related service.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/// &amp;lt;reference path=&quot;../services/employee.service.ts&quot;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;constructor&quot;&gt;Constructor&lt;/h3&gt;
&lt;p&gt;TypeScript supports initialisation of your properties and injections in a constructor.
When declaring properties in your class, you can declare them directly into your constructor.
Although &lt;em&gt;these two examples are&lt;/em&gt; correct you can have issues in your tests with the second example.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//So this:&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Becomes:&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Be sure to notify that we are using access modifiers to tell the controller which properties we want to expose to the view.
The best practice is that you put your injections and Angular services private and all your properties you want to use on your view public.
When initialising strings, TypeScript makes no distinction between double or single quotes.&lt;/p&gt;

&lt;h3 id=&quot;controlleras&quot;&gt;ControllerAs&lt;/h3&gt;

&lt;p&gt;Controller classes use the controllerAs feature as default.
So it’s important to know to declare this into your routes and view.
In your HTML you will have to prefix your methods and properties with the ControllerAs property.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JWorks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&quot;use strict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$routeProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

       &lt;span class=&quot;nx&quot;&gt;$routeProvider&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;na&quot;&gt;redirectTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/login&#39;&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/profile&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;na&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;app/persons/profile.html&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;na&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;EmployeeController&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;na&quot;&gt;controllerAs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;$profile&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;otherwise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
               &lt;span class=&quot;na&quot;&gt;redirectTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/&#39;&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$inject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$routeProvider&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

   &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jworks360&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;services&quot;&gt;Services&lt;/h2&gt;
&lt;p&gt;When you make a custom service, the code you implement is reusable and can be called in any other Angular components including controllers and other services.
It is important to know that services are singletons, so there will be only one instance of the used service.
With this in mind we can use the custom service to share data across all components in Angular for example communicating with an HTTP service to collect data and share it with any other component by injecting the service.&lt;/p&gt;

&lt;h3 id=&quot;restangular&quot;&gt;RestAngular&lt;/h3&gt;
&lt;p&gt;For my project I used an Angular service that simplifies common verb requests with a minimum of client code.
In my custom services you will see examples of restAngular in TypeScript.
If you like to checkout what the difference is with $resource, you can check this &lt;a href=&quot;https://github.com/mgonto/restAngular#differences-with-resource&quot;&gt;list&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JWorks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IEmployeeService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;nl&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;nl&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IEmployee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

       &lt;span class=&quot;nx&quot;&gt;getEmployee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;setEmployee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IEmployee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;getEmployeeByUsername&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IPromise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;getEmployeeByLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IPromise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EmployeeService&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IEmployeeService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

       &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$inject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EmployeeRestangular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$location&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

       &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employeeRestService&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;restAngular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$location&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ILocationService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;restAngular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IEmployee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sessionStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;employees&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employeeRestService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;employees&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                   &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setEmployee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;getEmployee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
       
       &lt;span class=&quot;nx&quot;&gt;setEmployee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IEmployee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
             
       &lt;span class=&quot;nx&quot;&gt;getEmployeeByUsername&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IPromise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 
           &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

       &lt;span class=&quot;nx&quot;&gt;getEmployeeByLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IPromise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oneUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;       
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jworks360&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EmployeeService&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EmployeeService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the above example, to use the Restangular service you have to install the proper typings.
For services it is a best practice to declare an interface for data typing and getting a clear view of the intent.
The service class will implement all methods related to the data communication with the backend and returns a promise to the controllers or services that will inject this custom service.
Restangular has its own configuration you can modify in the .config component to point to the right api call.
After the config you can inject the Restangular service and use its services to build up a request to the backend.&lt;/p&gt;

&lt;h2 id=&quot;directives&quot;&gt;Directives&lt;/h2&gt;
&lt;p&gt;Custom directives allow you to create highly semantic and reusable components.
A directive allows Angular to manipulate the DOM and add it’s own behaviours. 
These can be either a set of instructions or a JSON representation.
To define a directive in TypeScript we use the directive service &lt;strong&gt;that Angular&lt;/strong&gt; provides.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JWorks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IAnimate&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IAttributes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;nl&quot;&gt;jwAnimate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animate&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IDirective&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

       &lt;span class=&quot;nx&quot;&gt;restrict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

       &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IDirective&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

       &lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elm&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IRootElementService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IAnimate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ngModel&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;INgModelController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

           &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
               &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;+=150&#39;&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;elm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fadeOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;slow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
           &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;direction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;jwAnimate&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
           &lt;span class=&quot;nx&quot;&gt;elm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jworks360&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jwAnimate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the interface above we have to tell Angular what name we will use for our directive.
The attribute service will be called to add the name to its attributes.
Secondly the class has to implement the directive interface to be recognized by the compiler as a directive.
Inside the class you have to declare the prefixed properties and override the methods you will be using.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;static instance()&lt;/code&gt; method has to be declared to let your module know that there is a new directive.
At the end you register the directive to your module with the instance as value.&lt;/p&gt;

&lt;h2 id=&quot;final-note&quot;&gt;Final note&lt;/h2&gt;

&lt;p&gt;Best practices can change over time. 
With webpack for example the registry to the module is gathered in one file.
TypeScript keeps on growing and, in my opinion &lt;strong&gt;will be the default language for many future front-end projects.&lt;/strong&gt;
When it comes to testing our code, TypeScript will provide better support because of encapsulation. 
Finally, this is a nice learning path to take if you want to migrate to Angular 2.&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Mar 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/angularjs-typescript/2016/03/16/AngularTS.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/angularjs-typescript/2016/03/16/AngularTS.html</guid>
        
        <category>TypeScript</category>
        
        <category>AngularJS</category>
        
        
        <category>AngularJS-TypeScript</category>
        
      </item>
    
      <item>
        <title>Digitally signing your JSON documents</title>
        <description>&lt;h2 id=&quot;what-is-a-digital-signature&quot;&gt;What is a digital signature?&lt;/h2&gt;

&lt;p&gt;A digital signature is a mathematical scheme for demonstrating the authenticity of a digital message or documents.
A valid digital signature gives a recipient reason to believe that the message was created by a known sender, that the sender cannot deny having sent the message (&lt;strong&gt;authentication&lt;/strong&gt; and &lt;strong&gt;non-repudiation&lt;/strong&gt;), and that the message was not altered in transit (&lt;strong&gt;integrity&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Digital signatures are a standard element of most cryptographic protocol suites.
They are commonly used for software distribution, financial transactions, and in other cases where it is important to detect forgery or tampering.&lt;/p&gt;

&lt;p&gt;Non-repudiation refers to a state of affairs where the author of a statement will not be able to successfully challenge the authorship of the statement or validity of an associated contract.
The term is often seen in a legal setting wherein the authenticity of a signature is being challenged.
In such an instance, the authenticity is being “repudiated”.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;meet-jose&quot;&gt;Meet JOSE&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.iana.org/assignments/jose/jose.xhtml&quot;&gt;JOSE&lt;/a&gt; is a framework intended to provide a method to securely transfer claims (such as authorisation information) between parties.
The JOSE framework consists of several specifications to serve this purpose:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#jwk&quot;&gt;JWK&lt;/a&gt; – JSON Web Key, describes format and handling of cryptographic keys in JOSE&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jws&quot;&gt;JWS&lt;/a&gt; – JSON Web Signature, describes producing and handling signed messages&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jwe&quot;&gt;JWE&lt;/a&gt; – JSON Web Encryption, describes producing and handling encrypted messages&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jwa&quot;&gt;JWA&lt;/a&gt; – JSON Web Algorithms, describes cryptographic algorithms used in JOSE&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jwt&quot;&gt;JWT&lt;/a&gt; – JSON Web Token, describes representation of claims encoded in JSON and protected by JWS or JWE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;jwk&quot;&gt;JWK&lt;/h2&gt;

&lt;p&gt;A JSON Web Key (&lt;a href=&quot;https://tools.ietf.org/html/rfc7517&quot;&gt;RFC7517&lt;/a&gt;) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;kty&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;crv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;P-256&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;use&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sig&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;kid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Public key used to sign our messages&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this example you can see a couple of parameters.
The first of them “kty” defines the key type, which is a mandatory field.
Depending on the type you’ve chosen other parameters can be set, like you see above.
As our type is EC, or Elliptic Curve, we want to specify the type of curve and our point.
Next to these parameters we also have the optional “use” to denote intended usage of the key and “kid” as key ID.
At the time of writing there are three supported key types: “EC”, “RSA” and “oct”.
While “EC” and “RSA” are used for asymmetric encryption, “oct” is used for symmetric encryption&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;jws&quot;&gt;JWS&lt;/h2&gt;

&lt;p&gt;The JSON Web Signature (&lt;a href=&quot;https://tools.ietf.org/html/rfc7515&quot;&gt;RFC7515&lt;/a&gt;) standard describes the process of creation and validation of a data structure representing a signed payload.
Assume someone wants to transfer an amount of money to his savings account.
This action could be represented like the following JSON:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;from&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tim Ysewyn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;account&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Checking account&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tim Ysewyn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;account&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Savings account&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;amount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;currency&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EUR&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this example we are using a JSON document, but this is not relevant for the signing procedure.
Before we can sign this we need to convert this to base64url encoding, which will be our payload.
So actually we might be using any type of data!
The result of the base64url encoding of above transaction is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;eyAKICAgICAgICAiZnJvbSI6ewogICAgICAgICAgICAibmFtZSI6ICJUaW0gWXNld3luIiwKICAgICAgICAgICAgImFjY291bnQiOiAiQ2hlY2tpbmcgYWNjb3VudCIKICAgICAgICB9LAogICAgICAgICJ0byI6ewogICAgICAgICAgICAibmFtZSI6ICJUaW0gWXNld3luIiwKICAgICAgICAgICAgImFjY291bnQiOiAiU2F2aW5ncyBhY2NvdW50IgogICAgICAgIH0sCiAgICAgICAgImFtb3VudCI6IDI1MAogICAgICAgICJjdXJyZW5jeSI6ICJFVVIiCiAgICB9&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Additional parameters are associated with each payload.
One of those is the required “alg” parameter, which indicates what algorithm needs to be used to generate a signature.
Here we can also specify “none” to send unprotected messages.
All parameters are included in the final JWS.
These can either be sent as a protected or unprotected header.
The data in the unprotected header is human readable associated data, whereas data in the protected header is integrity protected and base64url encoded.
Assume we want to sign our payload using a key like we generated in the previous section.
Our data structure would look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;alg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ES256&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and base64url encoded this would be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;eyAKICAgICAgICAiYWxnIjogIlJTMjU2IgogICAgfQ==&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The base64url encoded payload and protected header are concatenated with a ‘.’ to form raw data, which is fed to the signature algorithm to produce the final signature.
Finally all of this output will be serialized using one the JSON or Compact serialisations.
Compact serialisation is simple concatenation of dot separated base64url encoded protected header, payload and signature.
JSON serialisation is a human readable JSON object, which for the example in this section would look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;payload&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eyAKICAgICAgICAiZnJvbSI6ewogICAgICAgICAgICAibmFtZSI6ICJUaW0gWXNld3luIiwKICAgICAgICAgICAgImFjY291bnQiOiAiQ2hlY2tpbmcgYWNjb3VudCIKICAgICAgICB9LAogICAgICAgICJ0byI6ewogICAgICAgICAgICAibmFtZSI6ICJUaW0gWXNld3luIiwKICAgICAgICAgICAgImFjY291bnQiOiAiU2F2aW5ncyBhY2NvdW50IgogICAgICAgIH0sCiAgICAgICAgImFtb3VudCI6IDI1MAogICAgICAgICJjdXJyZW5jeSI6ICJFVVIiCiAgICB9&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;protected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eyAKICAgICAgICAiYWxnIjogIlJTMjU2IgogICAgfQ==&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;signature&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;DtEhU3ljbEg8L38VWAfUAqOyKAM6-Xx-F4GawxaepmXFCgfTjDxw5djxLa8ISlSApmWQxfKTUJqPP3-Kg6NU01Q&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Before we conclude this section, there is one more thing I would like to share with you.
Because we want to sign and protect our messages, we always want to use asymmetric encryption.
But, once our private key has been captured, anyone who has this can forge transactions.
One way that &lt;strong&gt;COULD&lt;/strong&gt; counter this is to generate a new key pair every session, or even per transaction.
Including the public key in the &lt;strong&gt;protected&lt;/strong&gt; header would not only give the server the ability the validate the signature, we will also be sure that it is the correct one since the protected header is integrity protected!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;jwe&quot;&gt;JWE&lt;/h2&gt;

&lt;p&gt;JSON Web Encryption (&lt;a href=&quot;https://tools.ietf.org/html/rfc7516&quot;&gt;RFC7516&lt;/a&gt;) follows the same logic as JWS with a few differences:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;by default, for each message a new content encryption key (CEK) should be generated.
This key is used to encrypt the plaintext and is attached to the final message.
Public key of recipient or a shared key is used only to encrypt the CEK (unless direct encryption is used).&lt;/li&gt;
  &lt;li&gt;only AEAD (Authenticated Encryption with Associated Data) algorithms are defined in the standard, so users do not have to think about how to combine JWE with JWS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To keep it short: While JWS can be read by everyone because of the simple base64url encoding, we could use JWE to encrypt some or all of our fields.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;jwa&quot;&gt;JWA&lt;/h2&gt;

&lt;p&gt;JSON Web Algorithms (&lt;a href=&quot;https://tools.ietf.org/html/rfc7518&quot;&gt;RFC7518&lt;/a&gt;) defines algorithms and their identifiers to be used in JWS and JWE.
The three parameters that specify algorithms are “alg” for JWS, “alg” and “enc” for JWE.
Visit following links to view the list of supported algorithms for &lt;a href=&quot;https://tools.ietf.org/html/rfc7518#section-3&quot;&gt;JWS&lt;/a&gt; and &lt;a href=&quot;https://tools.ietf.org/html/rfc7518#section-5&quot;&gt;JWE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;jwt&quot;&gt;JWT&lt;/h2&gt;

&lt;p&gt;JSON Web Token (&lt;a href=&quot;https://tools.ietf.org/html/rfc7519&quot;&gt;RFC7519&lt;/a&gt;) is used for passing claims between parties in a web application environment.
Because the tokens are designed to be compact and URL-safe they are especially usable in a web browser &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_sign-on&quot;&gt;single sign-on&lt;/a&gt; (SSO) context.
JWT claims can be typically used to pass the identity of authenticated users between an &lt;a href=&quot;https://en.wikipedia.org/wiki/Identity_provider&quot;&gt;identity provider&lt;/a&gt; and a &lt;a href=&quot;https://en.wikipedia.org/wiki/Service_provider&quot;&gt;service provider&lt;/a&gt;.
JWT relies on all previously mentioned JSON standards.&lt;/p&gt;

&lt;p&gt;The JWT standard defines claims - key/value pairs asserting information about a subject.
The claims include&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“iss” identifies the principal that issued the token&lt;/li&gt;
  &lt;li&gt;“sub” identifies the principal that is the subject of the token&lt;/li&gt;
  &lt;li&gt;“aud” (audience) identifies the intended recipients&lt;/li&gt;
  &lt;li&gt;“exp” identifies the expiration time on or after which the token &lt;strong&gt;MUST NOT&lt;/strong&gt; be accepted for processing&lt;/li&gt;
  &lt;li&gt;“nbf” (not before) identifies the time before which the token &lt;strong&gt;MUST NOT&lt;/strong&gt; be accepted for processing&lt;/li&gt;
  &lt;li&gt;“iat” (issued at) identifies the time at which the token was issued&lt;/li&gt;
  &lt;li&gt;“jti” (JWT ID) provides a unique identifier for the token&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These claims are not mandatory to be used or implement in all cases, but they rather provide a starting point for a set of useful, interoperable claims.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;so-how-do-we-sign-this-json-document-in-code&quot;&gt;So, how do we sign this JSON document in code?&lt;/h2&gt;

&lt;p&gt;Ranging from Java and .NET to Node.js, there are already a lot of libraries available on the &lt;a href=&quot;https://jwt.io/#libraries-io&quot;&gt;internet&lt;/a&gt;.
And even JavaScript has its own implementation of the standard!&lt;/p&gt;

&lt;p&gt;Because of its fluent API, we are using the Java JWT implementation in this post.
Since not all algorithms are implemented in Java, we are also going to use Bouncy Castle as our &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_Cryptography_Architecture&quot;&gt;JCA&lt;/a&gt; provider.&lt;/p&gt;

&lt;p&gt;In our maven configuration we just add following two dependencies:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.jsonwebtoken&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jjwt&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.6.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.bouncycastle&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;bcprov-jdk15on&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.54&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you are working with a gradle project it would be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-gradle&quot; data-lang=&quot;gradle&quot;&gt;    runtime &#39;io.jsonwebtoken:jjwt:0.6.0&#39;,
            &#39;org.bouncycastle:bcprov-jdk15on:1.54&#39;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we were to implement the examples from the previous sections, we would start of with generating a new public-private key pair.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;n&quot;&gt;KeyPair&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyPair&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EllipticCurveProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;generateKeyPair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SignatureAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ES256&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s as easy as that!
We want to have a key of type “EC” so we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;EllipticCurveProvider&lt;/code&gt;, and by specifying &lt;code class=&quot;highlighter-rouge&quot;&gt;SignatureAlgorithm.ES256&lt;/code&gt; we use the P-256 bit curve with SHA-256 hashing.&lt;/p&gt;

&lt;p&gt;Next we want to sign our base64url encoded payload&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;n&quot;&gt;Jwts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;eyAKICAgICAgICAiZnJvbSI6ewogICAgICAgICAgICAibmFtZSI6ICJUaW0gWXNld3luIiwKICAgICAgICAgICAgImFjY291bnQiOiAiQ2hlY2tpbmcgYWNjb3VudCIKICAgICAgICB9LAogICAgICAgICJ0byI6ewogICAgICAgICAgICAibmFtZSI6ICJUaW0gWXNld3luIiwKICAgICAgICAgICAgImFjY291bnQiOiAiU2F2aW5ncyBhY2NvdW50IgogICAgICAgIH0sCiAgICAgICAgImFtb3VudCI6IDI1MAogICAgICAgICJjdXJyZW5jeSI6ICJFVVIiCiAgICB9&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SignatureAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ES256&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyPair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPrivate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since we already encoded our original message in the &lt;a href=&quot;#jws&quot;&gt;JWS section&lt;/a&gt;, I’m not getting here into detail again.
&lt;code class=&quot;highlighter-rouge&quot;&gt;signWith(SignatureAlgorithm.ES256, keyPair.getPrivate())&lt;/code&gt; does a couple of things.
First it is going the create a header if not already present and it will add the “alg” key with the value of “ES256”.
After that it will base64url encode that header and will append this with a ‘.’ and the encoded payload.
This whole blob of data will then be signed using the private key of the previously generated key pair.
Last, but not least, is the &lt;code class=&quot;highlighter-rouge&quot;&gt;compact&lt;/code&gt; method.
This will just output the base64url encoded header and payload with the generated signature, and all parts are separated with a dot.
An outcome would be something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;eyJhbGciOiJFUzI1NiJ9
.
ZXlBS0lDQWdJQ0FnSUNBaVpuSnZiU0k2ZXdvZ0lDQWdJQ0FnSUNBZ0lDQWlibUZ0WlNJNklDSlVhVzBnV1hObGQzbHVJaXdLSUNBZ0lDQWdJQ0FnSUNBZ0ltRmpZMjkxYm5RaU9pQWlRMmhsWTJ0cGJtY2dZV05qYjNWdWRDSUtJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0owYnlJNmV3b2dJQ0FnSUNBZ0lDQWdJQ0FpYm1GdFpTSTZJQ0pVYVcwZ1dYTmxkM2x1SWl3S0lDQWdJQ0FnSUNBZ0lDQWdJbUZqWTI5MWJuUWlPaUFpVTJGMmFXNW5jeUJoWTJOdmRXNTBJZ29nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSW1GdGIzVnVkQ0k2SURJMU1Bb2dJQ0FnSUNBZ0lDSmpkWEp5Wlc1amVTSTZJQ0pGVlZJaUNpQWdJQ0I5
.
MEYCIQCcwunLBiuHu2z_SlDVJyZuQv0NU8X4VYoOFN1EuIvObQIhAJeZuTeZw9k5uhpBc60iT13s3yb01ItSB2MhEd5pUSqC&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We split the three parts for better visualisation, the JWS would be one large &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;validating-the-signature&quot;&gt;Validating the signature&lt;/h2&gt;

&lt;p&gt;First we will check if the JWS was actually signed.
This can be accomplished by executing following line of code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;n&quot;&gt;Jwts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isSigned&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To parse the JWS, we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;parse()&lt;/code&gt; method.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;n&quot;&gt;Jwts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSigningKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publicKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Depending wether it is signed or not we might need to set the key for validation.
In our case we need to specify the public key of our asymmetric key pair.
If we would try to parse the JWS without a key an &lt;code class=&quot;highlighter-rouge&quot;&gt;IllegalArgumentException&lt;/code&gt; will be thrown.
Should a wrong public key have been provided a &lt;code class=&quot;highlighter-rouge&quot;&gt;SignatureException&lt;/code&gt; would be thrown, telling us to &lt;strong&gt;not&lt;/strong&gt; trust this JWS.&lt;/p&gt;

&lt;p&gt;If we were to pass our public key in the protected header like we said in the &lt;a href=&quot;#jws&quot;&gt;JWS section&lt;/a&gt;, we should use the &lt;code class=&quot;highlighter-rouge&quot;&gt;setSigningKeyResolver()&lt;/code&gt; method.
This custom resolver would read out the “jwk” field from the protected header and return a public key based on the data that was provided.&lt;/p&gt;

&lt;p&gt;Our own &lt;code class=&quot;highlighter-rouge&quot;&gt;SigningKeyResolver&lt;/code&gt; implementation could look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ECPublicSigningKeyResolver&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SigningKeyResolver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolveSigningKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JwsHeader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Claims&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;claims&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getPublicKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolveSigningKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JwsHeader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plaintext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getPublicKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getPublicKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JwsHeader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jwk&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            
                &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;crv&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;BigInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BigInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jwk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;BigInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BigInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jwk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kty&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;ECNamedCurveParameterSpec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecNamedCurveParameterSpec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECNamedCurveTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameterSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            
                &lt;span class=&quot;n&quot;&gt;ECCurve&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecNamedCurveParameterSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCurve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ECPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecNamedCurveParameterSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;BigInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecNamedCurveParameterSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;BigInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecNamedCurveParameterSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;ECParameterSpec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecParameterSpec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECParameterSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ECPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;ECPublicKeySpec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecPublicKeySpec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECPublicKeySpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ecPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecParameterSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;KeyFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;generatePublic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ecPublicKeySpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoSuchAlgorithmException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InvalidKeySpecException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First we read all our data from the “jwk” field.
Next we retrieve the &lt;code class=&quot;highlighter-rouge&quot;&gt;ECNamedCurveParameterSpec&lt;/code&gt; based on the “crv” field and assemble a new &lt;code class=&quot;highlighter-rouge&quot;&gt;ECParameterSpec&lt;/code&gt;.
After that we create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;ECPublicKeySpec&lt;/code&gt; with the &lt;code class=&quot;highlighter-rouge&quot;&gt;ECParameterSpec&lt;/code&gt; and an &lt;code class=&quot;highlighter-rouge&quot;&gt;ECPoint&lt;/code&gt; out of the x and y coordinates.
Finally we get a &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyFactory&lt;/code&gt; instance for our key type “kty” and generate the public key with our &lt;code class=&quot;highlighter-rouge&quot;&gt;ECPublicKeySpec&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;JOSE is a simple, compact and lightweight framework to sign and encrypt your payload messages.
Because of the combination of base64url encoded messages and JSON data structures it is web friendly.
With the wide range of libraries this can be used across platforms with native and hybrid applications, even web applications can use this!
One particular disadvantage with the use of the compact dot notation is that you can’t send unprotected header data anymore.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;final-note&quot;&gt;Final note&lt;/h2&gt;

&lt;p&gt;Above examples should only be used as reference. In a production environment we need to use both JWS and JWE.
One could embed a public key of an asymmetric key pair in the application.
During login a new symmetric key will be generated, encrypted with that public key and sent to the server.
This symmetric key can only be decrypted by the server with the private key, and should then be stored in the session.
Every time we need to sign a JSON document, we would use the symmetric key to encrypt the JWS using JWE.&lt;/p&gt;

&lt;p&gt;It doesn’t matter how you encrypt your messages, and which algorithms you use.
Once your application has been hacked, the whole system is vulnerable.&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Mar 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/security/2016/03/12/Digitally-signing-your-JSON-documents.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/security/2016/03/12/Digitally-signing-your-JSON-documents.html</guid>
        
        <category>Security</category>
        
        <category>JOSE</category>
        
        <category>JWS</category>
        
        <category>JSON Web Signature</category>
        
        
        <category>Security</category>
        
      </item>
    
      <item>
        <title>The 5 key trends of JavaLand 2016</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;JavaLand is a software conference, held annually, in Phantasialand, Brühl (Germany). JavaLand focuses on Java enthusiasts, developers, architects, strategists, administrators and project managers. With more than 100 lectures, JavaLand caters to the interest of both beginners and experts. These are, what I believe, the 5 key trends of the conference.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;microservices-stay-hot-and-are-maturing&quot;&gt;1. Microservices stay hot and are maturing&lt;/h2&gt;

&lt;p&gt;JavaLand dedicated an entire track to containers and microservices. This resulted in a large variety of talks on the subject. I attended a couple, but the talk by Ordina’s very own &lt;a href=&quot;https://twitter.com/andreasevers&quot;&gt;Andreas Evers&lt;/a&gt; hit the sweet spot between introducing the microservice concepts and making them tangible. Microservices transfer a lot of the application’s complexity to the interactions between the services. Applying patterns such as &lt;strong&gt;circuit breakers&lt;/strong&gt; and &lt;strong&gt;bulkheads&lt;/strong&gt; are quintessential to building successful distributed systems. Andreas presented all of this in a clear and concise manner to the delight of the audience.&lt;/p&gt;

&lt;h2 id=&quot;typescript--angular-2&quot;&gt;2. TypeScript / Angular 2&lt;/h2&gt;

&lt;p&gt;Frontend developers are in for a treat. Currently, nobody exactly knows when Angular 2 is going to be released, but everybody is eagerly looking forward to it. Rumor has it .. release will be very soon. Angular 2 promises to be a faster, more powerful, cleaner, and easier to use tool. The Angular team provides an &lt;a href=&quot;https://angular.io/docs/ts/latest/guide/upgrade.html&quot;&gt;upgrade path&lt;/a&gt; to migrate your old Angular 1 applications. What’s also really interesting is the &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a2/README.md&quot;&gt;Angular 2 Style Guide&lt;/a&gt;, that contains best practices on how to organize your project, name your components, etc.&lt;/p&gt;

&lt;p&gt;Angular 2 was migrated to TypeScript, because of the great &lt;a href=&quot;http://victorsavkin.com/post/123555572351/writing-angular-2-in-typescript&quot;&gt;tooling support&lt;/a&gt;. TypeScript isn’t the first language to &lt;a href=&quot;https://github.com/jashkenas/coffeescript/wiki/list-of-languages-that-compile-to-js&quot;&gt;compile to JavaScript&lt;/a&gt;, but supported by Angular 2, it just might be a game changer.&lt;/p&gt;

&lt;h2 id=&quot;cloud-native-java&quot;&gt;3. Cloud-Native Java&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/starbuxman&quot;&gt;Josh Long&lt;/a&gt; did a stunning job, giving a whirlwind talk on a large number of Spring tools to support the building of Cloud Native Java applications. He started with &lt;a href=&quot;http://projects.spring.io/spring-data-rest/&quot;&gt;Spring Data REST&lt;/a&gt; to build a hypermedia-driven REST web service with a Spring Data Repository. Then he introduced &lt;a href=&quot;http://cloud.spring.io/spring-cloud-config/&quot;&gt;Spring Cloud Config&lt;/a&gt; to externalize configuration files of the different microservices he was building. When building distributed applications, a config server is essential, in my opinion. Next up was &lt;a href=&quot;http://cloud.spring.io/spring-cloud-netflix/&quot;&gt;Spring Cloud Netflix&lt;/a&gt;, which is a “Springified” collection of tools open sourced by Netflix. Josh demoed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Eureka for service registry and discovery&lt;/li&gt;
  &lt;li&gt;Zuul as an API gateway&lt;/li&gt;
  &lt;li&gt;Hystrix for circuit breakers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally he used Spring Cloud Sleuth with Zipkin to show us a nice dashboard of the different requests going through his freshly deployed microservices.&lt;/p&gt;

&lt;p&gt;A talk by Josh Long is always an event and we’re very proud to announce that he will be doing a presentation at &lt;a href=&quot;https://www.ordina.be/&quot;&gt;Ordina Belgium&lt;/a&gt; later this month!&lt;/p&gt;

&lt;h2 id=&quot;reactive&quot;&gt;4. Reactive&lt;/h2&gt;

&lt;p&gt;“Reactive” is used broadly to define event-driven systems. Reactive Systems are responsive, resilient, elastic and message driven. Details on these key characteristics can be found in the &lt;a href=&quot;http://www.reactivemanifesto.org/&quot;&gt;Reactive Manifesto&lt;/a&gt;. The most popular Java library to compose asynchronous and event-based programs is &lt;a href=&quot;https://github.com/ReactiveX/RxJava&quot;&gt;RxJava&lt;/a&gt;. To build reactive applications, RxJava uses Observable sequences that make it easy to wrap synchronous methods in asynchronous calls.&lt;/p&gt;

&lt;p&gt;An interesting presentation to learn more about this topic is available on &lt;a href=&quot;https://www.youtube.com/watch?v=8OcCSQS0tug&quot;&gt;Youtube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While Reactive programming isn’t new, it has been gaining a lot of traction recently. For example thanks to the recently released Lagom framework from &lt;a href=&quot;https://www.lightbend.com/&quot;&gt;Lightbend&lt;/a&gt;. Last year the Spring team announced that &lt;a href=&quot;https://spring.io/blog/2016/02/09/reactive-spring&quot;&gt;Spring 5&lt;/a&gt; will also focus on Reactive.&lt;/p&gt;

&lt;h2 id=&quot;kubernetes&quot;&gt;5. Kubernetes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt; is an orchestration system for &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; and &lt;a href=&quot;https://coreos.com/blog/rocket/&quot;&gt;Rocket&lt;/a&gt; containers, initiated by Google in 2014. In Kubernetes, containers run in &lt;a href=&quot;http://kubernetes.io/docs/user-guide/pods/&quot;&gt;Pods&lt;/a&gt;. These pods are managed by &lt;a href=&quot;http://kubernetes.io/docs/user-guide/replication-controller/&quot;&gt;Replication Controllers&lt;/a&gt; (create, destroy, start / stop, failure, scaling, …). Since Replication Controllers can create and destroy Pods dynamically, we can’t rely on their IP addresses to communicate with each other. This can be solved by using Kubernetes &lt;a href=&quot;http://kubernetes.io/docs/user-guide/services/&quot;&gt;Services&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Kubernetes can schedule and run containers on clusters of both physical and virtual machines.&lt;/p&gt;

&lt;p&gt;An interesting discussion, after one of the Kubernetes talks, was about the differences between Kubernetes and a regular PaaS. &lt;a href=&quot;http://stackoverflow.com/questions/32047563/kubernetes-vs-cloudfoundry&quot;&gt;This post&lt;/a&gt; on Stackoverflow provides a lot of input for that discussion, stating that Kubernetes is PaaS-like: &lt;a href=&quot;https://www.cloudfoundry.org/&quot;&gt;Cloud Foundry&lt;/a&gt; can be considered an “Application PaaS” and Kubernetes a “Container PaaS”, but the distinction is fairly subtle and fluid, given that both projects change over time to compete in the same markets. The subtlety of the difference is demonstrated by the &lt;a href=&quot;http://kubernetes.io/docs/whatisk8s/&quot;&gt;Kubernetes documentation&lt;/a&gt;, explicitly stating Kubernetes is not a PaaS.&lt;/p&gt;

&lt;h2 id=&quot;the-community-activities&quot;&gt;The Community Activities&lt;/h2&gt;

&lt;p&gt;It’s impossible to talk about JavaLand, without mentioning The Community Activities. These focus on&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Innovation discovery&lt;/strong&gt;: Humanoid Robots, Virtual Reality (VR), Neural Networks, …&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Gamification&lt;/strong&gt;: Hacking sessions and contests, Dojos, …&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Networking&lt;/strong&gt;: User Groups, Jogging, Tours, …&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Phantasialand&lt;/strong&gt;: The theme park opened its door exclusively for JavaLand on Tuesday evening. What better way to bond with colleagues and leaders in the Java community than in a roller coaster :)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/javaland/keynote.jpg&quot; alt=&quot;Keynote&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/javaland/bynight.jpg&quot; alt=&quot;Bynight&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/conferences/2016/03/10/JavaLand2016.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/conferences/2016/03/10/JavaLand2016.html</guid>
        
        <category>javaland</category>
        
        
        <category>Conferences</category>
        
      </item>
    
      <item>
        <title>HTTP Public Key Pinning with Spring Security</title>
        <description>&lt;h2 id=&quot;what-kind-of-sorcery-is-this&quot;&gt;What kind of sorcery is this?&lt;/h2&gt;

&lt;p&gt;HTTP Public Key Pinning, or short HPKP, is a security mechanism which allows HTTPS websites to resist impersonation by attackers using mis-issued or otherwise fraudulent certificates.
This was standardized in &lt;a href=&quot;http://tools.ietf.org/html/rfc7469&quot;&gt;RFC 7469&lt;/a&gt; and creates a new opportunity for server validation. Instead of using static certificate pinning, where public key hashes are hardcoded within an application, we can now use a more dynamic way of providing this public key hashes.
One caveat to remember is that HPKP uses a Trust On First Use (&lt;a href=&quot;https://en.wikipedia.org/wiki/Trust_on_first_use&quot;&gt;TOFU&lt;/a&gt;) technique.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-does-this-work&quot;&gt;How does this work?&lt;/h2&gt;

&lt;p&gt;A list of public key hashes will be served to the client via a special HTTP header by the web server, so clients can store this information for a given period of time.
On subsequent connections within previous given period of time, the client expects a certificate containing a public key whose fingerprint is already known via HPKP.
I &lt;strong&gt;strongly&lt;/strong&gt; encourage you to read &lt;a href=&quot;https://timtaubert.de/blog/2014/10/http-public-key-pinning-explained/&quot;&gt;this article&lt;/a&gt; by Tim Taubert, where he explains what keys you should pin and what the different tradeoffs are.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Imagine you want to terminate the connection between the client and a malicious server for your main domain and all of your subdomains, but also want to be notified when such events happen.
In the next paragraph you can find the implementation details.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The web server needs to send following header to the connecting client with the first response&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    Public-Key-Pins:
        max-age&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5184000;
        pin-sha256&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;d6qzRu9zOECb90Uez27xWltNsj0e1Md7GkYYkVoZWmM=&quot;&lt;/span&gt;;
        pin-sha256&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;E9CZ9INDbd+2eRQozYqqbQ2yXLVKB9+xcprMF+44U1g=&quot;&lt;/span&gt;;
        report-uri&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://example.net/hpkp-report&quot;&lt;/span&gt;;
        includeSubdomains&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By specifying the &lt;strong&gt;Public-Key-Pins&lt;/strong&gt; header the client MUST terminate the connection without allowing the user to proceed anyway. In this example, &lt;strong&gt;pin-sha256=”d6qzRu9zOECb90Uez27xWltNsj0e1Md7GkYYkVoZWmM=”&lt;/strong&gt; pins the server’s public key used in production. The second pin declaration &lt;strong&gt;pin-sha256=”E9CZ9INDbd+2eRQozYqqbQ2yXLVKB9+xcprMF+44U1g=”&lt;/strong&gt; also pins the backup key. &lt;strong&gt;max-age=5184000&lt;/strong&gt; tells the client to store this information for two month, which is a reasonable time limit according to the IETF RFC. This key pinning is also valid for all subdomains, which is told by the &lt;strong&gt;includeSubdomains&lt;/strong&gt; declaration. Finally, &lt;strong&gt;report-uri=”https://www.example.net/hpkp-report”&lt;/strong&gt; explains where to report pin validation failures.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;so-how-can-we-implement-this-with-spring-security&quot;&gt;So how can we implement this with Spring Security?&lt;/h2&gt;

&lt;h3 id=&quot;retrieving--the-list-of-public-key-hashes&quot;&gt;Retrieving  the list of public key hashes&lt;/h3&gt;
&lt;p&gt;We first need to get a list of public key hashes. Currently the standard only supports the SHA256 hashing algorithm. The following commands will help you extract the Base64 encoded information:&lt;/p&gt;

&lt;h5 id=&quot;from-a-key-file&quot;&gt;From a key file&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;	openssl rsa -in my-key-file.key -outform der -pubout | openssl dgst -sha256 -binary | openssl enc -base64&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;from-a-certificate-signing-request-csr&quot;&gt;From a Certificate Signing Request (CSR)&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;	openssl req -in my-signing-request.csr -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;from-a-certificate&quot;&gt;From a certificate&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;	openssl x509 -in my-certificate.crt -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;from-a-running-web-server&quot;&gt;From a running web server&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;	openssl s_client -servername www.example.com -connect www.example.com:443 | openssl x509 -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
For now we will assume we got 2 public keys:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Our active production certificate: &lt;code class=&quot;highlighter-rouge&quot;&gt;d6qzRu9zOECb90Uez27xWltNsj0e1Md7GkYYkVoZWmM=&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Our backup production certificate: &lt;code class=&quot;highlighter-rouge&quot;&gt;E9CZ9INDbd+2eRQozYqqbQ2yXLVKB9+xcprMF+44U1g=&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;configuring-spring-security&quot;&gt;Configuring Spring Security&lt;/h3&gt;
&lt;p&gt;As of version &lt;strong&gt;4.1.0.RC1&lt;/strong&gt;, which will be released March 24th 2016, the &lt;code class=&quot;highlighter-rouge&quot;&gt;HpkpHeaderWriter&lt;/code&gt; has been added to the security module. The 2 easiest ways to implement this feature is either by &lt;strong&gt;Java configuration&lt;/strong&gt; or by using the older, but still supported, &lt;strong&gt;XML configuration&lt;/strong&gt;. Below you can find both solutions:&lt;/p&gt;

&lt;h5 id=&quot;java-config&quot;&gt;Java config&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;	&lt;span class=&quot;nd&quot;&gt;@EnableWebSecurity&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HpkpConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebSecurityConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpSecurity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;httpPublicKeyPinning&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addSha256Pins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;d6qzRu9zOECb90Uez27xWltNsj0e1Md7GkYYkVoZWmM=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;E9CZ9INDbd+2eRQozYqqbQ2yXLVKB9+xcprMF+44U1g=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reportOnly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reportUri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://example.net/hpkp-report&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;includeSubDomains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;xml-config&quot;&gt;XML config&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;	&lt;span class=&quot;nt&quot;&gt;&amp;lt;http&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;

		&lt;span class=&quot;nt&quot;&gt;&amp;lt;headers&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;hpkp&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;report-only=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;report-uri=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://example.net/hpkp-report&quot;&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;include-subdomains=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;pins&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;pin&amp;gt;&lt;/span&gt;d6qzRu9zOECb90Uez27xWltNsj0e1Md7GkYYkVoZWmM=&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pin&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;pin&amp;gt;&lt;/span&gt;E9CZ9INDbd+2eRQozYqqbQ2yXLVKB9+xcprMF+44U1g=&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pin&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pins&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/hpkp&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/headers&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/http&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Sat, 05 Mar 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/spring/2016/03/05/HTTP-Public-Key-Pinning-with-Spring-Security.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/spring/2016/03/05/HTTP-Public-Key-Pinning-with-Spring-Security.html</guid>
        
        <category>Spring</category>
        
        <category>Security</category>
        
        <category>Spring Security</category>
        
        <category>HPKP</category>
        
        <category>Public Key Pinning</category>
        
        
        <category>Spring</category>
        
      </item>
    
      <item>
        <title>Generating Spring REST Docs without using integration tests</title>
        <description>&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;

&lt;p&gt;A couple of days ago I was working on a project of one of our customers.
One of their new applications needed to expose a public API, and of course we needed to hand over a set of documentation about those REST endpoints.
Some people were already starting to do this manually in Confluence, but after a while (and we’re talking about a timespan just under 2 hours) this became a tedious job. 
We had to continuously adjust the input &amp;amp; output contracts, the different endpoints,…
Using Spring REST Docs I wanted to automatically document all of the public API endpoints, while we were also testing all of the components in the whole application.
For some undisclosed reasons we simply couldn’t write integration tests, so we were stuck with our unit tests and mocked objects.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;

&lt;p&gt;Imagine you have following service and controller in a simple Spring Boot application:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DeviceService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getDevices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

            &lt;span class=&quot;cm&quot;&gt;/*
                Some business logic here...
            */&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;devices&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DeviceController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeviceService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deviceService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeviceController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeviceService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deviceService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deviceService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deviceService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;produces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getDevices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deviceService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDevices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
Since this is a Spring Boot application both classes will automagically be instantiated.
Because you need to annotate your unit tests at class level with &lt;strong&gt;@WebAppConfiguration&lt;/strong&gt; and &lt;strong&gt;@SpringApplicationConfiguration&lt;/strong&gt;, we can easily create a new Spring Boot application and use this for our documentation.
In this new application we set the base package that needs to be scanned to our controller sub package, and create a mock implementation of our &lt;code class=&quot;highlighter-rouge&quot;&gt;DeviceService&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scanBasePackages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;be.ordina.blog.controller&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeviceService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getDeviceService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EasyMock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createStrictMock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeviceService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
Our &lt;code class=&quot;highlighter-rouge&quot;&gt;DeviceControllerTests&lt;/code&gt; class will then look something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringJUnit4ClassRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@SpringApplicationConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@WebAppConfiguration&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DeviceControllerTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Rule&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RestDocumentation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restDocumentation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RestDocumentation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;target/generated-snippets&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeviceService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deviceService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockMvc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockMvc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockMvcBuilders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;webAppContextSetup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                                            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;documentationConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;restDocumentation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                                            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@After&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;EasyMock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deviceService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;EasyMock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deviceService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getDevices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Device&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstDevice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;iPhone 6&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Device&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondDevice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Nexus 5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstDevice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secondDevice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;EasyMock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deviceService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDevices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;EasyMock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deviceService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/devices&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$[0].name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstDevice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())))&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$[1].name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secondDevice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())))&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;device&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
So this is how I managed to get rid of the manual, tedious work and keep my unit tests - and got back to the more serious part of my life: coding like a monkey. =)
&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;PS: All of the code above is checked in at our public github repo, so you are free to clone the working application! You can find it &lt;a href=&quot;https://github.com/ordina-jworks/spring-rest-docs-without-integration-tests&quot;&gt;here&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 06 Feb 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/spring/2016/02/06/Generating-Spring-REST-Docs-without-using-integration-tests.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/spring/2016/02/06/Generating-Spring-REST-Docs-without-using-integration-tests.html</guid>
        
        <category>Spring</category>
        
        <category>REST Docs</category>
        
        <category>Spring REST Docs</category>
        
        <category>Testing</category>
        
        <category>Integration</category>
        
        <category>Integration Test</category>
        
        <category>Unit Test</category>
        
        
        <category>Spring</category>
        
      </item>
    
      <item>
        <title>A decade of DDD, CQRS and Event Sourcing</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Command and Query Responsibility Segregation is the &lt;strong&gt;most misinterpreted pattern&lt;/strong&gt; in software design. CQRS doesn’t mean eventual consistency, it’s not about eventing and messaging. It’s not even what most people believe about having separate models for reading and writing.&lt;/p&gt;

  &lt;p&gt;In his talk &lt;a href=&quot;http://dddeurope.com/2016/greg-young.html&quot;&gt;A decade of DDD, CQRS and Event Sourcing&lt;/a&gt; on DDDEurope 2016, Greg Young gives us a retrospective over the last ten years practicing CQRS and event sourcing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;cqrs&quot;&gt;CQRS?&lt;/h3&gt;

&lt;p&gt;Before I go any further, let’s start explaining what CQRS really is. It’s all about &lt;strong&gt;applying a design pattern&lt;/strong&gt; when you notice that your class contains both query- and command methods. It’s not a new principle. Bertrand Meyer described &lt;strong&gt;Command-Query Separation&lt;/strong&gt; in his book Object-oriented Software Construction as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Every method should either be a command that performs an action, or a query that returns data to the caller, but not both. In other words, Asking a question should not change the answer.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can apply CQRS principles in many levels of our application, but when people talk about CQRS they are really speaking about applying the CQRS pattern to the object that represents the service boundary of the application. The following example illustrates this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/cqrs/customerservice.png&quot; alt=&quot;CQRS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although this doesn’t seem very interesting to do at first, architecturally we can do many interesting things by applying this pattern:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;One example is that the separation is more explicit and programmers will not find it odd to use &lt;strong&gt;different data models&lt;/strong&gt; which use the same data. Reading records from the database must be fast and there’s no problem at all if you can achieve this by using multiple representations of the same data.&lt;/li&gt;
  &lt;li&gt;CQRS is also an &lt;strong&gt;enabler for event-based programming models&lt;/strong&gt;. It’s common to see CQRS system split into separate services communicating with Event Collaboration. This allows these services to easily take advantage of Event Sourcing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should be cautious however not to use it everywhere and only in some &lt;strong&gt;Bounded Contexts&lt;/strong&gt; that need it, as everyone agrees that applying the CQRS principle adds complexity.&lt;/p&gt;

&lt;h3 id=&quot;history&quot;&gt;History&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;“When you searched CQRS on Google a decade ago, it thought it was just Cars misspelled.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CQRS is not a new concept. You might even say that event sourcing has been around for thousands of years. The ancient Sumerians wrote accounting info on &lt;strong&gt;clay tablets&lt;/strong&gt; and baked them. That document stored events in time. Immutable events. And documents are built up of this event information.&lt;/p&gt;

&lt;p&gt;As I said earlier, Meyer talked about the principle in his book which was released in 1988.&lt;/p&gt;

&lt;p&gt;It’s QCon San Francisco in 2006 which really gave a boost to the popularity of CQRS and event sourcing. Martin Fowler picked up &lt;a href=&quot;http://martinfowler.com/bliki/CommandQuerySeparation.html&quot;&gt;CommandQuerySeparation in his Bliki&lt;/a&gt; and after that, things began to grow.&lt;/p&gt;

&lt;p&gt;CQRS is more of a &lt;strong&gt;stepping stone&lt;/strong&gt; and you have to put it in its historical context. It was a &lt;strong&gt;natural consequence of what was happening with Domain-Driven Design&lt;/strong&gt; at that time. CQRS is not an end goal, it should be seen as a stepping stone for going to an event sourced system.&lt;/p&gt;

&lt;h3 id=&quot;good-things&quot;&gt;Good things&lt;/h3&gt;

&lt;p&gt;The community around CQRS and event sourcing is growing to about &lt;strong&gt;3000 people&lt;/strong&gt;. More and more domains are involved with event sourcing. In other domains, other added values were discovered. These people had breakthroughs by practicing CQRS, eg. in a warehouse system, instead of denying a user’s request because the system couldn’t handle the requests anymore, it accepts an event and processes it a later time.&lt;/p&gt;

&lt;p&gt;Another good thing about event sourcing, once you model events, you are forced to think about the &lt;strong&gt;temporality of systems&lt;/strong&gt;: what happens at a specific time? how will this object behave in this situation?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Event Storming&lt;/strong&gt; exercises help you to figure out which domains you have in your system and give you a clear view on the different events. You can then formalize events and commands.&lt;/p&gt;

&lt;p&gt;Ideas about Event Sourcing have been spreading. Functional programming gained popularity in parallel with event sourcing. Event sourcing is a &lt;strong&gt;natural functional model&lt;/strong&gt;. Every state is a left fold of your previous history.&lt;/p&gt;

&lt;p&gt;A lot of other things also pushed Event Sourcing forward:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cloud computing&lt;/li&gt;
  &lt;li&gt;Popularity of Actor Models&lt;/li&gt;
  &lt;li&gt;Microservices&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bad-things&quot;&gt;Bad things&lt;/h3&gt;

&lt;p&gt;Some people see CQRS as a full-blown architecture, but it’s not. This is wrong. CQRS and event sourcing is not a top level architecture. You cannot build an Event Sourced system. Instead, you end up into building a monolith which is event sourced internally. Event sourcing is simply not a good solution to every problem. For example, once you deal with immutable events, you need to think about corrections to data. Whenever a user corrects a value and hits the save button again, you would need to have an event for that and it would be too complex to handle.&lt;/p&gt;

&lt;p&gt;A lot of little things are misinterpreted by the community and this caused &lt;strong&gt;dogmas&lt;/strong&gt; to pop up:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;“Value objects can be mutable in some use cases”&lt;/em&gt; - It’s not because Eric Evans once said “Value objects are normally immutable” that you have to think that in some situations, you can justify mutable objects. There is never an excuse to create mutable objects and they should be avoided at all times.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;“The Write side cannot query the Read side”&lt;/em&gt; - There are times that you have to. When you have an invariant that crosses thousands of aggregates, you cannot avoid it.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;“Inputs should always equal Outputs” eg. if i have an order command, an order event should be the result&lt;/em&gt; - This is not always the case and there are situations where input and output aren’t one on one.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;“Must use one-way commands”&lt;/em&gt; There’s no such way as fire your command, put it on a queue and forget. One way commands don’t exist! They happened in the real world. They cannot be rolled back. Using commands gives you the opportunity to respond to it. One-way commands can however be changed in events in an event sourced system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Over the years some CQRS frameworks have been created. Greg’s advice is… &lt;strong&gt;Don’t write a CQRS framework&lt;/strong&gt;! It will guaranteed be abandoned after a year. It’s not a framework, it’s more like a reference implementation. We also need to pull back away from &lt;strong&gt;Process Manager frameworks&lt;/strong&gt;. You can probably solve your problem with an &lt;strong&gt;Actor Model&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;queue of messages&lt;/strong&gt; doesn’t work for all kinds of systems. You can probably linearize in 90% of the use cases, it will also probably be cheaper. For the other 10%, interesting things are happening. We’re gonna see a push to &lt;strong&gt;occasionally connected systems&lt;/strong&gt;. When you choose availability and high throughput, you’ll have to move to message-driven architectures and linearization is not an option.&lt;/p&gt;

&lt;h3 id=&quot;future-things&quot;&gt;Future things&lt;/h3&gt;

&lt;p&gt;A lot of interesting things are happening in the software world. We’re growing to &lt;strong&gt;N-Temporal systems&lt;/strong&gt;, where multiple things happen at multiple timeframes.&lt;/p&gt;

&lt;p&gt;Greg concluded with a quote of Ernest Hemingway.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“We are all apprentices in a craft where no one ever becomes a master.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;recommended-reading&quot;&gt;Recommended reading&lt;/h3&gt;

&lt;p&gt;Greg wrote a book about this matter, called &lt;a href=&quot;http://www.amazon.com/Event-Centric-Simplicity-Addison-Wesley-Signature/dp/0321768221&quot;&gt;Event Centric - Finding Simplicity in Complex Systems&lt;/a&gt;. In this book, he explains how to use DDD with Command-Query Responsibility Separation to select the right design solutions and make them work in the real world.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/cqrs/event-centric.png&quot; alt=&quot;Event Centric&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;other-sources&quot;&gt;Other sources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Martin Fowler on CQRS: &lt;a href=&quot;http://martinfowler.com/bliki/CQRS.html&quot;&gt;http://martinfowler.com/bliki/CQRS.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Greg Young on CQRS: &lt;a href=&quot;http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/&quot;&gt;http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/&lt;/a&gt; and &lt;a href=&quot;http://www.squarewidget.com/greg-young-on-cqrs&quot;&gt;http://www.squarewidget.com/greg-young-on-cqrs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/domain-driven%20design/2016/02/02/A-Decade-Of-DDD-CQRS-And-Event-Sourcing.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/domain-driven%20design/2016/02/02/A-Decade-Of-DDD-CQRS-And-Event-Sourcing.html</guid>
        
        <category>Domain-Driven Design</category>
        
        <category>DDD</category>
        
        <category>CQRS</category>
        
        <category>Event Sourcing</category>
        
        <category>Software Craftmanship</category>
        
        
        <category>Domain-Driven Design</category>
        
      </item>
    
      <item>
        <title>oDDs and enDs: Vaughn Vernon  on software projects in peril</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;There’s an interesting situation you will find in many software development projects.
Often there is a team dedicated to keep the software alive.
The team patches the system and deals with emergencies day after day.
Almost every organization is dealing with this kind of situation.
Obviously this is not the situation we want to be stuck in, but how do we alleviate ourselves from this?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vaughn Vernon gave a presentation today at Domain-Driven Design Europe.
He started his presentation about the odd things that happen in software projects.
Then he shed some light on the (future) solutions using Domain-Driven Design,
the so called &lt;em&gt;ends&lt;/em&gt; of the problems caused by the &lt;em&gt;odds&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;odds&quot;&gt;oDDs&lt;/h1&gt;
&lt;p&gt;What are the odd things that happen in software development projects?&lt;/p&gt;

&lt;h4 id=&quot;cost-centers&quot;&gt;Cost centers&lt;/h4&gt;

&lt;p&gt;An insidious problem is that &lt;em&gt;an IT organization within a company is considered a cost center&lt;/em&gt;.
The business views software as something that costs a lot of money.
You can almost say that the business almost wished they did not have to use computers,
or employ software developers.&lt;/p&gt;

&lt;p&gt;What about the company and you?
How does the business view you?
Do they view you as a hacker?
Someone who is thrilled about technology?
If that’s the case, then you may be viewed as a cost center instead of a profit center.&lt;/p&gt;

&lt;h4 id=&quot;budgets-for-software-development-projects-are-minimal&quot;&gt;Budgets for software development projects are minimal&lt;/h4&gt;

&lt;p&gt;Often a team only contains one senior developer and a lot of juniors developers.
The senior developer must keep everything running and moving.&lt;/p&gt;

&lt;h4 id=&quot;database-driven&quot;&gt;Database-Driven&lt;/h4&gt;
&lt;p&gt;Looking at the business like a database might be a problem.
How often does a developer think like this?
Data needs to go from a view into a database and out of a database to a view like this.
That is how a lot of developers think.
We must be careful to be focused so hard on technology and not on business value.&lt;/p&gt;

&lt;h4 id=&quot;shiny-objects&quot;&gt;Shiny Objects&lt;/h4&gt;
&lt;p&gt;Software developers are always looking for shiny objects.
They want to learn about the latest technologies and work with them.
DDD, BDD, TDD, Big Data, Machine Learning, Deep Learning, AI, Reactive, …
How do we justify those things to the business?&lt;/p&gt;

&lt;p&gt;Big Data was a big buzzword 5 or 6 years ago.
It is still a buzzword, but if you’re not saying &lt;em&gt;Machine Learning&lt;/em&gt; as well, you’re not cool anymore.&lt;/p&gt;

&lt;p&gt;Are we using technology when it is appropiate?
Sometimes the latest technology isn’t always the correct solution for the problem.&lt;/p&gt;

&lt;h4 id=&quot;a-not-so-ubiquitous-language&quot;&gt;A Not-So-Ubiquitous Language&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;It doesn’t matter what you name it. It’s just code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is very true for the common developer that they think it doesn’t matter.
But it does matter.&lt;/p&gt;

&lt;p&gt;The business wants to talk about something &lt;em&gt;this way&lt;/em&gt;,
but the developer calls it differently anyway. &lt;em&gt;“It’s just code”&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&quot;poor-collaboration&quot;&gt;Poor Collaboration&lt;/h4&gt;

&lt;p&gt;How many organizations use JIRA as a collaboration tool and fail at it?
Often someone spends days writing specifications and creating JIRA issues,
yet developers don’t use them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Estimates are a big deal&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Sometimes it takes longer to estimate than to fix the problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Task Board Shuffle&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is where software design is entirely comprised of moving sticky notes.
You move a sticky note from the Todo column to the In Progress column.
After we have done this, we run back to our machine and start coding.
Without thoughtful design, the code comes out of our fingertips.&lt;/p&gt;

&lt;p&gt;If you have a team compromised of a few developers working on the same problem,
there will be multiple translations in one day of the same thing.
Using the same terms is very important, but often neglected.&lt;/p&gt;

&lt;h4 id=&quot;big-ball-of-mud&quot;&gt;Big Ball of Mud&lt;/h4&gt;
&lt;p&gt;Many organizations are deducing a Big Ball of Mud as software architecture.
Everything is part of the same namespace and there are no bounded contexts.
The software consists of entangled models that should be separate,
but they are all in one place.&lt;/p&gt;

&lt;p&gt;This is the cause of many problems in the industry.
You have to recognize a situation when a Big Ball of Mud is being developed and stay out of it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/odds-and-ends/ballofmud.png&quot; alt=&quot;Big Ball of Mud&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;business-logic-is-escaping-to-everywhere&quot;&gt;Business logic is escaping to everywhere&lt;/h4&gt;

&lt;p&gt;Business logic can be found in places outside of the core domain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Business logic in persistence logic&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You often see business logic inside of persistence logic.
Someone is ready to save an object to the backend storage and there is business logic in the persistence logic.
The persistence logic is hiding the important business logic.
You lose trace of your business logic because of this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Queries in business logic&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You see business logic creating decisions by querying the database.
Some part of the decision that is being made is hidden to the business logic, because it is inside that query.
These queries can also be broken.
Sometimes queries are so expensive, they shut down other operations because the tables are locked.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Business logic in the UI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The biggest crime against business logic is putting it inside the UI.
The business logic is put inside the view template or model instead of the domain model.&lt;/p&gt;

&lt;h4 id=&quot;crud&quot;&gt;CRUD&lt;/h4&gt;
&lt;p&gt;CRUD does not work with complexity.
It’s also an insidious problem where software developments teams think they can solve any problem with a database.&lt;/p&gt;

&lt;h4 id=&quot;anemic-domain-model&quot;&gt;Anemic Domain Model&lt;/h4&gt;

&lt;p&gt;The Anemic Domain Model is one of the most widespread and adapted architectures.
Often there is a domain model with objects which are connected with relationships.
This all looks nice on paper, but there is no domain logic or any behavior inside these objects!
Services live on top of the domain model. This is often called the Service Layer or the Application Layer.
They contain most of the domain logic and use the domain objects for data.
This is very contrary to object-oriented design.
The data and the processes are combined together and it looks very much like procedural programming.
This anti-pattern is so common, because most people have not worked with a real domain model.&lt;/p&gt;

&lt;h4 id=&quot;wrong-abstractions&quot;&gt;Wrong abstractions&lt;/h4&gt;

&lt;p&gt;A lot of times developers are thinking too much about abstractions
instead of getting down to the business.
They form a lot of &lt;em&gt;“cool”&lt;/em&gt; abstractions that will make it better in the future.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“What if we have this sort of situation in the future?
If we come up with this kind of abstraction, then this abstraction will take care
of the situation in the future.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We cannot predict the future.
The future of software is unknown.&lt;/p&gt;

&lt;h4 id=&quot;coupled-services&quot;&gt;Coupled Services&lt;/h4&gt;

&lt;p&gt;Coupled services are horrible. What if, for example, a REST controller calls a service, which calls another system.
If the other system does not respond, you have a gap in your business logic, even if you use global XA transactions.&lt;/p&gt;

&lt;h4 id=&quot;what-to-do&quot;&gt;What to do?&lt;/h4&gt;

&lt;p&gt;It really could be that everybody else is normal.
What if writing systems with the odd things actually is the norm?
If that is normal, then wouldn’t you like to be the oddball in the crowd?&lt;/p&gt;

&lt;h1 id=&quot;ends&quot;&gt;enDs&lt;/h1&gt;

&lt;p&gt;You want to be the furthest point away from these problems.
You want to come up with solutions that work.
The business must not view you as a technologist,
but as someone who is interested in  the business.
You can’t just keep throwing technologies at the problem.
You must come up with beneficial business solutions.&lt;/p&gt;

&lt;h4 id=&quot;developer-maturity&quot;&gt;Developer maturity&lt;/h4&gt;

&lt;p&gt;If you are a cost center, then you must come up with a way to make your advances
more economical. You have to develop your maturity.&lt;/p&gt;

&lt;p&gt;You have to seek other ways to get the rest of your team to maturity.
Urge them to go to DDD and software meetups.
Do whatever you can, because you can only benefit if those around you are more mature than you.&lt;/p&gt;

&lt;p&gt;Passion is something we can’t always teach.
But you must try to work with people who are passionate about their job.&lt;/p&gt;

&lt;h4 id=&quot;profit-center&quot;&gt;Profit center&lt;/h4&gt;

&lt;p&gt;You must try to become a profit center.
An entire unit of the business is a profit center.
You can only become a profit center if you keep adding business value in a timely manner.&lt;/p&gt;

&lt;h4 id=&quot;collaborate-with-the-business&quot;&gt;Collaborate with the business&lt;/h4&gt;

&lt;p&gt;Don’t use JIRA to collaborate with the business.
You will be amazed what you can learn if you get away from the desk and into a room.
The business will tell you what they problems they have hated for years.&lt;/p&gt;

&lt;h4 id=&quot;use-an-ubiquitous-language&quot;&gt;Use an ubiquitous language&lt;/h4&gt;

&lt;p&gt;Some things cannot be explained by anybody. &lt;em&gt;“Why do we call it this? Can we call it this instead?”&lt;/em&gt;
You can learn those interesting and beneficial details by forming an ubiquitous language.
Make it your goal to find that ubiquitous language with a bounded context.&lt;/p&gt;

&lt;h4 id=&quot;concrete-scenario&quot;&gt;Concrete Scenario&lt;/h4&gt;

&lt;p&gt;Show concrete users in a concrete scenario and what goal that has to achieve.
As developers we have to chase after deep models as shiny objects.
It’s not just technologies.
Technology matters.
Try to experience with deep modeling through an ubiquitous language.
You can use the Gherkin language to achieve this.
With these concrete scenarios you can model your domain model and test it.&lt;/p&gt;

&lt;pre&gt;
Feature: Coffee Machine
    Scenario: Buy Coffee
        Given there is coffee left in the machine
        When I deposit 1 euro
        And I press the coffee button
        Then I should be served a coffee
&lt;/pre&gt;

&lt;h4 id=&quot;use-bounded-contexts&quot;&gt;Use bounded contexts&lt;/h4&gt;

&lt;p&gt;To avoid the Big Ball of Mud, you must introduce bounded contexts and separate models.&lt;/p&gt;

&lt;p&gt;It is equally important to separate the models as it is to introduce core concepts in the core domain.&lt;/p&gt;

&lt;p&gt;You have to learn about event storming.
You can understand what your bounded contexts are from an event storming event.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/odds-and-ends/event-storming.jpg&quot; alt=&quot;Event Storming&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;metrics-based-estimates&quot;&gt;Metrics-based Estimates&lt;/h4&gt;

&lt;p&gt;The artifacts that come out of an Event Storming event, you can use those as estimation units.&lt;/p&gt;

&lt;p&gt;If you can’t finish an iteration according what you’ve planned,
move these estimation units in a retrospective and encur modeling debt.
This modeling debt must be fixed as soon as possible.&lt;/p&gt;

&lt;h4 id=&quot;know-architecture&quot;&gt;Know architecture&lt;/h4&gt;

&lt;p&gt;You must know good architectures, like the hexagonal architecture or CQRS. 
These architecture solve many of the above problems.
They enforce bounded contexts and give the ability to do context mapping.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/odds-and-ends/hexagonal.jpg&quot; alt=&quot;Hexagonal Architecture&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;decoupled-services&quot;&gt;Decoupled Services&lt;/h4&gt;
&lt;p&gt;Services have to be decoupled.
A service which calls a peer service directly, is tightly coupled.
It cannot work without the other service.
What if the other service times out?
You can use domain events and messaging systems to fix this problem.&lt;/p&gt;

&lt;h4 id=&quot;microservices&quot;&gt;Microservices&lt;/h4&gt;

&lt;p&gt;The microservices architecture is another shiny object that a lot of people are chasing.
The thing is, they are extremely similar to bounded contexts.
Every microservice is master of their own model and usually has one point of access, like an aggregate root in Domain-Driven Design.&lt;/p&gt;

&lt;h4 id=&quot;actor-model&quot;&gt;Actor Model&lt;/h4&gt;

&lt;p&gt;The Actor Model is an extremely powerful tool that we need to use in the very near future
by the majority of software development teams.
CPU processing power is not increasing, but the amount of cores keeps increasing.
The Actor model is a new way to leverage this power because it fully utilizes these cores with threads.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/odds-and-ends/actor-model.png&quot; alt=&quot;Actor Model&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Many teams are in peril over poorly designed systems&lt;/li&gt;
  &lt;li&gt;Software development culture is broken&lt;/li&gt;
  &lt;li&gt;Developers must gain maturity and passion&lt;/li&gt;
  &lt;li&gt;DDD can be used to make a difference&lt;/li&gt;
  &lt;li&gt;Use the Actor model to design DDD based microservices&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;one-more-thing&quot;&gt;One more thing&lt;/h2&gt;

&lt;p&gt;Vaughn Vernon announced an additional new book called &lt;em&gt;Domain-Driven Design Distilled&lt;/em&gt;.
It is a 200 page thick book that explains all of the core concepts of DDD.
This is very light weight book, intended to rapidly not only teach your team members,
but also the business about DDD. This book will be available within a month.&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Jan 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/domain-driven%20design/2016/01/29/DDDEU16-Odds-and-Ends.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/domain-driven%20design/2016/01/29/DDDEU16-Odds-and-Ends.html</guid>
        
        <category>Domain-Driven Design</category>
        
        <category>DDD</category>
        
        <category>Software Craftmanship</category>
        
        
        <category>Domain-Driven Design</category>
        
      </item>
    
      <item>
        <title>Heuristics from the Trenches by Cyrille Martraire</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Communication usually fails, except by accident” - Osmo Wiio&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;With this quote of the Finnish researcher &lt;a href=&quot;https://en.wikipedia.org/wiki/Osmo_Antero_Wiio&quot;&gt;Osmo Wiio&lt;/a&gt;, Cyrille opened the second day of the &lt;a href=&quot;http://dddeurope.com&quot;&gt;DDD Europe&lt;/a&gt; conference. Osmo’s laws of communication are the &lt;strong&gt;human communications equivalent&lt;/strong&gt; of Murphy’s law. Basically if communication can fail, it will and if a message can be understood in several different ways it is quite possible that it will be understood in a harmful way. With the quote Cyrille immediately wants to stress that with Domain-Driven Design, deep conversations with domain experts and careful attention to the language are key.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Business domains&lt;/strong&gt; are often very complex and hard to get into for individuals not familiar with the domain. The &lt;strong&gt;conversations’ game&lt;/strong&gt; with &lt;strong&gt;domain experts&lt;/strong&gt; is a game that takes many years and many failures in order to get better at. Cyrille explained that, even though it’s hard, it’s perfectly possible over time to extract a growing set of techniques, heuristics and best practices to boost the effectiveness of the interviews with domain experts, to learn faster and to converge more quickly to better models.&lt;/p&gt;

&lt;h3 id=&quot;practices-and-tricks-for-talking-to-the-domain-experts&quot;&gt;Practices and tricks for talking to the domain experts&lt;/h3&gt;
&lt;p&gt;“Why is it so hard?” you might ask yourself or “We don’t talk the same language as them and they don’t have time for us!”. While it is true that the people with the highest expertise within a certain domain often don’t have a lot of time for interviews or meetings, it is up to us, the developers, to make the &lt;strong&gt;necessary preparations&lt;/strong&gt; prior to seeing them. You should first take some time in order to teach yourself some &lt;strong&gt;basic domain knowledge&lt;/strong&gt;. It all starts with &lt;strong&gt;genuine curiosity&lt;/strong&gt;, successful people are curious about their business domains. You may not believe this but here this will help you too! Without this you will have a bad time! &lt;strong&gt;Do your homework&lt;/strong&gt;: perform the necessary research about the domain on the internet, Google around, read books, check Oasis, … Usage of &lt;strong&gt;ubiquitous language&lt;/strong&gt; is very important.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note taking&lt;/strong&gt; is also a very important aspect in the whole story. You need to be able to take notes like a pro! Learn to take notes effectively. &lt;strong&gt;Listen actively&lt;/strong&gt; and &lt;strong&gt;don’t distort&lt;/strong&gt; the stories the domain experts tells you. Keep the words as they are. It really is harder than you would think, so you should turn it into a game:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Write down the stories&lt;/strong&gt; the domain experts tell you&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Underline new words&lt;/strong&gt; and &lt;strong&gt;add a definition&lt;/strong&gt; for yourself, get familiar with all the domain terms&lt;/li&gt;
  &lt;li&gt;Take note of &lt;strong&gt;side remarks&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;If you think that you’ve encountered a synonym for an existing new word &lt;strong&gt;dig into it&lt;/strong&gt; and &lt;strong&gt;ask for more detail&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Show your knowledge&lt;/strong&gt; to the domain user to &lt;strong&gt;establish credibility&lt;/strong&gt; and to challenge them&lt;/li&gt;
  &lt;li&gt;But… Challenge them &lt;strong&gt;respectfully&lt;/strong&gt;!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All this is &lt;strong&gt;Domain-Driven Design&lt;/strong&gt;!&lt;/p&gt;

&lt;h3 id=&quot;talking-to-people-is-hard&quot;&gt;Talking to people is hard&lt;/h3&gt;
&lt;p&gt;It is not easy talking to people and it will often be hard to have &lt;strong&gt;productive conversations&lt;/strong&gt;. However this is also something you can &lt;strong&gt;grow into&lt;/strong&gt; and for which you can develop the &lt;strong&gt;right toolset&lt;/strong&gt;. Have &lt;strong&gt;interactive conversations&lt;/strong&gt;, that way you have control over the conversation and the way you can steer it. Start with “what exactly is the goal?”. &lt;strong&gt;Be precise&lt;/strong&gt; when asking questions, we want to avoid having to reverse engineer the true need from an expressed solution. Be sure to &lt;strong&gt;scan the notes&lt;/strong&gt; you took during a previous conversation and &lt;strong&gt;decide&lt;/strong&gt; where you want the conversation to go next.&lt;/p&gt;

&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;“I keep developers out of conversations about the domain because they always want to know ‘why this’ and ‘why that’. Just write your code.” - &lt;a href=&quot;https://twitter.com/expertbeginner1/status/656122859773820929&quot;&gt;The Expert Beginner&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;You should &lt;strong&gt;question everything&lt;/strong&gt;: ask why but don’t go too far!&lt;/p&gt;

&lt;p&gt;Combine Domain-Driven Development with &lt;strong&gt;Behaviour-Driven Development&lt;/strong&gt;. Both go hand in hand to interview domain experts. You want to &lt;strong&gt;discover the “unknown unknowns”&lt;/strong&gt; as early as possible and to &lt;strong&gt;avoid misunderstandings&lt;/strong&gt; as often as possible. Be sure to &lt;strong&gt;ask for concrete examples&lt;/strong&gt; and &lt;strong&gt;genuine sample documents and data&lt;/strong&gt; and although this doesn’t always come easy, ask and insist but as mentioned before know your limits and be sure not to push it.&lt;/p&gt;

&lt;p&gt;People always think that talking abstract is faster and will save time but think about it and ask yourself: “Is it truly faster if we were wrong or missed stuff that matters?”. If the domain expert seems hesitant about something also take note of this to take into account that the feature in question might be eligible for change later on, this way we can &lt;strong&gt;model our software design correctly&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-domain-expert-delusion&quot;&gt;The domain expert delusion&lt;/h3&gt;
&lt;p&gt;You might assume that the person, you’re having a conversation with, is an actual system expert within the domain but chances are that he/she is not. The worst expert is the one whose expertise was built from the intricacies of the existing systems. It is therefor also our duty to help out the domain expert where possible:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Have empathy&lt;/strong&gt;, try to put yourself in their shoes&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Build a partnership&lt;/strong&gt;, it should be a two-way conversation you’re having with the expert&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Make it clear&lt;/strong&gt; that the domain expert is always safe with you, that you have no plan to steal their job&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Propose things&lt;/strong&gt;, it doesn’t always have to be right but this way you will get somewhere&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Look for invariants&lt;/strong&gt;, for example: “Is there any other outcome that is also important?”&lt;/li&gt;
  &lt;li&gt;Always &lt;strong&gt;ask for validation&lt;/strong&gt; of everything, even if you’re sure about it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is common in companies that businesses often don’t want all power concentrated into the same hands. This also accounts for domains, you should therefor &lt;strong&gt;assume and probe&lt;/strong&gt;. Get to know the business you are dealing with and their mentality. Not that if you happen to discover that there are multiple domain experts the situation gets a bit more tricky. Having multiple domain experts may lead to more confusion and makes it even more important asking for validation and challenging the experts. Something we want to achieve is that we want to suggest features from our code which could be very useful for the business. Instead of having software to support the domain we want to have &lt;strong&gt;software augmenting the domain&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;keep-improving-yourself&quot;&gt;Keep improving yourself&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Grow into it&lt;/strong&gt; and &lt;strong&gt;build your own toolbox&lt;/strong&gt; for implementing Domain-Driven Design. You might ask yourself why you should bother so much with all of this, after all we just want to get to it and write code. This however is a wrong approach because the complexity of the domain is there, it is just hiding behind a wall, you just don’t see it yet. You will discover the complexity sooner or later so you may as well want to get into it as early as possible to save precious time. After all, you want to become a &lt;strong&gt;domain expert&lt;/strong&gt; too!&lt;/p&gt;

&lt;h3 id=&quot;other-useful-resources-mentioned-by-cyrille&quot;&gt;Other useful resources mentioned by Cyrille:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://schd.ws/hosted_files/agile2014/d5/1571_Agile2014__Conversation_Patterns_for_Software_Professionals.pdf&quot;&gt;Conversation Patterns for Software Professionals&lt;/a&gt; by Michael Bartyzel&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://martinfowler.com/books/ap.html&quot;&gt;Analysis Patterns&lt;/a&gt; by Martin Fowler&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leanpub.com/livingdocumentation&quot;&gt;Living Documentation&lt;/a&gt; by Cyrille Martraire&lt;/li&gt;
  &lt;li&gt;Slides: &lt;a href=&quot;http://www.slideshare.net/cyriux&quot;&gt;http://www.slideshare.net/cyriux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Blog: &lt;a href=&quot;http://cyrille.martraire.com&quot;&gt;http://cyrille.martraire.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Twitter: &lt;a href=&quot;https://twitter.com/cyriux&quot;&gt;@cyriux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 29 Jan 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/domain-driven%20design/2016/01/29/DDD-Europe-Heuristics-from-the-Trenches.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/domain-driven%20design/2016/01/29/DDD-Europe-Heuristics-from-the-Trenches.html</guid>
        
        <category>Domain-Driven Design</category>
        
        <category>DDD</category>
        
        <category>Software Craftmanship</category>
        
        
        <category>Domain-Driven Design</category>
        
      </item>
    
      <item>
        <title>Eric Evans about the evolution of Domain-Driven Design</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Why is it that DDD only has its own conference after 13 years? Why is this becoming a sudden hype? Why does it gain popularity and is it mentioned so many times in microservices presentations? Eric Evans talks on &lt;a href=&quot;http://dddeurope.com/2016/eric-evans.html&quot;&gt;DDDEurope&lt;/a&gt; about the core idea behind Domain-Driven Design and its evolution over the last few years.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;but-what-is-ddd&quot;&gt;But what is DDD?&lt;/h3&gt;

&lt;p&gt;The subtitle of Evans’ book, &lt;em&gt;Tackling Complexity in the Heart of Software&lt;/em&gt;, bundles two core principles of Domain-Driven Design:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It describes the process of translating complex real-life problems into software&lt;/li&gt;
  &lt;li&gt;The heart of software entails the domain that we’re working on&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Key in this activity is finding the core complexity in the critical part of the domain and focus on this and only this piece of complexity. &lt;strong&gt;Software developers and domain experts collaborate&lt;/strong&gt; to develop models, simplified representations of the real-life problem. The written software should eventually explicitly reflect the model. Whenever a brainstorm session occurs, it almost always results in an adaptation of the models within the software.&lt;/p&gt;

&lt;p&gt;When we encounter multiple complex problems, we must think about them separately. Each problem requires its own model representation.&lt;/p&gt;

&lt;p&gt;When discussing with others about the domain, we must speak a &lt;strong&gt;ubiquitous language&lt;/strong&gt;. You should use the &lt;strong&gt;same vocabulary&lt;/strong&gt; for describing the problem you’re solving. However, when somebody asks you the meaning of a word, in many cases you have to ask the person: &lt;em&gt;“In what context is it used?”&lt;/em&gt;. That’s why the language only means something within a &lt;strong&gt;well-defined bounded context&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Domain-Driven Design is more like an attitude. Although it gives us principles and terminology to enable talking about it and have discussions, different people will do things differently. Each approach will be slightly different.&lt;/p&gt;

&lt;h3 id=&quot;bounded-contexts&quot;&gt;Bounded contexts?&lt;/h3&gt;

&lt;p&gt;A bounded context is an important principle when applying Domain-Driven Design. As i said earlier, language in itself doesn’t mean anything. It only means something when it’s used within a certain context. eg. Item can be a Stock Item, Sale Item, …&lt;/p&gt;

&lt;p&gt;Bounded contexts have the following characteristics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Within a bounded context certain &lt;strong&gt;rules&lt;/strong&gt; apply, eg. validation rules&lt;/li&gt;
  &lt;li&gt;It needs to be &lt;strong&gt;tangible in the software&lt;/strong&gt;, eg. use packages for each context&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another benefit of working with separate bounded contexts is that separate teams could take responsibility on separate bounded contexts.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;When &lt;a href=&quot;http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215&quot;&gt;Erics book&lt;/a&gt; was released in 2003, only Java 5 and J2EE were used as a programming language for implementing projects. We only had EJB’s to solve problems and there was no other way of storing data but with SQL. If the technology is so complex and limited to implement something, you can’t focus on the real problem of software design.&lt;/p&gt;

&lt;p&gt;Nowadays, we have a lot of new tools available to implement a project: We can store data with a NoSQL database or not store it at all and keep it in-memory. We can explore other ways of approaching data with eg. &lt;strong&gt;event sourcing&lt;/strong&gt;. On certain levels, &lt;strong&gt;Spring&lt;/strong&gt; makes the technical aspect of writing software components a breeze. With the upcoming of &lt;strong&gt;microservices&lt;/strong&gt; and each microservice having its own database, bounded contexts are much clearer to the teams working on the software. And there are probably tons of other examples on how today’s tools can help us achieving our goal: write good software.&lt;/p&gt;

&lt;p&gt;Better tools and a vivid community which masters these tools cause Domain-Driven Design to become more and more popular in ways of designing software. So maybe we can do better now than back in 2003. Maybe… Or maybe we’re not there yet. Fact is that everyday we are learning from mistakes in the past to do better in the future.&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/domain-driven%20design/2016/01/28/Evolution-of-DDD.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/domain-driven%20design/2016/01/28/Evolution-of-DDD.html</guid>
        
        <category>Domain-Driven Design</category>
        
        <category>DDD</category>
        
        <category>Software Craftmanship</category>
        
        
        <category>Domain-Driven Design</category>
        
      </item>
    
      <item>
        <title>#Devoxx Arun Gupta talks Docker</title>
        <description>&lt;h2 id=&quot;docker&quot;&gt;Docker&lt;/h2&gt;
&lt;p&gt;Docker is a tool used for container creation for software applications. We have all been aware of the existence of containers for some time, but Docker creates a standard for describing these packages.
Docker is used for three things: Build, Ship &amp;amp; Run your software.&lt;/p&gt;

&lt;h3 id=&quot;build&quot;&gt;Build&lt;/h3&gt;
&lt;p&gt;Creation of a predefined container in a standardized way using the &lt;strong&gt;Docker CLI&lt;/strong&gt;.
Use a &lt;code class=&quot;highlighter-rouge&quot;&gt;dockerfile&lt;/code&gt; containing a list of commands. The &lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt; command specifies an OS and additional software packages, eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;FROM jboss/wildfly&lt;/code&gt;. All  commands are compressed into one, customized image using the &lt;strong&gt;Docker CLI&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;ship&quot;&gt;Ship&lt;/h3&gt;
&lt;p&gt;Share the container via DockerHub or your private repository.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sharing = caring!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;run&quot;&gt;Run&lt;/h3&gt;
&lt;p&gt;Docker runs on a minimal operating system and uses the Union File System. On the bottom level, there’s the Bootfs kernel, on which the chosen base image or OS runs and finally, the user images ontop of that.
Hosts running Docker are very environment variables oriented, so by using variables in the commands or on the machine itself you configure your application. Any other communication is usually done over &lt;strong&gt;HTTP/REST&lt;/strong&gt;. The Docker images are stored on the Docker host so the actual client is very thin. A Docker app runs on the Docker engine; this is in contrast with regular VMs, running on full-blown operating systems.&lt;/p&gt;

&lt;h2 id=&quot;docker-machine&quot;&gt;Docker Machine&lt;/h2&gt;
&lt;p&gt;Docker Machine allows you to get started with Docker on Mac or Windows. It features the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-machine&lt;/code&gt; CLI and uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;boot2docker&lt;/code&gt; image (32Mb small) under the hood.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Docker Machine is preferred over boot2docker for development purposes, but it is not production-ready (yet!)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Easy way to set up a Docker host with docker-machine:
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-machine create --driver=virtualbox myhost&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Listing all the installed Docker images:
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-machine ls&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Listing all the environment variables of a newly created Docker container:
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-machine env myhost&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Docker Machine is also used to start, stop or restart containers. It even allows to update Docker itself.
Many existing plugins provide support for various cloud platforms.&lt;/p&gt;

&lt;h2 id=&quot;boot2docker&quot;&gt;Boot2Docker&lt;/h2&gt;
&lt;p&gt;An earlier version of docker-machine. As said above, it is being used by &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-machine&lt;/code&gt; under the hood.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;My advice: migrate to docker-machine, at least for development purposes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;docker-toolbox&quot;&gt;Docker Toolbox&lt;/h2&gt;
&lt;p&gt;Easily the best tool to get started with Docker.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.docker.com/windows/started/&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.docker.com/mac/started/&quot;&gt;MacOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hands-on-docker&quot;&gt;Hands-on Docker&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker help&lt;/code&gt;for all your docker needs!&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt;to check the running containers&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker images&lt;/code&gt;to check your images&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker build&lt;/code&gt;for quick build&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -it ubuntu sh&lt;/code&gt; for quick running an image in a shell&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Docker images are like diapers: if they get shitty, throw’em away and take a fresh one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;docker-compose&quot;&gt;Docker Compose&lt;/h2&gt;
&lt;p&gt;Allows you to define and run multi-container applications. It has all the commands the regular Docker has &lt;strong&gt;and more&lt;/strong&gt;.
It provides a new way to link containers.&lt;/p&gt;

&lt;p&gt;Configuration is defined in one or more &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; (default) or &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.override.yml&lt;/code&gt; (default) files.
It is a great tool for setting up Development, Staging and Continuous Integration (CI) environments.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Docker container linking is so passé&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A problem with container linking was that there was no possible way to work with different hosts. Docker Compose solves this by using volume mapping.
It can help with running multi-host environments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Bridge&lt;/strong&gt; network span single host&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Overlay&lt;/strong&gt; network spans multiple hosts&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Software defined networking is possible and preferred! Docker Compose solves this problem but it should still be used cautiously in production!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Starting a set of Docker images using Docker Compose is easy:
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose up -f docker-compose.yml -f production.yml -d&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;docker-swarm&quot;&gt;Docker Swarm&lt;/h2&gt;
&lt;p&gt;Docker Swarm provides native clustering for Docker, fully integrated with Machine &amp;amp; Compose. It either uses Etcd, Consul, Zookeeper or other solutions to store the cluster ID.
Whenever you create a Docker Machine, you can add it to the cluster. It also serves the standard Docker API so anything that works on Docker, will work on multi-host environments.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;They say the new Docker Swarm v1.0.0 release is production ready: I still have my doubts!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Docker Docs are the de facto standard reference and are very well documented. They contain information on &lt;a href=&quot;https://docs.docker.com&quot;&gt;Docker&lt;/a&gt;, &lt;a href=&quot;https://docs.docker.com/machine&quot;&gt;Machine&lt;/a&gt;, &lt;a href=&quot;https://docs.docker.com/compose&quot;&gt;Compose&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://docs.docker.com/swarm&quot;&gt;Swarm&lt;/a&gt;: &lt;a href=&quot;https://docs.docker.com/&quot;&gt;https://docs.docker.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Samples: &lt;a href=&quot;https://github.com/javaee-samples/docker-java&quot;&gt;https://github.com/javaee-samples/docker-java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;questions-or-remarks&quot;&gt;Questions or Remarks&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Contact &lt;a href=&quot;https://twitter.com/arungupta&quot;&gt;@arungupta&lt;/a&gt;  or &lt;a href=&quot;https://twitter.com/dhubau&quot;&gt;@Turbots&lt;/a&gt; on Twitter&lt;/li&gt;
  &lt;li&gt;Create an issue or start a discussion on the Github repository (or on &lt;a href=&quot;https://gitter.im/docker/docker&quot;&gt;Gitter&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/devoxx/2015/11/09/Devoxx15-Docker-Kubernetes.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/devoxx/2015/11/09/Devoxx15-Docker-Kubernetes.html</guid>
        
        <category>Docker</category>
        
        <category>Devoxx</category>
        
        
        <category>Devoxx</category>
        
      </item>
    
  </channel>
</rss>
