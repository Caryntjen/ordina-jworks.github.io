<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ordina JWorks Tech Blog</title>
    <description>Ordina JWorks Tech blog
</description>
    <link>https://ordina-jworks.github.io/</link>
    <atom:link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 28 Jul 2016 19:46:54 +0000</pubDate>
    <lastBuildDate>Thu, 28 Jul 2016 19:46:54 +0000</lastBuildDate>
    <generator>Jekyll v3.2.0</generator>
    
      <item>
        <title>A web of trusted commits</title>
        <description>&lt;h2 id=&quot;who-do-you-trust&quot;&gt;Who Do You Trust?&lt;/h2&gt;
&lt;p&gt;When you’re building software with people from around the world, it’s important to validate that commits and tags are coming from an identified source. By using a distributed revision control system like Git, anyone can have an offline copy of your project’s code repository. In theory having a central repository is not necessary, but it can be used to provide an “official” source from which other developers can clone from and work on. These other floating repositories may contain malicious code because, unfortunately, it is remarkably easy to fake your identity when committing code using Git.&lt;/p&gt;

&lt;p&gt;The following command allows any individual with bad intentions to commit (malicious) code under your name, meaning that you will get the blame for the backdoor or exploit “you” committed:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;  &lt;span class=&quot;c&quot;&gt;# Individual commit.
&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -a -m &lt;span class=&quot;s2&quot;&gt;&quot;a message&quot;&lt;/span&gt; --author &lt;span class=&quot;s2&quot;&gt;&quot;Sherlock H. &amp;lt;sherlock.h@bakerstreet.org&amp;gt;&quot;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# Global settings.
&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config --global user.name &lt;span class=&quot;s1&quot;&gt;'Sherlock H.'&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config --global user.email sherlock.h@bakerstreet.org
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;ensuring-trust&quot;&gt;Ensuring Trust&lt;/h2&gt;

&lt;p&gt;This blog post tells the story of Sherlock H. Sherlock is a witty developer who holds any security-related topic very close to his heart. After a fair amount of pondering about how he could solve the problem of black-hearted developers impersonating his personality, he decided to add &lt;strong&gt;a Digital Signature&lt;/strong&gt; to his commits. By adding a signature Sherlock can finally sleep soundly at night because the signature indicates that he really issued the commit and that it has not been tampered with since he sent it. Moreover it can be used to trace the origin of malicious code that has made its way into a repository. The signature also assures non-repudiation, meaning that it becomes difficult for the signer to deny having signed something because the Digital Signature is unique to both the commit and the signer, and binds them together. Sherlock can now wholeheartedly vouch for the commit.&lt;/p&gt;

&lt;p&gt;Consider the following scenario:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sherlock wants to send an urgent message to his fellow developer John W. telling that their application has been compromised by Jim M, a criminal mastermind who only has unkind intentions. John wants the guarantee that the message he received is sent by Sherlock and has not been tampered with by Jim.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In order to securely exchange messages, both Sherlock and John will make use of their &lt;strong&gt;Key Pairs&lt;/strong&gt;. A Key Pair consists of a &lt;strong&gt;Public and Private Key&lt;/strong&gt; which are two unique mathematically related cryptographic keys. As its name suggests, the Public Key is made available to everyone by handing out copies or sharing them through a publicly accessible repository. The Private Key however must be kept confidential to its respective owner.&lt;/p&gt;

&lt;p&gt;Sherlock and John can do the following with the use of their Key Pair:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Signing&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;The message is still readable to everyone.&lt;/li&gt;
      &lt;li&gt;Guarantee of the sender’s identity (aka Sherlock).&lt;/li&gt;
      &lt;li&gt;Guarantee that the message has not been tampered with since it has been signed by the sender (aka Sherlock).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Encryption&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;The message is only readable by the designated recipient (aka John).&lt;/li&gt;
      &lt;li&gt;No guarantee of the sender’s identity (aka Sherlock).&lt;/li&gt;
      &lt;li&gt;Encryption can be done &lt;strong&gt;symmetrically&lt;/strong&gt; by using a Shared Secret Key, a single key is then used for both encryption and decryption. &lt;strong&gt;Asymmetrical&lt;/strong&gt; encryption (aka Public Key encryption) with a Public/Private Keypair uses one key for encryption and another for decryption. Note that the advantages and challenges of using either encryption type is beyond the scope of this blog post.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;enforcing-trust&quot;&gt;Enforcing Trust&lt;/h2&gt;

&lt;p&gt;Sherlock will combine a digital signature with encryption to convince John that his message is trustworthy.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sherlock wants to send the following message to John: &lt;code class=&quot;highlighter-rouge&quot;&gt;Data! Data! Data! I can’t make bricks without clay.&lt;/code&gt;. He calculates the &lt;strong&gt;Hash&lt;/strong&gt; of this message by applying a publicly known hashing algorithm to the message. The calculated hash by using the SHA-256 hashing algorithm is &lt;code class=&quot;highlighter-rouge&quot;&gt;d6ba26816599a75310c4c263126d4b44979c7026f90e1db8e9b317d6658f3811&lt;/code&gt;. The hash value is unique to the hashed data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sherlock encrypts the Hash with his Private Key. This encrypted Hash together with a certificate containing additional information about the sender forms the Digital Signature. The reason why the Hash is encrypted and not the entire message, is that a hash function can convert an arbitrary input into a fixed length value which is usually much shorter than the original message. This saves time since hashing is much faster than signing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sherlock sends the original message and its Digital Signature to John.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;John receives the message and Digital Signature.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Whatever is encrypted with a Public Key can only be decrypted by using its corresponding Private Key and vice versa. Therefore John uses Sherlock’s Public Key to decrypt the Signature.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;John also re-calculates the Hash of the original message by applying the same hashing algorithm as Sherlock.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;John compares the Hash he calculated himself and the decrypted Hash received with Sherlock’s message.
If they’re identical he knows the message has not been tampered with during transit.
Should the message been compromised by Jim, then John would have calculated a different Hash than the encrypted Hash that Sherlock has sent along with his message.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; alt=&quot;Digital Signature&quot; src=&quot;/img/web-of-trusted-commits/digital_signature.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;creating-an-identity&quot;&gt;Creating An Identity&lt;/h2&gt;

&lt;p&gt;In order to sign his commits, Sherlock decided to use &lt;strong&gt;Gnu Privacy Guard (GPG)&lt;/strong&gt; as his weapon of choice. GPG is a complete and free implementation of the OpenPGP standard. It allows to encrypt and sign data and communication, features a versatile key management system as well as access modules for all kinds of public key directories.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Download and install GPG from the &lt;a href=&quot;https://www.gnupg.org/download/&quot;&gt;official website&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open a command prompt&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;      &lt;span class=&quot;c&quot;&gt;# Generate a new Key Pair.
&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gpg --gen-key
      &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Sherlock accepted the default &lt;code class=&quot;highlighter-rouge&quot;&gt;RSA and RSA&lt;/code&gt; key. RSA is a widely-used asymmetric encryption algorithm and is named after Ron Rivest, Adi Shamir and Len Adleman who invented it in 1977. Should you be interested in more mathematical details how this algorithm works, I can highly recommend watching &lt;a href=&quot;https://www.youtube.com/watch?v=wXB-V_Keiu8&quot;&gt;“Public Key Cryptography: RSA Encryption Algorithm”&lt;/a&gt; on YouTube.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enter the desired key size. I recommend the &lt;code class=&quot;highlighter-rouge&quot;&gt;maximum key size of 4096 bits&lt;/code&gt; because they provide far better long-term security. While the default of 2048 bits is secure now, it won’t be in the future. 1024 bit keys are already considered within the range of being breakable and while technology advances 2048 bit keys will also become breakable. Eventually 4096 bit keys will be broken too, but that will be so far in the future that better encryption algorithms will also likely have been developed by then.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sherlock accepted the &lt;code class=&quot;highlighter-rouge&quot;&gt;default expiration&lt;/code&gt; for his key.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;He entered his &lt;code class=&quot;highlighter-rouge&quot;&gt;real name and email address&lt;/code&gt;. Sherlock provided the verified email address for his GitHub account. This will make it very easy to link his account with his Public Key.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Provide a &lt;code class=&quot;highlighter-rouge&quot;&gt;secure passphrase&lt;/code&gt;. Choose wisely and be sure to remember it because else the key cannot be used and any data encrypted using that key will be lost.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Congratulations, a newly fresh Key Pair should be generated now.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;      &lt;span class=&quot;c&quot;&gt;# List all keys.
&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gpg --list-keys
        pub   4096R/90C3C3DE 2016-07-24
        uid     Sherlock H &amp;lt;sherlock.h@bakerstreet.org&amp;gt;
        sub   4096R/586B3A7B 2016-07-24
      &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Like many other developers, Sherlock is very active on GitHub and would like to link his Public Key with his account. He therefore will need to create a textual version of his Public Key. After having executed the command below, the content of the generated ‘pubkey.txt’ needs to be added to his account as described in the &lt;a href=&quot;https://help.github.com/articles/adding-a-new-gpg-key-to-your-github-account/&quot;&gt;GitHub Help pages&lt;/a&gt;. More details about distributing and registering your Public Key to a key server can be found in the chapter ‘&lt;a href=&quot;https://www.gnupg.org/gph/en/manual.html#AEN464&quot;&gt;Distributing keys&lt;/a&gt;’ of the GPG Users Guide. For other usages like encryption and decryption, please refer to &lt;a href=&quot;http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto.html&quot;&gt;GPG’s Mini HowTo&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;c&quot;&gt;# Export the Public Key to a text file.
&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gpg --armor --output pubkey.txt --export &lt;span class=&quot;s1&quot;&gt;'Sherlock H'&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;signing-your-work&quot;&gt;Signing Your Work&lt;/h2&gt;
&lt;p&gt;Once Sherlock generated his Key Pair, he can configure Git to use it for signing commits and tags. Following tools can be used to store a GPG key passphrase in a keychain so he doesn’t have to provide it every time he signs a commit: &lt;a href=&quot;https://gpgtools.org/&quot;&gt;GPG Suite&lt;/a&gt; (Mac) or &lt;a href=&quot;https://www.gpg4win.org/&quot;&gt;Gpg4win&lt;/a&gt; (Windows).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;  &lt;span class=&quot;c&quot;&gt;# Set the signing key by taking your Public Key id as parameter.
&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config --global user.signingkey 90C3C3DE

  &lt;span class=&quot;c&quot;&gt;# Automatically signs every commit.
&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config --global commit.gpgsign &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# Manually sign a commit.
&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -S -m &lt;span class=&quot;s2&quot;&gt;&quot;some commit message&quot;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# Verify whether your commit has been signed.
&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log --show-signature

    commit 81314da640320c65896a4348842d303a754f37d2
    gpg: Signature made Sun Jul 24 15:02:25 2016 CEST using RSA key ID 90C3C3DE
    gpg: Good signature from &lt;span class=&quot;s2&quot;&gt;&quot;Sherlock H &amp;lt;sherlock.h@bakerstreet.org&amp;gt;&quot;&lt;/span&gt;
    Author: Sherlock H &amp;lt;sherlock.h@bakerstreet.org&amp;gt;
    Date:   Sun Jul 24 15:01:52 2016 +0200

  &lt;span class=&quot;c&quot;&gt;# Verify all signatures during merge. If the signatures can not be verified then merge will be aborted.
&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge --verify-signatures other_branch
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Earlier this year GitHub &lt;a href=&quot;https://github.com/blog/2144-gpg-signature-verification&quot;&gt;announced&lt;/a&gt; that they now will show when commits and tags are signed and verified using any of the contributor’s GPG keys upload to GitHub. Keep your eyes open for commits and tags labeled with those green &lt;code class=&quot;highlighter-rouge&quot;&gt;verified&lt;/code&gt; badges.&lt;/p&gt;

&lt;h2 id=&quot;secure-by-design&quot;&gt;Secure-By-Design&lt;/h2&gt;
&lt;p&gt;Ordina’s &lt;a href=&quot;https://www.ordina.be/en/services-et-solutions/themas/secure-by-design/&quot;&gt;Secure-By-Design programme&lt;/a&gt; encourages to consider and take account of possible security risks as early as possible in a business process.
So follow Sherlock’s example by embedding and safeguarding security in your daily work as a developer and &lt;strong&gt;Sign Your Work!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/categories/gpg/&quot;&gt;GitHub’s Help on GPG&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gnupg.org/gph/en/manual/book1.html&quot;&gt;The GNU Privacy Handbook&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto.html&quot;&gt;GPG’s Mini HowTo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mikegerwitz.com/papers/git-horror-story&quot;&gt;“A Git Horror Story”&lt;/a&gt; by Mike Gerwitz&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=wXB-V_Keiu8&quot;&gt;“Public Key Cryptography: RSA Encryption Algorithm”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 25 Jul 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/security/2016/07/25/Web-of-trusted-commits.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/security/2016/07/25/Web-of-trusted-commits.html</guid>
        
        <category>Security</category>
        
        <category>Git</category>
        
        <category>Encryption</category>
        
        <category>Digital Signature</category>
        
        <category>Cryptography</category>
        
        
        <category>Security</category>
        
      </item>
    
      <item>
        <title>Spring I/O 16: Bridging the worlds of DDD &amp; REST</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.springio.net&quot;&gt;SpringIO 2016 in Barcelona&lt;/a&gt; was loaded with tons of interesting talks and workshops about Spring Cloud, Spring Boot, Spring Data, Microservices, REST &amp;amp; HATEOAS, Reactive programming, and many many more.
In this blogpost I will highlight Oliver Gierke’s 2 hour presentation about bridging the world of Domain Driven Design (DDD) and the world of Representational State Transfer (REST).&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Oliver Gierke&quot; src=&quot;/img/ddd-rest/oliver-gierke.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oliver Gierke (&lt;a href=&quot;https://twitter.com/olivergierke&quot;&gt;@olivergierke&lt;/a&gt;) is the lead of the Spring Data project at Pivotal and member of the JPA 2.1 expert group. He has been into developing enterprise applications and open source projects for over 10 years. His working focus is centered around software architecture, DDD, REST, and persistence technologies.&lt;/p&gt;

&lt;h2 id=&quot;domain-driven-design&quot;&gt;Domain Driven Design&lt;/h2&gt;
&lt;p&gt;DDD is an approach to developing software that meets core business objectives by providing on the one hand tactical modeling tools which include well founded patterns and concepts such as entities, repositories and factories. On the other hand DDD also facilitates strategic principles and methodologies for analyzing and modeling domains such as Bounded Contexts and Context Maps.&lt;/p&gt;

&lt;p&gt;For an in depth understanding of DDD I highly recommend reading &lt;a href=&quot;http://dddcommunity.org/book/evans_2003/&quot;&gt;“Domain Driven Design - Tackling Complexity in the Heart of Software”&lt;/a&gt; by Eric Evans (&lt;a href=&quot;https://twitter.com/ericevans&quot;&gt;@ericevans0&lt;/a&gt;). There’s also a &lt;a href=&quot;https://www.infoq.com/minibooks/domain-driven-design-quickly&quot;&gt;short, quick-readable summary and introduction&lt;/a&gt; to the fundamentals of DDD made available by InfoQ.&lt;/p&gt;

&lt;p&gt;Oliver’s talk at SpringIO 2016 highlighted a few basic DDD concepts like Entities, Value Objects, Repositories, Aggregates and Bounded Contexts.&lt;/p&gt;

&lt;h3 id=&quot;value-objects&quot;&gt;Value Objects&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Avoid Stringly typed code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Value Objects&lt;/strong&gt; are vital building blocks of DDD. They are small immutable objects that encapsulate value, validation and behaviour. You can use them to group related values together and provide functionality related to what they represent, making implicit concepts explicit.
Some common use cases for VOs are: EmailAddress, Money, ZIPCode, Status, … avoid writing these as just plain Strings!&lt;/p&gt;

&lt;p&gt;Writing VOs can be a cumbersome task but there are some source code generator frameworks out there like &lt;a href=&quot;https://projectlombok.org/&quot;&gt;Project Lombok&lt;/a&gt; and &lt;a href=&quot;https://github.com/google/auto&quot;&gt;Google’s AutoValue&lt;/a&gt; which can handle all the boilerplate code.&lt;/p&gt;

&lt;h3 id=&quot;entities--repositories&quot;&gt;Entities &amp;amp; Repositories&lt;/h3&gt;
&lt;p&gt;In contrast to Value Objects which are identified by the attributes they carry, &lt;strong&gt;Entities&lt;/strong&gt; are distinguished by their identity. Entity objects have a life cycle because their identity defines their responsibilities and associations. It is this unique identity and their mutability that sets Entities apart from Value Objects. This means that two Value Objects with the same properties should be considered the same whereas two Entities differ even if their properties match.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Aggregates form nice representation boundaries and become the key things to refer to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An &lt;strong&gt;Aggregate&lt;/strong&gt; is a cluster of closely related entities that can be treated as a single unit. The common parent of that cluster is called an &lt;strong&gt;Aggregate Root&lt;/strong&gt;. An example can be an Order and its Line Items, these will be separate objects but it is useful to treat the Order (the Aggregate Root) together with its Line Items as a single Aggregate.&lt;/p&gt;

&lt;p&gt;When trying to discover Aggregates, we should understand the model’s invariants. An invariant is a business rule that must always be consistent and usually refers to &lt;strong&gt;transactional consistency&lt;/strong&gt;. When a transaction commits then everything inside the Aggregate should be consistent and any subsequent access by any client should return the updated value. In most cases it is a best practice to modify only one Aggregate in a single transaction. For updating multiple aggregates &lt;strong&gt;eventual consistency&lt;/strong&gt; can be used. There will be an inconsistency window during which an access may return either the old or the new value but eventually all accesses will return the last updated value. The duration of the inconsistency window can be calculated based on factors like network delays, number of copies of the object, and the system load.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;Repository&lt;/strong&gt; is an abstraction over a persistence store for Aggregates. It acts like a collection by exposing methods to add and remove objects which encapsulate the actual interaction with the underlying data store. It also has elaborate query capabilities which return fully instantiated Aggregates whose attributes values meet the criteria.&lt;/p&gt;

&lt;h3 id=&quot;bounded-context&quot;&gt;Bounded Context&lt;/h3&gt;
&lt;p&gt;DDD aims to create software models based on the underlying domain. A &lt;strong&gt;Bounded Context&lt;/strong&gt; is the boundary that surrounds a part of a particular domain. This boundary isolates the model and language from other models and therefore helps reducing ambiguity and clarifying the meaning. When the boundaries are chosen well, greater decoupling between systems can be achieved which allows to easily change or replace the internals of a BC. Avoid having transactions across multiple BCs.&lt;/p&gt;

&lt;p&gt;The language that is structured around the domain model is called the &lt;strong&gt;Ubiquitous Language&lt;/strong&gt;. It is important that this language is used by all team members (developers, analysts, business stakeholders, …) to connect all the activities of the team with the software. The vocabulary on its own does not have any relevance, it only has meaning inside a certain context. For example, an Item has a different meaning in the Orders BC than in the Products BC.&lt;/p&gt;

&lt;h3 id=&quot;domain-events&quot;&gt;Domain Events&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;Domain Event&lt;/strong&gt; is an extremely powerful tool in DDD. It is a type of message that describes something that has happened in the past and that is of interest to the business. (e.g. OrderShipped, CustomerBecamePreferred, …). It is important to model Event names and its properties according to the Ubiquitous Language of the BC where they originated. When Events need to be delivered to interested parties in either a local BC or broadcasted across BCs eventually consistency is generally used.&lt;/p&gt;

&lt;h3 id=&quot;maturity-level&quot;&gt;Maturity Level&lt;/h3&gt;
&lt;p&gt;The maturity level of the use of Domain Events can be categorized into 4 levels:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Level 0&lt;/strong&gt;: no events at all
    &lt;ul&gt;
      &lt;li&gt;procedural code with just getters and setters&lt;/li&gt;
      &lt;li&gt;data just goes in and out&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Level 1&lt;/strong&gt;: explicit operations&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Level 2&lt;/strong&gt;: some operations as events
    &lt;ul&gt;
      &lt;li&gt;domain events are used as state transition&lt;/li&gt;
      &lt;li&gt;important domain events are exposed to interested parties via feeds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Level 3&lt;/strong&gt;: event sourcing - all changes to application state are stored as a sequence of events
    &lt;ul&gt;
      &lt;li&gt;only event logs and snapshots are kept (Event Store)&lt;/li&gt;
      &lt;li&gt;separation of read and write operations (CQRS)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rest&quot;&gt;REST&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;REST ≠ CRUD via HTTP. Representation design matters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;p&gt;Just like an Aggregate, a well designed &lt;strong&gt;Resource&lt;/strong&gt; should be identifiable, referable and should have a clear scope of consistency.&lt;/p&gt;

&lt;p&gt;Exposing the core domain model directly via RESTful HTTP can lead to brittle REST interfaces because each change in the domain model will be reflected in the interface. Decoupling the core domain from the REST interface has the advantage that we can make changes to the domain and then decide in each individual case whether a change is needed in the REST interface and how to map it.&lt;/p&gt;

&lt;p&gt;Also avoid using HTTP PATCH or PUT for (complex) state transitions of your business domain because you are missing out on a lot of information regarding the real business domain event that triggered this update. For example, changing a customer’s mailing address is a POST to a new “ChangeOfAddress” resource, not a PATCH or PUT of a “Customer” resource with a different mailing address field value.
This goes hand in hand with DDD’s concept of &lt;strong&gt;Event Sourcing&lt;/strong&gt; because those state transitions are domain relevant events, not just some changes to the state of some object.&lt;/p&gt;

&lt;h3 id=&quot;hateoas&quot;&gt;HATEOAS&lt;/h3&gt;
&lt;p&gt;A RESTful HTTP client can navigate from resource to resource in two different ways. Firstly by being redirected as a result of sending data for processing to the server, and secondly by following links contained in the response of the server. The latter technique is called &lt;strong&gt;Hypermedia as the Engine of Application State&lt;/strong&gt; or HATEOAS.&lt;/p&gt;

&lt;p&gt;The goal of Hypermedia is to serve not only data but also navigation information at the same time. This has a great impact on the client architecture because now we’re trading domain knowledge with protocol complexity. The client becomes dumber because it no longer needs to know business rules in a sense that its decisions are reduced to checking whether a link is present or not, e.g. whenever there’s a cancel link in the HTTP response, then display the Cancel button. This will make the client’s behavior more dynamic.
On the other hand, the client becomes smarter because it needs to handle a smarter and more comprehensive protocol.&lt;/p&gt;

&lt;h3 id=&quot;maturity-level-1&quot;&gt;Maturity level&lt;/h3&gt;
&lt;p&gt;In analogy to the maturity level of Aggregates described earlier, &lt;strong&gt;Leonard Richardson’s model&lt;/strong&gt; can be used to determine the maturity or our REST services.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Level 0&lt;/strong&gt;: Swamp of POX
    &lt;ul&gt;
      &lt;li&gt;the HTTP protocol is used to make RPC calls without indication of the application state&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Level 1&lt;/strong&gt;: Resources
    &lt;ul&gt;
      &lt;li&gt;exposure of multiple URIs and each one is an entry point to a specific resource, e.g. http://example.org/orders, http://example.org/order/1, http://example.org/order/2&lt;/li&gt;
      &lt;li&gt;use of only one single method like POST.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Level 2&lt;/strong&gt;: HTTP verbs
    &lt;ul&gt;
      &lt;li&gt;use of HTTP protocol properties (POST, GET, DELETE, …)&lt;/li&gt;
      &lt;li&gt;use of HTTP response codes, e.g. HTTP 200 (OK)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Level 3&lt;/strong&gt;: Hypermedia controls
    &lt;ul&gt;
      &lt;li&gt;refer to description earlier in this blog post.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;translating-domain-concepts-into-web-appropriate-ones&quot;&gt;Translating domain concepts into web appropriate ones&lt;/h3&gt;

&lt;table class=&quot;table table-striped&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;DDD&lt;/th&gt;
      &lt;th&gt;REST&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Aggregate Root / Repository&lt;/td&gt;
      &lt;td&gt;Collection / Item Resource&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Relations&lt;/td&gt;
      &lt;td&gt;Links&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;IDs&lt;/td&gt;
      &lt;td&gt;URIs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@Version&lt;/td&gt;
      &lt;td&gt;ETags&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Last Modified Property&lt;/td&gt;
      &lt;td&gt;Last Modified Header&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-implementation&quot;&gt;Sample implementation&lt;/h3&gt;
&lt;p&gt;Oliver also prepared a small sample implementation using Spring Boot, Spring Data and Lombok. The project is called &lt;a href=&quot;https://github.com/olivergierke/spring-restbucks&quot;&gt;Spring RESTBucks&lt;/a&gt; and is definitely worth checking out!&lt;/p&gt;

&lt;h2 id=&quot;resources-1&quot;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/olivergierke/domain-driven-design-and-rest-1&quot;&gt;“DDD &amp;amp; REST”&lt;/a&gt; (slide deck used at SpringIO 2016) by Oliver Gierke&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/olivergierke/spring-restbucks&quot;&gt;“Spring RESTBucks”&lt;/a&gt; (sample project used at SpringIO 2016) by Oliver Gierke&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://olivergierke.de/2016/04/benefits-of-hypermedia/&quot;&gt;“Benefits of hypermedia”&lt;/a&gt; by Oliver Gierke&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dddcommunity.org/book/evans_2003/&quot;&gt;“Domain Driven Design - Tackling Complexity in the Heart of Software”&lt;/a&gt; by Eric Evans&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dddcommunity.org/book/implementing-domain-driven-design-by-vaughn-vernon/&quot;&gt;“Implementing Domain Driven Design”&lt;/a&gt; by Vaughn Vernon&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.infoq.com/minibooks/domain-driven-design-quickly&quot;&gt;“Domain Driven Design Quickly”&lt;/a&gt; by InfoQ&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 10 Jul 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/conference/2016/07/10/SpringIO16-DDD-Rest.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/conference/2016/07/10/SpringIO16-DDD-Rest.html</guid>
        
        <category>Spring IO</category>
        
        <category>Spring</category>
        
        <category>Conference</category>
        
        
        <category>conference</category>
        
      </item>
    
      <item>
        <title>Spring I/O 16: Test-driven documentation with Spring REST Docs</title>
        <description>&lt;h2 id=&quot;spring-io-2016&quot;&gt;Spring IO 2016&lt;/h2&gt;
&lt;p&gt;The main focus this year was definitely about cloud, reactive and microservices.
But it is important not to forget other topics, like documentation! 
Keep calm, you don’t have to do it manually! 
Spring made it easy for us with Spring REST Docs! 
This year at Spring IO, Andy Wilkinson himself talked about why, how and when Spring REST Docs are being used. 
Last but not least, he talked about the new features that came out in version 1.1.
Since I implemented Spring REST Docs in a project, I’ll use examples from my experiences.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Andy Wilkinson&quot; src=&quot;/img/rest-docs/andywilkinson.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;andy-wilkinson&quot;&gt;Andy Wilkinson&lt;/h3&gt;

&lt;p&gt;Andy is a Spring Boot, REST docs committer and Spring IO platform lead at Pivotal. 
You can find him on Twitter using the handle &lt;a href=&quot;https://twitter.com/ankinson&quot;&gt;@ankinson&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
Writing documentation is critical in the world of development. 
It is used to make an accurate and straight declaration and intent of what the service has to offer. 
Frontend developers will be able to know which endpoints they have to call and receive the right data. 
Now, we all know it's tedious for developers to write documentation...
It's your lucky day! Spring REST Docs will make your life easier.
While you are writing tests, Spring will generate a fully HTML api guide for you and your team. 
This blog post will take you through the best practices, how to and new features in 1.1.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Why Test driven approach&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s an accurate definition of your application (no side effects)&lt;/li&gt;
  &lt;li&gt;It describes the specific HTTP request and response&lt;/li&gt;
  &lt;li&gt;It’s straight forward without repetition&lt;/li&gt;
  &lt;li&gt;It’s easier to write (no annotations like Swagger)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;markup-languages&quot;&gt;Markup languages&lt;/h3&gt;

&lt;h4 id=&quot;asciidoctor&quot;&gt;Asciidoctor&lt;/h4&gt;
&lt;p&gt;Asciidoctor is a markup language that processes plain text and produces HTML, completely styled to suit your needs.
If you are interested in writing in Asciidoctor be sure to check out the &lt;a href=&quot;http://asciidoctor.org/docs/user-manual/#introduction-to-asciidoctor&quot;&gt;manual&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;markdown-new-in-11&quot;&gt;Markdown (New in 1.1)&lt;/h4&gt;
&lt;p&gt;With the newest version of REST Docs, the developer now has more options in terms of markup languages.
The Markdown support is not as feature-rich as Asciidoctor, but Markdown can work very well when combined with existing documentation toolchains such as &lt;a href=&quot;https://github.com/tripit/slate&quot;&gt;Slate&lt;/a&gt;.
Here is a good &lt;a href=&quot;https://github.com/spring-projects/spring-restdocs/tree/master/samples/rest-notes-slate&quot;&gt;sample&lt;/a&gt; working with slate.&lt;/p&gt;

&lt;h4 id=&quot;andys-pick&quot;&gt;Andy’s pick&lt;/h4&gt;
&lt;p&gt;Asciidoctor!
Since Asciidoctor boasts more features than Markdown, it gives Asciidoctor the edge.&lt;/p&gt;

&lt;h3 id=&quot;test-tools&quot;&gt;Test Tools&lt;/h3&gt;
&lt;p&gt;When we want to use Spring REST Docs, we’ll have to use one of the test tools. 
Here are the different tools of choice. To use these tools we’ll have to initialise which document, &lt;code class=&quot;highlighter-rouge&quot;&gt;Mockmvc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectWriter&lt;/code&gt; we’ll be using.&lt;/p&gt;

&lt;h4 id=&quot;mockmvc&quot;&gt;MockMvc&lt;/h4&gt;
&lt;p&gt;A lightweight server-less documentation generation by the Spring Framework that has been the default use in Spring REST Docs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockMvc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

 &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{method-name}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockMvcBuilders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;webAppContextSetup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;documentationConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;restDocumentation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uris&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withScheme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;alwaysDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JwtFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;objectWriter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;authToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAuthToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TestUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAuthorities&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;restassured-new-11&quot;&gt;RestAssured (New 1.1)&lt;/h4&gt;
&lt;p&gt;As an alternative, you can use RestAssured to test and document your RESTful services. 
Available in V1.1, RestAssured will be more expandable than MockMvc.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestSpecification&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestSpecBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;documentationConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;restDocumentation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;andys-pick-1&quot;&gt;Andy’s pick&lt;/h4&gt;
&lt;p&gt;This time he didn’t favor one but he mentioned that RestAssured gives you more functionality and extends your possibilities with HTTP.&lt;/p&gt;

&lt;h3 id=&quot;snip-snip-snippets-everywhere&quot;&gt;Snip, snip, snippets everywhere!&lt;/h3&gt;

&lt;h4 id=&quot;default-snippet&quot;&gt;Default Snippet&lt;/h4&gt;
&lt;p&gt;Snippets are generated by the documented test method.
Once you run the test method, you can add these snippets in your Markdown/Asciidoctor file. 
Be aware, these type of snippet will fail if you don’t have the correct response/request syntax.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;snippets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;halLinks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkWithRel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;self&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's resource&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;linkWithRel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;employee&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's projection&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;responseFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee unique database identifier&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's first name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lastName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's last name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;linkedin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's linkedin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unit&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's unit&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_links&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;links to other resources&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/employees/1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;relaxed-snippet-new-in-11&quot;&gt;Relaxed Snippet (New in 1.1)&lt;/h4&gt;
&lt;p&gt;In contrast to default snippets, relaxed snippets don’t complain when something was neglected in the document.
This is an advantage when you only need to focus on a certain scenario or specific part of the response/request.&lt;/p&gt;

&lt;h4 id=&quot;reusable-snippet-new-in-11&quot;&gt;Reusable Snippet (New in 1.1)&lt;/h4&gt;
&lt;p&gt;With the newly introduced reusable snippet, you can define a snippet at the beginning of your test class and reuse it every time you need it. 
When added to your test method, you can extend it with extra variables.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// First we define a snippet for reuse&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinksSnippet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pagingLinks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;linkWithRel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;first&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The first page of results&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;linkWithRel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;last&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The last page of results&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;linkWithRel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;next&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The next page of results&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;linkWithRel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prev&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The previous page of results&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Then you perform the mockMvc and add the snippet to the document.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// As you can see, it is expendable.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;example&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pagingLinks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;linkWithRel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alpha&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Link to the alpha resource&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;linkWithRel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bravo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Link to the bravo resource&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;type-of-snippets&quot;&gt;Type of Snippets:&lt;/h2&gt;
&lt;p&gt;A snippet can be one of the following:&lt;/p&gt;

&lt;h3 id=&quot;hypermedia-links&quot;&gt;Hypermedia links&lt;/h3&gt;
&lt;p&gt;When documenting your hypermedia application, you’ll have to define your links and where they go to. 
If you have dynamic links that can disappear at one time, you can use relaxed snippets or optional so it won’t complain.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;snippets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;halLinks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkWithRel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;self&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's resource&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;linkWithRel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;employee&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's projection&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;responseFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee unique database identifier&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_links&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;links to other resources&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;request-fields&quot;&gt;Request fields&lt;/h3&gt;
&lt;p&gt;This defines the fields you request from the client.
Normally Spring REST Docs will complain when you neglect a field but with v1.1 we now have support for Relaxed Snippets.
Because I use constraints, I made my own method `withPath, this will add an extra column constraint to the documentation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 
 &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConstrainedFields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConstraintDescriptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constraintDescriptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;ConstrainedFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;constraintDescriptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConstraintDescriptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FieldDescriptor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;constraints&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringUtils&lt;/span&gt;
                     &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collectionToDelimitedString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;constraintDescriptions&lt;/span&gt;
                             &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;descriptionsForProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;. &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postEmployee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employeeRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUsernameIgnoreCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Nivek&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Keloggs&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeValueAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 
         &lt;span class=&quot;n&quot;&gt;ConstrainedFields&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConstrainedFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 
         &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;snippets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;requestFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                         &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee unique database identifier&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                         &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's first name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                         &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lastName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's last name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                         &lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
 
         &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/employees&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HAL_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isCreated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Location&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                        
      &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;response-fields&quot;&gt;Response fields&lt;/h3&gt;
&lt;p&gt;This defines the result after consultation of a resource.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;snippets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;responseFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee unique database identifier&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's first name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lastName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The employee's last name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                           &lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;requestresponse-headers&quot;&gt;Request/response headers&lt;/h3&gt;
&lt;p&gt;Defines your request/response headers in your API. 
This is useful when there are extra headers to set. 
When the request has to involve an authorization header for security reasons, you can add this header to your document.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/employees/1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                				&lt;span class=&quot;n&quot;&gt;requestHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; 
                						&lt;span class=&quot;n&quot;&gt;headerWithName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                								&lt;span class=&quot;s&quot;&gt;&quot;Basic auth credentials&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt; 
                				&lt;span class=&quot;n&quot;&gt;responseHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; 
                						&lt;span class=&quot;n&quot;&gt;headerWithName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-RateLimit-Limit&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                								&lt;span class=&quot;s&quot;&gt;&quot;The total number of requests permitted per period&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                						&lt;span class=&quot;n&quot;&gt;headerWithName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-RateLimit-Remaining&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                								&lt;span class=&quot;s&quot;&gt;&quot;Remaining requests permitted in current period&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                						&lt;span class=&quot;n&quot;&gt;headerWithName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-RateLimit-Reset&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                								&lt;span class=&quot;s&quot;&gt;&quot;Time at which the rate limit period will reset&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;request-parameters&quot;&gt;Request parameters&lt;/h3&gt;
&lt;p&gt;The parameters passed by in the uri as a query string are documented with the requestParameters.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/users?page=2&amp;amp;per_page=100&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestParameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; 
			&lt;span class=&quot;n&quot;&gt;parameterWithName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The page to retrieve&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; 
			&lt;span class=&quot;n&quot;&gt;parameterWithName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;per_page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Entries per page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
	&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
	
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;request-parts-new-in-11&quot;&gt;Request parts (new in 1.1)&lt;/h3&gt;
&lt;p&gt;The parts of a multipart request can be documenting using &lt;code class=&quot;highlighter-rouge&quot;&gt;requestParts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;RestAssured&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;given&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestParts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; 
			&lt;span class=&quot;n&quot;&gt;partWithName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The file to upload&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))))&lt;/span&gt; 
	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;multiPart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;example&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/upload&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;statusCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;what-makes-good-documentation&quot;&gt;What makes good documentation?&lt;/h2&gt;

&lt;h3 id=&quot;andys-pick-2&quot;&gt;Andy’s pick&lt;/h3&gt;
&lt;p&gt;He told us that the &lt;a href=&quot;https://developer.github.com/v3/&quot;&gt;GitHub API&lt;/a&gt; is one of the most complete and correct documentation there is. 
So if you want some guidelines, inspire yourself with this API.&lt;/p&gt;

&lt;h3 id=&quot;structure-and-accuracy&quot;&gt;Structure and accuracy&lt;/h3&gt;
&lt;p&gt;When documenting your application, your accuracy has to be 100% correct and understandable. 
The structure of your API is the representation of your application, so it better be good.&lt;/p&gt;

&lt;h3 id=&quot;cross-cutting-concerns&quot;&gt;Cross-cutting concerns&lt;/h3&gt;
&lt;p&gt;Andy put forward to document cross-cutting concerns on a general documentation level, avoiding repeating yourself in every single documented API call.
Concerns who made it to the top are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rate limiting&lt;/li&gt;
  &lt;li&gt;Authentication and authorisation&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;and-http-verbscodes-patch-vs-put&quot;&gt;And HTTP verbs/codes (PATCH VS PUT)&lt;/h4&gt;
&lt;p&gt;To be RESTfull, you’ll have to follow the guidelines in having a correct API design. 
This &lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/8/88/Http-headers-status.png&quot;&gt;picture&lt;/a&gt; shows you how and when to use the correct verbs and HTTP codes&lt;/p&gt;

&lt;h3 id=&quot;main-questions-if-you-are-working-with-resources&quot;&gt;3 main questions if you are working with resources&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What do they represent?&lt;/li&gt;
  &lt;li&gt;What kind of input do they accept?&lt;/li&gt;
  &lt;li&gt;What output do they produce?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last but not least: do not document uri’s!&lt;/p&gt;

&lt;h2 id=&quot;questions&quot;&gt;Questions&lt;/h2&gt;

&lt;h3 id=&quot;will-constraints-be-officially-added-in-future-releases&quot;&gt;Will constraints be officially added in future releases?&lt;/h3&gt;
&lt;p&gt;The constraints snippets won’t be added in the future.
This is because Andy wants to give the developers the choice of what they want to implement.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Since Spring REST Docs is so effective in bringing documentation to the fun part of development I highly recommend to use this in your future Spring applications. 
Not only you will be smiling when the API guide is being generated but the Frontend developers will get a more understandable view of the backend.&lt;/p&gt;

&lt;h2 id=&quot;sources&quot;&gt;Sources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/ankinson&quot;&gt;@ankinson&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.spring.io/spring-restdocs/docs/1.0.x/reference/html5/&quot;&gt;Spring REST Docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.github.com/v3/&quot;&gt;GitHub API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/8/88/Http-headers-status.png&quot;&gt;Verbs &amp;amp; HTTP codes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://asciidoctor.org/docs/user-manual/#introduction-to-asciidoctor&quot;&gt;Asciidoctor manual&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-restdocs/tree/master/samples/rest-notes-slate&quot;&gt;Slate example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 30 Jun 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/conference/2016/06/30/SpringIO16-Spring-Rest-Docs.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/conference/2016/06/30/SpringIO16-Spring-Rest-Docs.html</guid>
        
        <category>Spring IO</category>
        
        <category>Spring</category>
        
        <category>Conference</category>
        
        
        <category>conference</category>
        
      </item>
    
      <item>
        <title>DockerCon 2016 - What is new in Docker 1.12</title>
        <description>&lt;p style=&quot;text-align: center;&quot;&gt;
&lt;img style=&quot;max-width: 500px;&quot; src=&quot;/img/dockercon/dockercon.png&quot; alt=&quot;DockerCon 2016&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;orchestration-made-easy&quot;&gt;Orchestration Made Easy&lt;/h2&gt;

&lt;p&gt;Last week,
I tried out the new orchestration tools that were &lt;a href=&quot;https://github.com/docker/swarmkit&quot;&gt;made available on GitHub&lt;/a&gt;.
My first impressions were very positive.
The setup is easy and it works like a charm.
Today,
at DockerCon 2016,
these new orchestration tools were officially announced during the opening session.
There is also an &lt;a href=&quot;https://blog.docker.com/2016/06/docker-1-12-built-in-orchestration/&quot;&gt;official blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before we start talking about orchestration,
let’s take a step back and look at how easy it has become to set up a Swarm cluster.&lt;/p&gt;

&lt;p&gt;Creating a Swarm manager can be done with one simple command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker swarm init
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can run this command on any Docker 1.12 host.&lt;/p&gt;

&lt;p&gt;After we created the Swarm manager,
we can add additional nodes to the swarm by running the following command on other Docker hosts:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker swarm join &amp;lt;IP of manager&amp;gt;:2377
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s it.
No messing around with key-value stores or certificates.
Docker will automatically configure everything you need out-of-the-box.&lt;/p&gt;

&lt;p&gt;Under the hood,
Docker uses a &lt;a href=&quot;https://raft.github.io/raft.pdf&quot;&gt;Raft&lt;/a&gt; consensus.&lt;/p&gt;

&lt;p&gt;There are two types of nodes: &lt;strong&gt;manager&lt;/strong&gt; and &lt;strong&gt;worker&lt;/strong&gt;.
The first initial node is a manager.
When adding more nodes to the Swarm,
these nodes will be worker nodes by default.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/dockercon/swarm-overview.png&quot; alt=&quot;Overview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Manager nodes are responsible for managing the cluster’s desired state.
They do health checks and schedule tasks to keep this desired state.&lt;/p&gt;

&lt;p&gt;Worker nodes are responsible for executing tasks that are scheduled by the managers.
A worker node cannot change the desired state.
It can only take work and report back on the status.&lt;/p&gt;

&lt;p&gt;The role of a node is dynamic.
We can increment or reduce the amount of managers by promoting or demoting nodes.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker node promote &amp;lt;node-id&amp;gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker node demote &amp;lt;node-id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;services&quot;&gt;Services&lt;/h2&gt;

&lt;p&gt;Docker 1.12 introduces a new &lt;code class=&quot;highlighter-rouge&quot;&gt;service&lt;/code&gt; command.
A &lt;strong&gt;service&lt;/strong&gt; is a set of tasks that can be easily replicated.
A &lt;strong&gt;task&lt;/strong&gt; represents a workload and is executed by a container.
A task does not necessarily have to be a container,
but currently that is the only option.
In the future,
tasks can also be different types of workloads,
for example Unikernels.&lt;/p&gt;

&lt;p&gt;The service command is very similar to the &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; command
and utilizes a lot of similar flags which we are used to work with.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker service create --replicate 3 --name frontend --network mynet --publish 80:80/tcp frontend_image:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above command will create a service named &lt;em&gt;frontend&lt;/em&gt;,
add it to the &lt;em&gt;mynet&lt;/em&gt; network,
publish it to port 80,
and use the &lt;em&gt;frontend_image&lt;/em&gt; for this service.&lt;/p&gt;

&lt;p&gt;This does not only create the service,
but it defines the desired state.
The cluster constantly reconciles its state.
Upon a node failure,
the cluster will automatically self heal
and converge back to the desired state by scheduling new tasks on other nodes.&lt;/p&gt;

&lt;p&gt;You can also define a &lt;strong&gt;Swarm mode&lt;/strong&gt;.
For example,
if you wish to create a service that runs on &lt;em&gt;every node&lt;/em&gt;,
you can easily do this using the &lt;em&gt;global&lt;/em&gt; mode.
This will schedule all the tasks of a service on each node.
This is great for general services like monitoring.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker service create --mode&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;global --name prometheus prom/prometheus
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Just like we can put constraints on containers,
we can put constraints on services:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker daemon --label com.example.storage&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ssd&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker service ... --constraint com.example.storage&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ssd&quot;&lt;/span&gt; ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If we want more instances of our service,
we can scale our services up and down:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker service scale &lt;span class=&quot;nv&quot;&gt;frontend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10 &lt;span class=&quot;nv&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;20
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will change the desired state of the service(s),
and the managers will schedule new tasks (or remove existing tasks) to attain this desired state.&lt;/p&gt;

&lt;p&gt;We can also apply rolling updates to our services.
For example,
if we wish to upgrade our service to a newer version without any downtime,
we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;service update&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker service update myservice --image myimage:2.0 --update-parallellism 2 --update-delay 10s
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will update our service by replacing 2 tasks at the time,
every 10 seconds.
We can also use this command to change environment variables,
ports,
etc.&lt;/p&gt;

&lt;p&gt;As you can see,
the new &lt;code class=&quot;highlighter-rouge&quot;&gt;service&lt;/code&gt; subcommand is very powerful and easy to use.&lt;/p&gt;

&lt;h2 id=&quot;bundles&quot;&gt;Bundles&lt;/h2&gt;

&lt;p&gt;A Distributed Application Bundle (DAB) file declares a stack of services,
including the versioning and how the networking is setup.
It is a deployment artifact that can be used in your continuous integration tools,
all the way from your laptop to production.&lt;/p&gt;

&lt;p&gt;Currently,
one way to generate a &lt;em&gt;.dab&lt;/em&gt; file is by creating the bundle using Docker Compose:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker-compose bundle
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This command will generate a &lt;em&gt;.dab&lt;/em&gt; or &lt;em&gt;.dsb&lt;/em&gt; file,
which is just a JSON text file.
Here’s a partial example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;services&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;db&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;constraint:type==backend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;constraint:storage==ssd&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;postgres@sha256:f76245b04ddbcebab5bb6c28e76947f49222c99fec4aadb0bb1c24821a9e83ef&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Networks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;back-tier&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This feature is still experimental in Docker 1.12
and the specification is still being updated.
Docker invites everyone to provide feedback and hopes it will become the de facto standard for deploying applications.&lt;/p&gt;

&lt;h2 id=&quot;routing-mesh-networks&quot;&gt;Routing Mesh Networks&lt;/h2&gt;

&lt;p&gt;A problem with load balancers is the fact they are not container-aware,
but host-aware.
Load balancing containers has been hard up until now,
because you have to update the configuration of the load balancers as containers are started or stopped.
This is done by overriding the configuration file of the load balancer and restarting it,
or by updating the configuration in a distributed key-value store like etcd.&lt;/p&gt;

&lt;p&gt;Docker now has built in load balancing in the Engine using a container-aware routing mesh.
This mesh network can transparantly reroute traffic from any host to a container.
For example,
publishing a service on port 80 will reserve a Swarm wide ingress port,
so that each node will listen to port 80.
Each node will then reroute traffic to the container using DNS based service discovery.&lt;/p&gt;

&lt;p&gt;This is compatible with existing infrastructure.
External load balancer no longer need to know where the containers are running.
They can just point towards any node and the routing mesh will automatically redirect traffic.
Even though this introduces an extra hop,
it is still very efficient since it uses IPVS.&lt;/p&gt;

&lt;h2 id=&quot;security-out-of-the-box&quot;&gt;Security Out Of The Box&lt;/h2&gt;

&lt;p&gt;Docker now comes with out-of-the-box, zero-configuration security.
Docker sets up automatic certificate rotation,
TLS mutual authentication
and TLS encryption between nodes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/dockercon/swarm-tls.png&quot; alt=&quot;Security&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There is no way to turn off security.&lt;/strong&gt;
One of the core principles of Docker is simplicity.
Therefor,
security must be so simple to use,
that you don’t want to turn it off!&lt;/p&gt;

&lt;h2 id=&quot;container-health-check-in-dockerfile&quot;&gt;Container Health Check in Dockerfile&lt;/h2&gt;

&lt;p&gt;A new &lt;code class=&quot;highlighter-rouge&quot;&gt;HEALTHCHECK&lt;/code&gt; keyword is available for Dockerfiles.
This keyword can be used to define the health check of a container.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HEALTHCHECK --interval=5m --timeout=3s --retries 3 CMD curl -f http://localhost || exit 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the above example,
health checking is done every 5 minutes.
A container becomes unhealthy if the &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; command fails 3 times in a row with a 3 second timeout.&lt;/p&gt;

&lt;h2 id=&quot;new-plugin-subcommands-experimental&quot;&gt;New Plugin Subcommands (experimental)&lt;/h2&gt;

&lt;p&gt;A new &lt;code class=&quot;highlighter-rouge&quot;&gt;plugin&lt;/code&gt; subcommand has been added which allows you to easily manager Docker plugins.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker plugin install &amp;lt;plugin-name&amp;gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker plugin &lt;span class=&quot;nb&quot;&gt;enable&lt;/span&gt; &amp;lt;plugin-name&amp;gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker plugin disable &amp;lt;plugin-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Plugins also have a manifest file which describes the resources it needs.
You can compare it to how a new app on your smart phone asks for access to different resources,
like your photos or contacts.&lt;/p&gt;

&lt;h2 id=&quot;try-it-out&quot;&gt;Try It Out!&lt;/h2&gt;

&lt;p&gt;As of today,
the Docker for Mac/Windows beta,
which is already at Docker 1.12,
is open for everyone!
You can download it at &lt;a href=&quot;http://docker.com/getdocker&quot;&gt;docker.com/getdocker&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/conference/2016/06/20/whats-new-in-docker-112.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/conference/2016/06/20/whats-new-in-docker-112.html</guid>
        
        <category>DockerCon</category>
        
        <category>Docker</category>
        
        <category>Conference</category>
        
        
        <category>conference</category>
        
      </item>
    
      <item>
        <title>JS Conf Budapest Day 2</title>
        <description>&lt;h2 id=&quot;from-js-conf-budapest-with-love&quot;&gt;From JS Conf Budapest with love&lt;/h2&gt;

&lt;p&gt;This year’s edition of JS Conf Budapest was hosted at &lt;a href=&quot;http://akvariumklub.hu/&quot;&gt;Akvárium Klub&lt;/a&gt;.
Located right in the center of the city, below an actual pool, filled with water!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Akvárium Klub is more than a simple bar: it is a culture center with a wide musical repertoire from mainstream to underground.
There is always a good concert and a smashing exhibition, performance, or other event happening here, in a friendly scene, situated right in the city center.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JS Conf Budapest is hosted by the one and only &lt;a href=&quot;https://twitter.com/jaffathecake&quot;&gt;Jake Archibald&lt;/a&gt; from Google.
Day 2 started at 9 o’clock.
Enough time to drink great coffee and enjoy the breakfast.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/js-conf-budapest/js-conf-budapest-2016-collage.jpg&quot; alt=&quot;JS Conf Budapest 2016 Photo Collage&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;day-2-talks&quot;&gt;Day 2: Talks&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#suz-hinton-the-formulartic-spectrum&quot;&gt;Suz Hinton: The Formulartic Spectrum&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#oliver-joseph-ash-building-an-offline-page-for-theguardiancom&quot;&gt;Oliver Joseph Ash: Building an Offline Page for theguardian.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#nicolas-bevacqua-high-performance-in-the-critical-rendering-path&quot;&gt;Nicolás Bevacqua: High Performance in the Critical Rendering Path&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#anand-vemuri-offensive-and-defensive-strategies-for-client-side-javascript&quot;&gt;Anand Vemuri: Offensive and Defensive Strategies for Client-Side JavaScript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sam-bellen-changing-live-audio-with-the-web-audio-api&quot;&gt;Sam Bellen: Changing live audio with the web-audio-api&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rob-kerr-science-in-the-browser-orchestrating-and-visualising-neural-simulations&quot;&gt;Rob Kerr: Science in the Browser: Orchestrating and Visualising Neural Simulations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stefan-baumgartner-http2-is-coming-unbundle-all-the-things&quot;&gt;Stefan Baumgartner: HTTP/2 is coming! Unbundle all the things?!?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#claudia-hernandez-down-the-rabbit-hole-js-in-wonderland&quot;&gt;Claudia Hernández: Down the Rabbit Hole: JS in Wonderland&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lena-reinhard-works-on-my-machine-or-the-problem-is-between-keyboard-and-chair&quot;&gt;Lena Reinhard: Works On My Machine, or the Problem is between Keyboard and Chair&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;day-2-morning&quot;&gt;Day 2: Morning&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Suz Hinton&quot; src=&quot;/img/js-conf-budapest/speaker-noopkat.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;suz-hinton-the-formulartic-spectrum&quot;&gt;Suz Hinton: The Formulartic Spectrum&lt;/h3&gt;

&lt;p&gt;Suz is front-developer at Kickstarter. Member of the NodeJS hardware working group. Member of the Ember-A11y Project team.&lt;/p&gt;

&lt;p&gt;You can find her on Twitter using the handle &lt;a href=&quot;https://twitter.com/noopkat&quot;&gt;@noopkat&lt;/a&gt;. She blogs on &lt;a href=&quot;&quot;&gt;meow.noopkat.com&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
The physical world is just another binary machine.
Data creation, analysis, and corruption combined with JavaScript can make new and unexpected things.
Can you programmatically extract joy from the subjectivity it exists in?
Can it be translated into intentional forms to hook others in?
This session will gently take you along on a personal journey of how you can use code to expose new expressions of the mundane secrets we hold dear.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Why are we here&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Data &amp;amp; Art&lt;/li&gt;
  &lt;li&gt;Make a mess&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Feelings&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Warning, a lot of feelings&lt;/p&gt;

&lt;h4 id=&quot;personal-history&quot;&gt;Personal history&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1994&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Commodore 64 graphics book&lt;/li&gt;
  &lt;li&gt;Wants to make art on computer&lt;/li&gt;
  &lt;li&gt;The littlest artist&lt;/li&gt;
  &lt;li&gt;Accidental programmer (Suz didn’t really want to become a programmer)&lt;/li&gt;
  &lt;li&gt;Semicolon wars;; It doesn’t matter how you place your semicolon!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This story is inspired by the movie &lt;strong&gt;Contact by Carl Sagan&lt;/strong&gt; and makes Suz wonder: what does sound look like?&lt;/p&gt;

&lt;h4 id=&quot;formulartic-spectrum-made-up-word-art&quot;&gt;Formulartic spectrum (made up word: art)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Analysing PCM data (Pulse Code Modulation -&amp;gt; raw uncompressed data)&lt;/li&gt;
  &lt;li&gt;Resulted in only 13-ish lines of code&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;audioContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;decodeAudioData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;audioData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// just get the left ear, it's fine ;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getChannelData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// convert raw sample to within 0-255 range&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// convert HSL to an RGB array&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rgb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hslToRgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// create the pixel&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;imgData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;imgData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;imgData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;imgData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// put the pixels on a canvas element&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;putImageData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imgData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Suz talked about programming and art.
She spent a lot of time on the subway and was wondering if it would be possible to use the sounds of the subway to create art.
So she started by taking &lt;a href=&quot;http://noopkat.github.io/formulartic-spectrum/#slide-41&quot;&gt;the sound of the subway doors closing&lt;/a&gt; and analysing that part.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sampling the audio to pixels resulted in 300k pixels&lt;/li&gt;
  &lt;li&gt;Make it smaller by converting to 16-beat song&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://noopkat.github.io/iltsw/index2.html&quot;&gt;Check out the visualisation!&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The top section: Stand clear of the closing doors, please.&lt;/li&gt;
  &lt;li&gt;The mid section: white noise&lt;/li&gt;
  &lt;li&gt;The bottom section: ding dong!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Suz created a visualisation of the sampled audio that resulted in cats sitting on an subway.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cats can sit on 16 seats in subway car, each seat representing a beat&lt;/li&gt;
  &lt;li&gt;In total there were 308.728 samples which divided by 16 beats result in 19.295 samples per beat. Suz took the average of the sample values of each ‘beat’&lt;/li&gt;
  &lt;li&gt;The seats have different colors that represent the drum beat and oscillator note&lt;/li&gt;
  &lt;li&gt;When a cat is sitting on a chair, we get a guitar strum and note&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The subway example is made using:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SVG images&lt;/li&gt;
  &lt;li&gt;divs&lt;/li&gt;
  &lt;li&gt;CSS animations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://noopkat.github.io/iltsw/index5.html&quot;&gt;Check out the working example!&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;but-im-better-at-hardware&quot;&gt;But I’m better at hardware&lt;/h4&gt;

&lt;p&gt;So Suz created a &lt;a href=&quot;https://noopkat.github.io/formulartic-spectrum/#slide-64&quot;&gt;subway card with built in speaker&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id=&quot;recap&quot;&gt;Recap&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Creative coding gets you out of your comfort zone and teaches you to use tools you use everyday in another context&lt;/li&gt;
  &lt;li&gt;Art doesn’t care about your semicolons
    &lt;ul&gt;
      &lt;li&gt;Code can be messy&lt;/li&gt;
      &lt;li&gt;No one cares about semicolons, etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Art doesn’t care about perfection
    &lt;ul&gt;
      &lt;li&gt;Again, your code doesn’t really matter&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Art is about what you learned&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write messy code&lt;/li&gt;
  &lt;li&gt;Make lots of mistakes&lt;/li&gt;
  &lt;li&gt;You deserve a break from being judged&lt;/li&gt;
  &lt;li&gt;Code like no one’s watching&lt;/li&gt;
  &lt;li&gt;Don’t ‘git rebase -i’
    &lt;ul&gt;
      &lt;li&gt;Show the history behind good code&lt;/li&gt;
      &lt;li&gt;Code evolves from a first idea to a final solution.&lt;/li&gt;
      &lt;li&gt;At first, code might not be perfect&lt;/li&gt;
      &lt;li&gt;Don’t rebase to hide this fact&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://noopkat.github.io/formulartic-spectrum&quot;&gt;View the slides of Suz’s talk here!&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Oliver Joseph Ash&quot; src=&quot;/img/js-conf-budapest/speaker-oliverjash.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;oliver-joseph-ash-building-an-offline-page-for-theguardiancom&quot;&gt;Oliver Joseph Ash: Building an Offline Page for theguardian.com&lt;/h3&gt;

&lt;p&gt;Oliver is a software engineer working on the team behind theguardian.com.
Being passionate about the open web, he aims to work on software that exploits the decentralised nature of the web to solve non-trivial, critical problems.
With a strong background in arts as well as engineering, he approaches web development in its entirety: UX, performance, and functional programming are some of the things he enjoys most.&lt;/p&gt;

&lt;p&gt;You can find him on Twitter using the handle &lt;a href=&quot;https://twitter.com/OliverJAsh&quot;&gt;@OliverJAsh&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
You’re on a train to work and you open up the Guardian app on your phone.
A tunnel surrounds you, but the app still works in very much the same way as it usually would, despite your lack of internet connection, you still get the full experience, only the content shown will be stale.
If you tried the same for the Guardian website, however, it wouldn’t load at all.
Native apps have long had the tools to deal with these situations, in order to deliver rich user experiences whatever the user’s situation may be.
With service workers, the web is catching up.
This talk will explain how Oliver used service workers to build an offline page for theguardian.com.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Oliver talked about the functionality they created with service workers on The Guardian.
When offline on The Guardian, you’ll get a crossword puzzle (always the most recent) that you can play.
We summarized the key parts of the talk for you.&lt;/p&gt;

&lt;h4 id=&quot;website-vs-native&quot;&gt;Website vs native&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Native&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Content is cached&lt;/li&gt;
  &lt;li&gt;Experience:
    &lt;ul&gt;
      &lt;li&gt;offline: stale content remains&lt;/li&gt;
      &lt;li&gt;server down: stale content remains&lt;/li&gt;
      &lt;li&gt;poor connection: stale while revalidate&lt;/li&gt;
      &lt;li&gt;good connection: stale while revalidate&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Website&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Experience
    &lt;ul&gt;
      &lt;li&gt;offline: nothing&lt;/li&gt;
      &lt;li&gt;server down: nothing&lt;/li&gt;
      &lt;li&gt;poor connection: white screen of death&lt;/li&gt;
      &lt;li&gt;good connection: new content&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;how-it-works&quot;&gt;How it works&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Service workers&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Prototype built in &amp;lt; 1 day&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What is a service worker?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A script that runs in the background&lt;/li&gt;
  &lt;li&gt;Useful for features that don’t need user interaction, e.g.:
    &lt;ul&gt;
      &lt;li&gt;Listen to push events, useful for pushing notifications&lt;/li&gt;
      &lt;li&gt;Intercept and handle network requests&lt;/li&gt;
      &lt;li&gt;Future
        &lt;ul&gt;
          &lt;li&gt;Background sync&lt;/li&gt;
          &lt;li&gt;Alarms (e.g. reminders)&lt;/li&gt;
          &lt;li&gt;Geofencing&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A progressive enhancement&lt;/li&gt;
  &lt;li&gt;Trusted origins only (HTTPS only or localhost)&lt;/li&gt;
  &lt;li&gt;Chrome, Opera and Firefox stable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For now The Guardian is not yet fully on HTTPS, but they are switching at this time of writing.&lt;/p&gt;

&lt;p&gt;Some pages have service workers already enabled such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.theguardian.com/info&quot;&gt;theguardian.com/info&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.theguardian.com/science&quot;&gt;theguardian.com/science&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.theguardian.com/technology&quot;&gt;theguardian.com/technology&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.theguardian.com/business&quot;&gt;theguardian.com/business&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;how-did-they-do-it&quot;&gt;How did they do it?&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1. Create and register the service worker&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/service-worker.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can debug service workers in Chrome by selecting Service Workers under the Resources tab.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Prime the cache&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;install event: get ready!&lt;/li&gt;
  &lt;li&gt;Cache the assets needed later&lt;/li&gt;
  &lt;li&gt;Version the cache. To check if a user has an old version so you can update with newer versions&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;staticCacheName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'static'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updateCache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;caches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;staticCacheName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;'/offline-page'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;'/assets/css/main.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;'/assets/js/main.js'&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'install'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitUntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;updateCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;3. Handle requests with fetch&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fetch events
    &lt;ul&gt;
      &lt;li&gt;Default: just fetch&lt;/li&gt;
      &lt;li&gt;Override default&lt;/li&gt;
      &lt;li&gt;Intercept network requests to:
        &lt;ul&gt;
          &lt;li&gt;Fetch from the network&lt;/li&gt;
          &lt;li&gt;Read from the cache&lt;/li&gt;
          &lt;li&gt;Construct your own response&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fetch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is possible to use custom responses when using Service Workers. E.g. Use templating to construct a HTML respose from JSON.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fetch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responseBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responseOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'text/html'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;responseBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;responseOptions&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;(Im)mutable&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mutable (HTML)
    &lt;ul&gt;
      &lt;li&gt;Network first, then cache&lt;/li&gt;
      &lt;li&gt;Page -&amp;gt; service worker -&amp;gt; server or cache -&amp;gt; Page&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Immutable (assets: CSS, JS)
    &lt;ul&gt;
      &lt;li&gt;Cache first, then network&lt;/li&gt;
      &lt;li&gt;Page -&amp;gt; service worker -&amp;gt; cache or server -&amp;gt; Page&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4. Updating the crossword&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Check if the cache has been updated and if it’s not up to date, update it and delete old cache.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;isCacheUpdated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isUpdated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isUpdated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;updateCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deleteOldCaches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;offline-first&quot;&gt;Offline-first&lt;/h4&gt;

&lt;p&gt;Why should we be building with offline first?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Instantly respond with a “shell” of the page straight from cache when navigating a website&lt;/li&gt;
  &lt;li&gt;It improves the experience for users with poor connections&lt;/li&gt;
  &lt;li&gt;No more white screen of death&lt;/li&gt;
  &lt;li&gt;Show stale content whilst fetching new content&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;problems-and-caveats&quot;&gt;Problems and caveats&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Browser bugs in both Chrome and Firefox&lt;/li&gt;
  &lt;li&gt;Interleaving of versions in CDN cache&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This can be fixed with a cache manifest.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/offline-page.json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;!-- v1 --&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;assets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/v1.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;why-is-this-valuable&quot;&gt;Why? Is this valuable&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Fun&lt;/li&gt;
  &lt;li&gt;Insignificant usage due to HTTPS/browser support
    &lt;ul&gt;
      &lt;li&gt;… but plant the seed and see what happens&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Iron out browser bugs, pushes the web forward&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;“If we only use features that work in IE8, we’re condemning ourselves to live in an IE8 world.” — Nolan Lawson&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Service workers allow us to progressively enhance the experience for
    &lt;ul&gt;
      &lt;li&gt;Offline users&lt;/li&gt;
      &lt;li&gt;Users with poor connections&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;It’s easy to build an offline page&lt;/li&gt;
  &lt;li&gt;A simple offline page is a good place to start&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/oliverjash/building-an-offline-page-for-theguardian-dot-com-jsconf-budapest-may-2016&quot;&gt;The slides of Oliver’s talk can be viewed on Speaker Deck&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Nicolás Bevacqua&quot; src=&quot;/img/js-conf-budapest/speaker-nzgb.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;nicolas-bevacqua-high-performance-in-the-critical-rendering-path&quot;&gt;Nicolás Bevacqua: High Performance in the Critical Rendering Path&lt;/h3&gt;

&lt;p&gt;Nicolás loves the web. He is a consultant, a conference speaker, the author of JavaScript Application Design, an opinionated blogger, and an open-source evangelist.
He participates actively in the online JavaScript community — as well as offline in beautiful Buenos Aires.&lt;/p&gt;

&lt;p&gt;You can find him on Twitter using the handle &lt;a href=&quot;https://twitter.com/nzgb&quot;&gt;@nzgb&lt;/a&gt; and on the web under the name &lt;a href=&quot;https://ponyfoo.com/&quot;&gt;ponyfoo.com&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
This talk covers the past, present and future of web application performance when it comes to delivery optimization.
I'll start by glancing over what you're already doing -- minifying your static assets, bundling them together, and using progressive enhancement techniques.
Then I'll move on to what you should be doing -- optimizing TCP network delivery, inlining critical CSS, deferring font loading and CSS so that you don't block the rendering path, and of course deferring JavaScript.
Afterwards we'll look at the future, and what HTTP 2.0 has in store for us, going full circle and letting us forego hacks of the past like bundling and minification.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id=&quot;getting-started&quot;&gt;Getting started&lt;/h4&gt;

&lt;p&gt;Measure what is going on and see what is going on!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use the Chrome DevTools Audits.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Per-resource advice&lt;/li&gt;
  &lt;li&gt;Caching best practices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;PageSpeed Insights (Google)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/&quot;&gt;developers.google.com/speed/pagespeed/insights/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Insights for mobile&lt;/li&gt;
  &lt;li&gt;Insights for desktop&lt;/li&gt;
  &lt;li&gt;Get a rough 1-100 score&lt;/li&gt;
  &lt;li&gt;Best practices&lt;/li&gt;
  &lt;li&gt;Practical advice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;WebPageTest (webpagetest.org)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.webpagetest.org/&quot;&gt;webpagetest.org&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gives analytics and metrics where you can act on&lt;/li&gt;
  &lt;li&gt;A lot of statistics&lt;/li&gt;
  &lt;li&gt;PageSpeed Score&lt;/li&gt;
  &lt;li&gt;Waterfall View: figure out how to parallelize your download to speed up loading&lt;/li&gt;
  &lt;li&gt;Makes it easy to spot FOIT&lt;/li&gt;
  &lt;li&gt;Calculates SpeedIndex: SpeedIndex takes the visual progress of the visible page loading and computes an overall score for how quickly the content painted&lt;/li&gt;
  &lt;li&gt;Inspect every request&lt;/li&gt;
  &lt;li&gt;Analyze TCP traffic&lt;/li&gt;
  &lt;li&gt;Identify bottlenecks&lt;/li&gt;
  &lt;li&gt;Visualize progress&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;automate&quot;&gt;Automate!&lt;/h4&gt;

&lt;p&gt;But we can automate a lot!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Measure early. Measure often.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;PageSpeed Insights is available as npm module.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;npm install psi -g&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Webpagetest is also available as npm module but is a bit slower.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;npm install webpagetest-api underscore-cli&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;YSlow is available for different platforms.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;npm install grunt-yslow --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;budgets&quot;&gt;Budgets&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Enforce a performance budget&lt;/li&gt;
  &lt;li&gt;Track impact of every commit&lt;/li&gt;
  &lt;li&gt;What should I track? More info about this on &lt;a href=&quot;https://timkadlec.com/2014/11/performance-budget-metrics&quot;&gt;timkadlec.com/2014/11/performance-budget-metrics&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Milestone Timings: Load time, time to interact, “time to first tweet”&lt;/li&gt;
      &lt;li&gt;SpeedIndex: Average time at which parts of a page are displayed&lt;/li&gt;
      &lt;li&gt;Quantity based metrics: Request count, page weight, image weight …&lt;/li&gt;
      &lt;li&gt;Rule based metrics: YSlow grade, PageSpeed score, etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Budgeting can also be automated using the grunt-perfbudget plugin.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;npm install grunt-perfbudget --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;what-can-we-do-beyond-minification&quot;&gt;What can we do beyond minification?&lt;/h4&gt;

&lt;p&gt;Minification is usually the first thing developers think of when talking about optimizing your code for speed.
But what are the things we can do beyond minification?&lt;/p&gt;

&lt;p&gt;A lot of best practices on optimizing performance in your app are described in the &lt;a href=&quot;http://www.amazon.com/High-Performance-Browser-Networking-performance/dp/1449344763&quot;&gt;High Performance Browser Networking&lt;/a&gt; book written by Ilya Grigorik.&lt;/p&gt;

&lt;p&gt;For all the detailed tips and tricks we suggest to &lt;a href=&quot;https://ponyfoo.com/presentations/high-performance-in-the-critical-path&quot;&gt;view the slides for Nicolás’s talk on ponyfoo.com&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Anand Vemuri&quot; src=&quot;/img/js-conf-budapest/speaker-brownhat57.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;anand-vemuri-offensive-and-defensive-strategies-for-client-side-javascript&quot;&gt;Anand Vemuri: Offensive and Defensive Strategies for Client-Side JavaScript&lt;/h3&gt;

&lt;p&gt;Anand is Senior Application Security Consultant at nVisium&lt;/p&gt;

&lt;p&gt;You can find him on Twitter using the handle &lt;a href=&quot;https://twitter.com/brownhat57&quot;&gt;@brownhat57&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
This talk will specifically focus on the other less common client-side vulnerabilities that are not as frequently discussed.
Intentionally vulnerable applications developed with client-side JavaScript frameworks will be attacked and exploited live.
Remediation strategies will also be discussed so that developers have tools to prevent these vulnerabilities.
Through strengthening the security posture of JavaScript applications, we can take strides towards creating a more secure Internet.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id=&quot;break-the-web-together&quot;&gt;Break the web together!&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;They say the best offense is good defense.
No. The best offense is offense.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;hands-on-vulnerability-exploitation-of-medcellar&quot;&gt;Hands-on vulnerability exploitation of medcellar&lt;/h4&gt;

&lt;p&gt;Anand’s talk started by explaining the most common web application vulnerabilities that currently exist.
We’re talking about SQL Injection, Cross Site Scripting (XSS) and Cross Site Request Forgery (CSRF).
During the talk, Anand used an open source application that contains all of these vulnerabilities and which is available for you as a developer to fool around with.
The application is called ‘MedCellar’ and you can find it on &lt;a href=&quot;https://github.com/relotnek/medcellar&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;xss--csrf&quot;&gt;XSS &amp;amp; CSRF&lt;/h4&gt;

&lt;p&gt;We saw how to perform XSS attacks and CSRF attacks on the MedCellar Application.
These attacks weren’t extremely harmful at first but showed just how they could be exploited.&lt;/p&gt;

&lt;p&gt;Using the Burp Suite’s proxy, we were able to inspect all requests/responses the application was performing to get more insights in how the app actually worked.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://portswigger.net/burp/&quot;&gt;Burp Suite&lt;/a&gt; is an integrated platform for performing security testing of web applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;XSS&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;attacks users&lt;/li&gt;
  &lt;li&gt;JS Injection&lt;/li&gt;
  &lt;li&gt;Exploits can be bad, really bad&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;XSS is a serious vulnerability. It may not seem so for some people or clients but it really is!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How do we exploit apps where users have direct control&lt;/li&gt;
  &lt;li&gt;How do we attack web apps on a private network&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;CSRF Attacks!!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“Session Riding”&lt;/li&gt;
  &lt;li&gt;Attacker sends malicious URL to submit a form to a third party domain&lt;/li&gt;
  &lt;li&gt;Victim is tricked into interacting with the malicious link and performs undesirable actions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using a third party domain you can create a form (you won 1 million dollars) to perform an action like this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BeEF&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;During the talk, Anand demonstrated how to perform XSS and CSRF attacks.
However, it seemed like you were only able to hack yourself.&lt;/p&gt;

&lt;p&gt;Things got serious though, when Anand demonstrated how you could exploit these vulnerabilities way more by using a special Linux distro called Kali Linux and BeEF (Browser Exploitation Framework).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.kali.org/&quot;&gt;Kali Linux&lt;/a&gt; is a linux distro designed specifically for Penetration Testing and Ethical Hacking.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://beefproject.com/&quot;&gt;BeEF&lt;/a&gt; is a Penetration Testing tool that focusses on the browser and possible vulnerabilities in it and the applications running in it.&lt;/p&gt;

&lt;p&gt;Combining these two, Anand was able to do basically anything in the users browser and he demonstrated this by running some random audio in the users browser.
Playing audio isn’t that harmful, but you could have installed a keyLogger instead and start tracking anything the user types on his computer.
That seems to be a little bit worse than playing some audio!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When you enter a coffee shop and see someone using this, disconnect from the internet and run away as fast as you possibly can.” - Quote from Anand&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;mitigate-against-these-attacks&quot;&gt;Mitigate against these attacks&lt;/h4&gt;

&lt;p&gt;Implementation of a CSRF mitigation is Tough!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Method Interchange&lt;/li&gt;
  &lt;li&gt;Beware of CSRF Token replay&lt;/li&gt;
  &lt;li&gt;Token must be tied to the user’s session on the server&lt;/li&gt;
  &lt;li&gt;CSRF Token exposed as GET Param: Could potentially have logs or some other network traffic see the CSRF token and intercept it that way.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But, luckily for us, CSRF middleware which implements these mitigations has already been developed for us! You can find these libraries on github:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/koajs/csrf&quot;&gt;koajs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hapijs/crumb&quot;&gt;crumb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/expressjs/csurf&quot;&gt;csurf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;key-takeaways&quot;&gt;Key takeaways&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;App Sec vulnerabilities can be used in combination&lt;/li&gt;
  &lt;li&gt;No state changing operations should be GET requests&lt;/li&gt;
  &lt;li&gt;Make sure the CSRF token is cryptographically secure
    &lt;ul&gt;
      &lt;li&gt;Random !== Cryptographically secure&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CSRF Middleware Saves Lives!!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oh… And&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cross Origin Resource sharing (CORS)
    &lt;ul&gt;
      &lt;li&gt;Access-control-Allow-Origin: * IS BAD!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;day-2-afternoon&quot;&gt;Day 2: afternoon&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Sam Bellen&quot; src=&quot;/img/js-conf-budapest/speaker-sambego.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;sam-bellen-changing-live-audio-with-the-web-audio-api&quot;&gt;Sam Bellen: Changing live audio with the web-audio-api&lt;/h3&gt;

&lt;p&gt;Sam is developer at Made with love.&lt;/p&gt;

&lt;p&gt;You can find him on Twitter using the handle &lt;a href=&quot;https://twitter.com/sambego&quot;&gt;@sambego&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
As a guitar player, I usually use some effects pedals to change the sound of my guitar.
I started wondering: “What if, it would be possible to recreate these pedals using the web-audio-api?”.
Well, it turns out, it is entirely possible to do so.
This talk takes you through the basics of the web-audio-api and explains some of the audio-nodes I’ve used to change the live sound of my guitar.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Presentation can be found here: https://github.com/Sambego/pedalboard-presentation&lt;/p&gt;

&lt;h4 id=&quot;get-the-sound-in-the-browser&quot;&gt;Get the sound in the browser&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Create new audio context.&lt;/li&gt;
  &lt;li&gt;Get the audio input of your computer: navigator.getUserMedia()&lt;/li&gt;
  &lt;li&gt;Create inputNode from the media stream we just fetched&lt;/li&gt;
  &lt;li&gt;Connect the inputNode to the audiocontext.destination&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;add-effects-to-the-sound&quot;&gt;Add effects to the sound&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Volume pedal&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a gainNode = audioContext.createGain();&lt;/li&gt;
  &lt;li&gt;Value of gain is 0 tot 1&lt;/li&gt;
  &lt;li&gt;So for now we have input -&amp;gt; gain -&amp;gt; output.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Distortion pedal&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make the audio sound rough.&lt;/li&gt;
  &lt;li&gt;Create a waveShaperNode = audioContext.createWaveShaper();&lt;/li&gt;
  &lt;li&gt;Set a value&lt;/li&gt;
  &lt;li&gt;So for now we have input -&amp;gt; Waveshaper -&amp;gt; output.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Delay pedal&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;delayNode = audioContext.createDelay();&lt;/li&gt;
  &lt;li&gt;Set a value delayNode.delayTime.value = 1 (1 second)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Reverb pedal&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Some kind of echo on your sound&lt;/li&gt;
  &lt;li&gt;convolverNode = audioContext.createConvolver()&lt;/li&gt;
  &lt;li&gt;Load impulse-response-file and do some crazy stuff&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;How to create an oscilator&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;oscilatorNode = audioContext.createOscilator()&lt;/li&gt;
  &lt;li&gt;Set Hz value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;web-midi-api&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Request access and start doing things with it&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Rob Kerr&quot; src=&quot;/img/js-conf-budapest/speaker-robrkerr.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rob-kerr-science-in-the-browser-orchestrating-and-visualising-neural-simulations&quot;&gt;Rob Kerr: Science in the Browser: Orchestrating and Visualising Neural Simulations&lt;/h3&gt;

&lt;p&gt;Rob works at IBM Research Australia.&lt;/p&gt;

&lt;p&gt;You can find him on Twitter using the handle &lt;a href=&quot;https://twitter.com/robrkerr&quot;&gt;@robrkerr&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
My talk will show how the old-school, computationally-heavy software used in science can be set free using the centralized power of cloud resources and the ubiquity of the browser.
We'll see real-time, publicly-broadcast, simulations of the electrical activity in brain cells, visualised in 3D using Javascript.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id=&quot;neuroscience-introduction&quot;&gt;Neuroscience introduction&lt;/h4&gt;

&lt;p&gt;The topic for this talk was quite some heavy material.
However, Rob managed to give us a quick, super high-level, introduction to neuroscience and more specifically an introduction to how neurons actually work.&lt;/p&gt;

&lt;p&gt;Very High level, there are 3 parts in a neuron:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dendrites&lt;/li&gt;
  &lt;li&gt;Neuron body (Soma)&lt;/li&gt;
  &lt;li&gt;Axons.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Neurons receive electrical signals through their dendrites, and transmit those to the neuron body, called the Soma.
From the neuron body, new electrical signals travel to other neurons.
Sending electrical current from one neuron to another is being done through its axons.
So the axons actually send electrical signals to other neurons and those other neurons receive these signals trough their dendrites.&lt;/p&gt;

&lt;p&gt;A better, more thorough explanation of neurons is being described on &lt;a href=&quot;https://en.wikipedia.org/wiki/Neuron&quot;&gt;Wikipedia&lt;/a&gt;, but we needed a super simplified explanation of neurons and their main components to further explain what Rob showed us.&lt;/p&gt;

&lt;h4 id=&quot;science-in-the-browser&quot;&gt;Science in the browser&lt;/h4&gt;

&lt;p&gt;Neurons and their main components can be ‘encoded’ in special files .swc files.
These files contain multiple records with an ID, X, Y, Z, Radius and Parent-link.
Using all the records and their properties allows you to visually represent the neurons.&lt;/p&gt;

&lt;p&gt;There’s already an online repository containing these encoded neurons which you can find &lt;a href=&quot;http://www.neuromorpho.org/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, what does all of this have to do with the browser or JS or anything you would expect at JSConf?
Well, while he was working on his Ph.D. thesis, he started playing around with JS and its related technologies.
And he continued to do so since then, all in function of the neuroscience domain.&lt;/p&gt;

&lt;p&gt;As we saw earlier, there’s already a webpage where you can upload swc files with neuron data to visually represent these, but these are rather static images.
Instead, Rob decided to create a platform which can also simulate the behaviour of such a neuron when you trigger it with electrical current on its dendrites.&lt;/p&gt;

&lt;h4 id=&quot;technology-stack&quot;&gt;Technology stack&lt;/h4&gt;

&lt;p&gt;Rob used a combination of tools and technologies to build the platform.
Together with his colleagues at IBM research Australia, they built an entire Cloud platform that could perform these complex simulations.&lt;/p&gt;

&lt;p&gt;On their IBM Bluemix cloud they run Docker Containers running the algorithm that performs the neuron simulations.
The algorithm is written in C and is based on mathematic formula which is shown in the below image.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hodgkin-Huxley Model of the Squid Giant Axon&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Hodgkin-Huxley Model of the Squid Giant Axon&quot; src=&quot;/img/js-conf-budapest/Hodgkin-Huxley_equation.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The web application used to render the neurons used a combination of tools, most importantly:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Webgl: Web Graphics API. Javascript API for rendering interactive 3D graphics.&lt;/li&gt;
  &lt;li&gt;three.js: A Javascript 3D library that uses WebGL.&lt;/li&gt;
  &lt;li&gt;D3.js: Javascript library for visualizing data using HTML, SVG and CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-tool-in-action&quot;&gt;The tool in action&lt;/h4&gt;

&lt;p&gt;In the below video you can see what the tool looks and animations look like:&lt;/p&gt;

&lt;div class=&quot;responsive-embed-youtube&quot;&gt;
	&lt;iframe src=&quot;https://www.youtube.com/embed/z_7c6JjicGE?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;The tool enables researchers to replay a scenario where a certain spike is triggered in a branch of the neuron.
This gives scientists a lot of knowledge and insights about how neurons behave.&lt;/p&gt;

&lt;p&gt;Rob gave a really entertaining talk with some really cool visuals of neurons in action.
He introduced us to just the right amount of neuroscience to be able to follow what he was actually doing and showing!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Stefan Baumgartner&quot; src=&quot;/img/js-conf-budapest/speaker-ddprrt.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;stefan-baumgartner-http2-is-coming-unbundle-all-the-things&quot;&gt;Stefan Baumgartner: HTTP/2 is coming! Unbundle all the things?!?&lt;/h3&gt;

&lt;p&gt;Stefan is a web developer/web lover based in Linz, Austria.
Currently working at Ruxit, making the web a faster place.
He is also a co-host at the German Workingdraft podcast.&lt;/p&gt;

&lt;p&gt;You can find him on Twitter using the handle &lt;a href=&quot;https://twitter.com/ddprrt&quot;&gt;@ddprrt&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
In this session, we will explore the major features of the new HTTP version and its implications for todays JavaScript developers.
We will critically analyze recommendations for deployment strategies and find out which impact they have on our current applications, as well as on the applications to come.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id=&quot;unbundle-all-the-things&quot;&gt;Unbundle all the things?&lt;/h4&gt;

&lt;p&gt;Everybody is saying to not bundle things, minify things, concatenate things, … when moving to HTTP/2.&lt;/p&gt;

&lt;p&gt;Tools like Browserify, Webpack, etc. would all become obsolete.
But why? We need to question this and see if this is actually the truth.&lt;/p&gt;

&lt;h4 id=&quot;the-best-request-is-a-request-not-being-made&quot;&gt;The best request is a request not being made&lt;/h4&gt;

&lt;p&gt;In HTTP version 1.1 we need to do as few requests possible. Pages like Giphy have 40 TCP connection at a single time!&lt;/p&gt;

&lt;p&gt;HTTP/2 was made to prevent the bad parts of HTTP/1.1&lt;/p&gt;

&lt;p&gt;HTTP/2 allows a connection to stay open and transfer multiple things over the same connection.
No need for handshakes for each file that needs to be transferred from the server to the client.&lt;/p&gt;

&lt;h4 id=&quot;rule-of-thumb&quot;&gt;Rule of thumb&lt;/h4&gt;

&lt;p&gt;A slow website on HTTP/1.1 will still be a slow website on HTTP/2.
You need to perform optimisations no matter what.&lt;/p&gt;

&lt;p&gt;Most important part: &lt;strong&gt;do not block the render path&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Only serve what you really need.
Again, &lt;strong&gt;the best request is a request not being made&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;so-unbundle-all-the-things&quot;&gt;So, unbundle all the things?&lt;/h4&gt;

&lt;p&gt;So in some way, yes unbundle all the things.
Because you don’t want to transfer bytes you don’t need, but there is something more to it.
This article about packaging will get you on the way: &lt;a href=&quot;http://engineering.khanacademy.org/posts/js-packaging-http2.htm&quot;&gt;engineering.khanacademy.org/posts/js-packaging-http2.htm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Create a lot of modules to update as flexible as possible and as small as possible.
When using ES6 we can also use Treeshaking.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create independent, exchangeable components&lt;/li&gt;
  &lt;li&gt;Create small, detachable bundles&lt;/li&gt;
  &lt;li&gt;Think about long-lasting applications and frequently of change&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use tools, not rules!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Claudia Hernández&quot; src=&quot;/img/js-conf-budapest/speaker-koste4.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;claudia-hernandez-down-the-rabbit-hole-js-in-wonderland&quot;&gt;Claudia Hernández: Down the Rabbit Hole: JS in Wonderland&lt;/h3&gt;

&lt;p&gt;Claudia is Mexican front-end developer.&lt;/p&gt;

&lt;p&gt;You can find her on Twitter using the handle &lt;a href=&quot;https://twitter.com/koste4&quot;&gt;@koste4&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
What even makes sense in Javascript?

For a language originally created in 10 days it surely has a lot of quirks and perks many JS developers are unaware of.
Sometimes, it might even seem like we fell down the rabbit hole only to find that NaN is actually a Number, undefined can be defined, +!![] equals 1, Array.sort() may not work as you suspected and so much other nonsense that can trip any JS developer’s mind.

This talk is a collection of Javascript’s oddities and unexpected behaviors that hopefully will prevent some future headaches and help understand the language that we all love in a more deeper and meaningful way.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This talk by Claudia was so much fun! We didn’t write down anything because it was virtually impossible to do. You need to see this with your own eyes!&lt;/p&gt;

&lt;p&gt;You can view the slides on &lt;a href=&quot;https://speakerdeck.com/claudiahdz/down-the-rabbit-hole-javascript-in-wonderland&quot;&gt;Speaker Deck&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Be sure to check out &lt;a href=&quot;http://www.jsfuck.com/&quot;&gt;jsfuck.com&lt;/a&gt; for some fun times and &lt;a href=&quot;https://github.com/fasttime/jquery-screwed&quot;&gt;jQuery Screwed&lt;/a&gt; to get an idea of what you can actually do with JavaScript quirks.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Lena Reinhard&quot; src=&quot;/img/js-conf-budapest/speaker-lrnrd.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;lena-reinhard-works-on-my-machine-or-the-problem-is-between-keyboard-and-chair&quot;&gt;Lena Reinhard: Works On My Machine, or the Problem is between Keyboard and Chair&lt;/h3&gt;

&lt;p&gt;Lena is teamleader, consultant and photographer.&lt;/p&gt;

&lt;p&gt;You can find her on Twitter using the handle &lt;a href=&quot;https://twitter.com/lrnrd&quot;&gt;@lrnrd&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
In this talk we will look at the many facets that affect our decision making and interactions, and work out how we can change for the better.
Together, we will take a look at the effects that our software has on the daily lives of the thousands of people who are using it.
You’ll learn what you can do as an individual to support change into a positive direction, and how you can help debug this system and make a difference in the tech industry.
You’ll leave knowing about practical things you can do in your daily life to make the tech industry a better, more inclusive and diverse environment that is a better place for everyone.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id=&quot;code-debugging&quot;&gt;Code debugging&lt;/h4&gt;

&lt;p&gt;Debugging can be hard and it becomes harder when working with complex software.&lt;/p&gt;

&lt;p&gt;Spaghetti code is difficult to read and maintain.
It can be code that is not organised, has lots of dependencies and is difficult to debug.&lt;/p&gt;

&lt;h4 id=&quot;the-tech-industry-is-bugged&quot;&gt;The Tech Industry is bugged&lt;/h4&gt;

&lt;p&gt;A lot of people already contributed to the tech industry.
It has grown very fast and has many flaws.&lt;/p&gt;

&lt;p&gt;That’s why we need to have a look at it and try to fix the defects.&lt;/p&gt;

&lt;h4 id=&quot;understanding-ourselves&quot;&gt;Understanding ourselves&lt;/h4&gt;

&lt;p&gt;To be able to fix this we need to understand ourselves. Our flaws, limitations, …&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We are privileged and need to understand that.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Privilege: The human version of “works on my machine”.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Privilege is sitting in your comfy home and not knowing a big thunderstorm is coming that could harm people.&lt;/p&gt;

&lt;p&gt;Privilege is being able to stand up when attending a standup and not having to sit because you are disabled.&lt;/p&gt;

&lt;h4 id=&quot;we-are-biased&quot;&gt;We are biased&lt;/h4&gt;

&lt;p&gt;We need to understand we are biased.
More often we are being objective and often that is not OK.&lt;/p&gt;

&lt;p&gt;We all have biases and we need to realise and understand.&lt;/p&gt;

&lt;h4 id=&quot;empathy&quot;&gt;Empathy&lt;/h4&gt;

&lt;p&gt;We need to understand that we need to be empathetic.
Empathy is the right direction.&lt;/p&gt;

&lt;h4 id=&quot;creativity&quot;&gt;Creativity&lt;/h4&gt;

&lt;p&gt;Creativity is necessary to design and build good software.&lt;/p&gt;

&lt;h4 id=&quot;diversity&quot;&gt;Diversity&lt;/h4&gt;

&lt;p&gt;And so is diversity and understanding each other.&lt;/p&gt;

&lt;h4 id=&quot;inclusion&quot;&gt;Inclusion&lt;/h4&gt;

&lt;p&gt;Inclusion means all people in the group are respected for who they are.
The lack of inclusion and diversity is a real problem in our industry.&lt;/p&gt;

&lt;h4 id=&quot;the-tech-industry&quot;&gt;The Tech Industry&lt;/h4&gt;

&lt;p&gt;Let’s look at some key points within our industry.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Company&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lack of diversity&lt;/li&gt;
  &lt;li&gt;Lack of inclusion&lt;/li&gt;
  &lt;li&gt;Harassment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Society&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Racism&lt;/li&gt;
  &lt;li&gt;Patriarchy&lt;/li&gt;
  &lt;li&gt;Capitalism&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tech industry&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lack of diversity&lt;/li&gt;
  &lt;li&gt;Lack of inclusion&lt;/li&gt;
  &lt;li&gt;Harassment&lt;/li&gt;
  &lt;li&gt;Racism&lt;/li&gt;
  &lt;li&gt;Patriarchy&lt;/li&gt;
  &lt;li&gt;Capitalism&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;software-can-help-people&quot;&gt;Software can help people&lt;/h4&gt;

&lt;p&gt;Our software can help people. A screenreader, accessibility, …&lt;/p&gt;

&lt;h4 id=&quot;but-can-also-ruin-lives&quot;&gt;But can also ruin lives&lt;/h4&gt;

&lt;p&gt;Our software is racist.
Our software (tools like Siri or Cortana or Snapchat) does not correctly recognise skin color, alters skin color and does not recognise harassment or racism.
Animations in software can trigger panic attacks or epileptic attacks.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We have a collective responsibility and need to take that very seriously.
Technology and our code is not neutral. Our work is political and has consequences on lives.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;debugging-the-system&quot;&gt;Debugging the system&lt;/h4&gt;

&lt;p&gt;Change starts with you, starts with all of us.
What can we do to debug the system?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Educate yourself&lt;/strong&gt;, about systemic issues and oppression&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Practice empathy&lt;/strong&gt;, because we need it to be good designers and developers&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Work on Humility&lt;/strong&gt;, because none of us are Unicorns&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Understanding Privileges&lt;/strong&gt;, and use them for good&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Address biases&lt;/strong&gt;, and establish policies to address them&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Listen&lt;/strong&gt;, and actively look for voices outside of your networks&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Amplify others’ voices&lt;/strong&gt;, and speak less&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Work on diversity&lt;/strong&gt;, because it’s our moral obligation&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Work on inclusion&lt;/strong&gt;, to make spaces welcoming and safe&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Give&lt;/strong&gt;, our knowledge, time, technical skills, money&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Work on being allies&lt;/strong&gt;, constantly&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Quite a talk on some serious matter to close the second day of JS Conf Budapest.&lt;/p&gt;

&lt;p&gt;Have you experienced these things yourself in the tech industry?&lt;/p&gt;

&lt;p&gt;Have you contributed to debugging the tech industry?&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;day-2-conclusion&quot;&gt;Day 2: Conclusion&lt;/h2&gt;

&lt;p&gt;Just like day 1, day 2 was one hell of a nice day packed full of great speakers and a superb atmosphere!&lt;/p&gt;

&lt;p&gt;The talks by &lt;a href=&quot;#rob-kerr-science-in-the-browser-orchestrating-and-visualising-neural-simulations&quot;&gt;Rob Kerr&lt;/a&gt; and the one of &lt;a href=&quot;#lena-reinhard-works-on-my-machine-or-the-problem-is-between-keyboard-and-chair&quot;&gt;Lena Reinhart&lt;/a&gt; surely got the most attention.
Rob’s talk because it was impressive to see what they achieved over a course of 2 years to visualise neurons in the browser.
Lena’s talk because we got slammed in the face about how faulty the tech industry is at the moment.&lt;/p&gt;

&lt;p&gt;This year’s edition was, just like the one we attended last year a very good one!
It is nice to see such a diverse community that cares about technology and people.
This is something we should be very proud of.&lt;/p&gt;

&lt;p&gt;A big thank you to the organisers and volunteers to make JS Conf Budapest what it is!&lt;/p&gt;

&lt;h3 id=&quot;find-us-on-the-family-photo&quot;&gt;Find us on the family photo!&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/js-conf-budapest/js-conf-budapest-2016-family-photo.jpg&quot; alt=&quot;JS Conf Budapest 2016 Family Photo&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;next-year&quot;&gt;Next year&lt;/h3&gt;

&lt;p&gt;In 2017, JS Conf Budapest will be held on the 14th and 15th of September.&lt;/p&gt;

&lt;p&gt;We will surely be present for what will be another great edition! See you next year!&lt;/p&gt;

&lt;h3 id=&quot;js-conf-budapest-2016-day-1&quot;&gt;JS Conf Budapest 2016, day 1&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/conference/2016/05/12/JS-Conf-Budapest-day-1.html&quot;&gt;Read our full report on day 1 of JS Conf Budapest here!&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 13 May 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/conference/2016/05/13/JS-Conf-Budapest-day-2.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/conference/2016/05/13/JS-Conf-Budapest-day-2.html</guid>
        
        <category>JS Conf Budapest</category>
        
        <category>JavaScript</category>
        
        <category>Conference</category>
        
        
        <category>conference</category>
        
      </item>
    
      <item>
        <title>JS Conf Budapest Day 1</title>
        <description>&lt;h2 id=&quot;from-js-conf-budapest-with-love&quot;&gt;From JS Conf Budapest with love&lt;/h2&gt;

&lt;p&gt;This year’s edition of JS Conf Budapest was hosted at &lt;a href=&quot;http://akvariumklub.hu/&quot;&gt;Akvárium Klub&lt;/a&gt;.
Located right in the center of the city, below an actual pool, filled with water!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Akvárium Klub is more than a simple bar: it is a culture center with a wide musical repertoire from mainstream to underground.
There is always a good concert and a smashing exhibition, performance, or other event happening here, in a friendly scene, situated right in the city center.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JS Conf Budapest is hosted by the one and only &lt;a href=&quot;https://twitter.com/jaffathecake&quot;&gt;Jake Archibald&lt;/a&gt; from Google.
After waiting in line at 8 o’clock in the morning to get our badges, we were welcomed at the main hall where some companies hosted stands.&lt;/p&gt;

&lt;p&gt;In another space after the main hall, tables were nicely dressed and people could have breakfast.
When going downstairs to the right of the main hall, we entered the room where the talks would be given.&lt;/p&gt;

&lt;p&gt;For the coffee lovers, professional baristas served the best coffee possible.
With a nice heart drawn on top if it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/js-conf-budapest/js-conf-budapest-2016-collage.jpg&quot; alt=&quot;JS Conf Budapest 2016 Photo Collage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At 9 o’clock the conference would officially start so we went downstairs.
After taking our seat, we played the waiting game and all of a sudden, we got this nice intro made with blender and three.js! Check it out for yourself!&lt;/p&gt;

&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 55%;&quot;&gt;
&lt;iframe src=&quot;http://usefulthink.com/jsconf.bp-intro/&quot; width=&quot;100%&quot; height=&quot;100%;&quot; style=&quot;position: absolute; left: 0; top: 0; bottom: 0; right: 0;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;day-1-talks&quot;&gt;Day 1: Talks&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#laurie-voss-what-everybody-should-know-about-npm&quot;&gt;Laurie Voss: What everybody should know about npm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#safia-abdalla-the-hitchhikers-guide-to-all-things-memory-in-javascript&quot;&gt;Safia Abdalla: The Hitchhiker’s Guide to All Things Memory in Javascript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#yan-zhu-encrypt-the-web-for-0&quot;&gt;Yan Zhu: Encrypt the web for $0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#denys-mishunov-why-performance-matters&quot;&gt;Denys Mishunov: Why performance matters&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#princiya-sequeira-natural-user-interfaces-using-javascript&quot;&gt;Princiya Sequeira: Natural user interfaces using JavaScript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#maurice-de-beijer-event-sourcing-your-react-redux-applications&quot;&gt;Maurice de Beijer: Event-sourcing your React-Redux applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rachel-watson-the-internet-of-cats&quot;&gt;Rachel Watson: The Internet of Cats&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#nick-hehr-the-other-side-of-empathy&quot;&gt;Nick Hehr: The other side of empathy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;day-1-morning&quot;&gt;Day 1: Morning&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Suz Hinton&quot; src=&quot;/img/js-conf-budapest/speaker-seldo.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;laurie-voss-what-everybody-should-know-about-npm&quot;&gt;Laurie Voss: What everybody should know about npm&lt;/h3&gt;

&lt;p&gt;Laurie is CTO at npm Inc.&lt;/p&gt;

&lt;p&gt;You can find him on Twitter using the handle &lt;a href=&quot;https://twitter.com/seldo&quot;&gt;@seldo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The presentation he gave can be found a &lt;a href=&quot;http://slides.com/seldo/jsconf-budapest&quot;&gt;slides.com/seldo/jsconf-budapest&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
npm is six years old, but 80% of npm users turned up in the last year.
That's a lot of new people! Because of that, a lot of older, core features aren't known about by the majority of npm users.
This talk is about how npm expects you to use npm, and the commands and workflows that can make you into a power user.
There will be lots of stuff for beginners, and definitely some tricks that even most pros don't know.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id=&quot;how-does-npm-look-up-packages&quot;&gt;How does npm look up packages?&lt;/h4&gt;
&lt;p&gt;In contrast to what most people think, npm does not download its modules from GitHub or other version control systems.
They would not like it that such an amount of data is transferred on a daily basis.&lt;/p&gt;

&lt;p&gt;In short npm does this: You -&amp;gt; CLI -&amp;gt; Registry.
Let’s dive in.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First, npm will take a look at your local cache and see if the package your are looking for is present.&lt;/li&gt;
  &lt;li&gt;Next, it will resort to the CDN network and use the server which is the closest as possible to your position.&lt;/li&gt;
  &lt;li&gt;Finally, if npm can’t find the package in local cache or the CDN network, it will look it up in the registry. The registry is a set of servers all around the world and it will try to match the best version that you are looking for.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;eaccess-error&quot;&gt;EACCESS error&lt;/h4&gt;
&lt;p&gt;A lot of people have issues with EACCESS errors because they used sudo to install things.
The easy solution is to always keep on using sudo, BUT we can &lt;a href=&quot;https://docs.npmjs.com/getting-started/fixing-npm-permissions&quot;&gt;easily fix npm permission issues&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;packagejson&quot;&gt;package.json&lt;/h4&gt;
&lt;p&gt;Don’t write your &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; yourself. Let NPM do it!
It will always do it better. Use &lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt;, which will ask you some basic questions and generate &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; for you.&lt;/p&gt;

&lt;h4 id=&quot;scopes&quot;&gt;Scopes&lt;/h4&gt;
&lt;p&gt;A new feature in npm is scopes.
These are modules that are “scoped” under an organization name that begins with &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;.
Scopes can be public and private.
Here is how to use scopes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;npm init --scope&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;username
npm install @myusername/mypackage
require&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'@myusername/mypackage'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;npm-initjs&quot;&gt;npm-init.js&lt;/h4&gt;
&lt;p&gt;To extend the &lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt; command, it is possible to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;npm-init.js&lt;/code&gt; file.
This file is a module that will be loaded by the &lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt; command and will provide basic configurations for the setup.
By default the file is placed in the root of your project: &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.npm-init.js&lt;/code&gt;.
You can use &lt;a href=&quot;https://github.com/npm/promzard&quot;&gt;PromZard&lt;/a&gt; to ask questions to the user and perform logic based on the answers.
Remember that &lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt; can always be re-run.&lt;/p&gt;

&lt;h4 id=&quot;why-add-stuff-in-devdependencies&quot;&gt;Why add stuff in devDependencies.&lt;/h4&gt;
&lt;p&gt;Simple: because production will install faster! A lot of people don’t tend to do this, so please do this!
When using this you can simple run the command below on production and be done with it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;npm install --production&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;bundled-dependencies&quot;&gt;Bundled dependencies&lt;/h4&gt;
&lt;p&gt;One of the biggest problems right now with Node.js is how fast it is changing.
This means that production systems can be very fragile and an &lt;code class=&quot;highlighter-rouge&quot;&gt;npm update&lt;/code&gt; can easily break things.
Using &lt;code class=&quot;highlighter-rouge&quot;&gt;bundledDependencies&lt;/code&gt; is a way to get round this issue by ensuring that you will always deliver the correct dependencies no matter what else may change.
You can also use this to bundle up your own, private bundles and deliver them with the install.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;npm install --save --save-bundle&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;offline-installs&quot;&gt;Offline installs&lt;/h4&gt;
&lt;p&gt;A way to prevent npm to look up the registry, and ensure local installs, is by adding the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;--cache-min&lt;/code&gt; and to set it to a high value such as 999999.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;npm install --cache-min 999999&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;run-scripts&quot;&gt;Run scripts&lt;/h4&gt;
&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; it is possible to define default run scripts as shown below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;npm start
npm stop
npm restart
npm &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course it is also possible to define your own run scripts.
You can run these scripts like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;npm run &amp;lt;anything&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;run-scripts-get-devdependencies-in-path&quot;&gt;Run scripts get devDependencies in path&lt;/h4&gt;
&lt;p&gt;Don’t force users to install global tools. That is just not cool.
This way you can prevent to get conflicts over global tools, because different projects can use different versions.&lt;/p&gt;

&lt;h4 id=&quot;semver-for-packages&quot;&gt;SemVer for packages&lt;/h4&gt;
&lt;p&gt;npm uses Semantic Versioning, which is a standard a lot of projects use to communicate what kind of changes are in a release.
It’s important to communicate what kinds of changes are in a release because sometimes those changes will break the code that depends on the package.
Let’s take a look at an example.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;1.5.6
Breaking Major . Feature Minor . Fix Patch&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is quite obvious, right?&lt;/p&gt;

&lt;p&gt;npm allows you to change the version (and to add a comment) by using the commands below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;npm version minor
npm version major
npm version patch
npm version major -m &lt;span class=&quot;s2&quot;&gt;&quot;Bump to version %s&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;microservices-architecture&quot;&gt;Microservices architecture&lt;/h4&gt;
&lt;p&gt;When working with a microservices architecture, it is possible to work with multiple packages for your services.
This can be done by using the link function within npm.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;npm link &amp;lt;dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s say we have a package named Alice and we have other packages that depend on this package.
We can run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm link&lt;/code&gt;.
In packages that depend on Alice, say Bob, we simply run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm link alice&lt;/code&gt;.
All changes made in Alice will be immediately available in Bob without performing any &lt;code class=&quot;highlighter-rouge&quot;&gt;npm update&lt;/code&gt; commands.&lt;/p&gt;

&lt;h4 id=&quot;unpublish-a-package&quot;&gt;Unpublish a package&lt;/h4&gt;
&lt;p&gt;Before the &lt;a href=&quot;http://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm&quot;&gt;recent events&lt;/a&gt; where a package called left-pad got pulled from npm and broke the internet, it was possible to unpublish a package just like that by using &lt;code class=&quot;highlighter-rouge&quot;&gt;npm unpublish&lt;/code&gt;.
Now this is restricted after the package has been online for 24 hours.
To really unpublish the package you will need to contact support.&lt;/p&gt;

&lt;p&gt;A more friendly way is the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;npm deprecated&lt;/code&gt; that will tell users the package has been deprecated.&lt;/p&gt;

&lt;h4 id=&quot;keeping-projects-up-to-date&quot;&gt;Keeping projects up to date&lt;/h4&gt;
&lt;p&gt;Before running &lt;code class=&quot;highlighter-rouge&quot;&gt;npm update&lt;/code&gt;, it’s preferred to run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm outdated&lt;/code&gt;.
This command will check the registry to see if any (specific) installed packages are currently outdated.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;npm outdated
npm update&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By doing so, you can prevent yourself from breaking the project if certain packages would not be compatible.&lt;/p&gt;

&lt;h4 id=&quot;stuff-everybody-should-know-about-npm&quot;&gt;Stuff everybody should know about npm&lt;/h4&gt;
&lt;p&gt;A lot of things are available for npm that will make your life as a developer easier.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Babel: Transpile all the things! JavaScript, TypeScript, JSX, …&lt;/li&gt;
  &lt;li&gt;Webpack and Browserify&lt;/li&gt;
  &lt;li&gt;Greenkeeper (greenkeeper.io) is &lt;code class=&quot;highlighter-rouge&quot;&gt;npm outdated&lt;/code&gt; as a service!&lt;/li&gt;
  &lt;li&gt;Node Security Project: Install by using &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install nsp -g&lt;/code&gt;. Use by running &lt;code class=&quot;highlighter-rouge&quot;&gt;nsp check&lt;/code&gt;. You can use this to check if your project contains vulnerable modules.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;why-should-i-use-npm&quot;&gt;Why should I use npm?&lt;/h4&gt;
&lt;p&gt;npm reduces friction.
It takes things you have to do all the time and makes things simpler and faster.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Safia Abdalla&quot; src=&quot;/img/js-conf-budapest/speaker-captainsafia.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;safia-abdalla-the-hitchhikers-guide-to-all-things-memory-in-javascript&quot;&gt;Safia Abdalla: The Hitchhiker’s Guide to All Things Memory in Javascript&lt;/h3&gt;

&lt;p&gt;Safia is a lover of data science and open source software.&lt;/p&gt;

&lt;p&gt;You can find her on Twitter using the handle &lt;a href=&quot;https://twitter.com/captainsafia&quot;&gt;@captainsafia&lt;/a&gt; or on her webpage &lt;a href=&quot;http://safia.rocks/&quot;&gt;safia.rocks&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;slides-and-interactive-tutorial&quot;&gt;Slides and interactive tutorial&lt;/h4&gt;
&lt;p&gt;The slides of this talk can be found here &lt;a href=&quot;http://slides.com/captainsafia/memory-in-javascript&quot;&gt;http://slides.com/captainsafia/memory-in-javascript&lt;/a&gt;.
Safia also created an &lt;a href=&quot;https://nbdev.surge.sh/#/gist/21885286a207c05bf1194a35490420c1&quot;&gt;interactive tutorial&lt;/a&gt; on how to use the Chrome DevTools for memory management.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
This talk will take beginners through an exploration of Javascript's garbage collector and memory allocation implementations and their implications on how performant code should be written.
Attendees will leave this talk having gained insights into the under-the-hood operations of Javascript and how they can leverage them to produce performant code.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id=&quot;why-should-i-care-about-memory&quot;&gt;Why should I care about memory?&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;It forces us to be (better) more inventive programmers, adds restrictions and forces us to use the best tools to create the best possible experience.&lt;/li&gt;
  &lt;li&gt;Memory is scarce. A lot of people still use devices that are not packed with a lot of memory.
Not everyone has high performant development machines.&lt;/li&gt;
  &lt;li&gt;It helps us exercise our empathy muscles.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;what-does-it-mean-to-manage-memory&quot;&gt;What does it mean to manage memory?&lt;/h4&gt;

&lt;p&gt;The Good, The Bad, The Ugly&lt;/p&gt;

&lt;h4 id=&quot;how-does-js-manage-memory&quot;&gt;How does JS manage memory?&lt;/h4&gt;
&lt;p&gt;Safia focuses on the V8 JS Engine.&lt;/p&gt;

&lt;p&gt;We have basic types in JavaScript:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;booleans&lt;/li&gt;
  &lt;li&gt;numbers&lt;/li&gt;
  &lt;li&gt;strings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Memory is allocated in a heap structure and uses a root node which has references to other ones: booleans, string, etc.
So basically: root node -&amp;gt; references -&amp;gt; variables.&lt;/p&gt;

&lt;p&gt;V8 allocates objects in memory in 6 contiguous chunks, or spaces:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New space: Memory gets allocated here when an object is created immediately.
It is small and is designed to be garbage collected very quickly, independent of other spaces.&lt;/li&gt;
  &lt;li&gt;Old pointer space: Contains most objects which may have pointers to other objects.
Most objects are moved here after surviving in new space for a while.&lt;/li&gt;
  &lt;li&gt;Old data space: Objects that just contain raw data (no reference or pointer) will end up here after surviving in new space for a while.&lt;/li&gt;
  &lt;li&gt;Large object space: Used to store large object tables.
They get stored here so it doesn’t conflict with the store space of the above mentioned spaces.&lt;/li&gt;
  &lt;li&gt;Code space: Code objects are allocated here. This is the only space with executable memory.&lt;/li&gt;
  &lt;li&gt;Map space: Contains objects which are all the same size and has some constraints on what kind of objects they point to, which simplifies collection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;How does V8 collect garbage memory?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;V8 uses a ‘stop the world’ technique that enables it to run a short garbage collection cycle.
This means it will literally halt the program.&lt;/p&gt;

&lt;p&gt;V8 has different approaches on how it collects garbage in the new and old space.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New space: Garbage collection by using a scavenging technique.
Each scavenging cycle will go through the entire heap starting from the root and will create copies.
It will clear out what is currently in new space.
Everything that is not reachable will be cleared out of the space.
You need double the size of the memory that is available for the new space to use for the copy.&lt;/li&gt;
  &lt;li&gt;Old space: Mark and sweep technique.
Remove unmarked objects on a regular basis.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;how-do-i-write-memory-performant-applications&quot;&gt;How do I write memory performant applications?&lt;/h4&gt;
&lt;p&gt;Asking yourself the following two question will get you started!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How much memory is my application using?&lt;/li&gt;
  &lt;li&gt;How often do garbage collection cycles occur in my application?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course you need to have the tools to work with.
The Chrome DevTools HEAP allocation profiler will be our weapon of choice.
It allows you to check the retain size and shallow size of objects.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Shallow size of an object is the amount of memory it holds of itself.&lt;/li&gt;
  &lt;li&gt;Retain size is all of its size and its dependents.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;heap-dump&quot;&gt;Heap dump&lt;/h4&gt;
&lt;p&gt;Heap dump takes a snapshot of your heap at a specific moment.
It will provide a file with .heap extension which enables you to load it in the Chrome DevTools for further inspection.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install heapdump&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;lets-practice&quot;&gt;Let’s practice!&lt;/h4&gt;

&lt;p&gt;Follow this &lt;a href=&quot;https://nbdev.surge.sh/#/gist/21885286a207c05bf1194a35490420c1&quot;&gt;interactive tutorial&lt;/a&gt; on how to use the Chrome DevTools for memory management.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Suz Hinton&quot; src=&quot;/img/js-conf-budapest/speaker-bcrypt.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;yan-zhu-encrypt-the-web-for-0&quot;&gt;Yan Zhu: Encrypt the web for $0&lt;/h3&gt;

&lt;p&gt;Yan is engineer &lt;a href=&quot;https://twitter.com/brave&quot;&gt;@brave&lt;/a&gt; and likes information freedom, breaking shit, cryptography, theoretical physics, free software, infosec, stunt h4cking, and an Internet that respects humans.&lt;/p&gt;

&lt;p&gt;You can find her on Twitter using the handle &lt;a href=&quot;https://twitter.com/bcrypt&quot;&gt;@bcrypt&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
Everyone in 2016 knows that websites should use HTTPS.
However, there is a common misconception that TLS and other security measures are expensive and slow down both web developers and page load times.
This talk will show you some easy tricks to make your site more secure without sacrificing performance or requiring a lot of effort.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Is the web fast yet?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes. Size of pages is rising. Amount of HTTPS requests is also rising!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is TLS fast yet?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes. Netflix is going to secure streams this year over HTTPS.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2015: Netflix and chill&lt;/li&gt;
  &lt;li&gt;2016: Netflix and HTTPS and chill&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/js-conf-budapest/HttpsAdoptionNetflix.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The numbers aren’t entirely clear, so here they are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Without encrypted Netflix streams, 65% of internet traffic is unencrypted. Only 29% of internet traffic is encrypted.&lt;/li&gt;
  &lt;li&gt;With encrypted Netflix streams, unencrypted internet traffic will drop to 26,9% and encrypted traffic will increase to 67,1%.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://www.sandvine.com/downloads/general/global-internet-phenomena/2015/encrypted-internet-traffic.pdf&quot;&gt;https://www.sandvine.com/downloads/general/global-internet-phenomena/2015/encrypted-internet-traffic.pdf&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;TLS has exactly one performance problem: it is not used widely enough.
Everything else can be optimized.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Data delivered over an unencrypted channel is insecure, untrustworthy, and trivially intercepted.
We owe it to our users to protect the security, privacy, and integrity of their data — all data must be encrypted while in flight and at rest.
Historically, concerns over performance have been the common excuse to avoid these obligations, but today that is a false dichotomy. Let’s dispel some myths.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Keep reading about this matter on &lt;a href=&quot;https://istlsfastyet.com&quot;&gt;istlsfastyet.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTP/2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another technology that can help the adoption of TLS is HTTP/2.
HTTP/2 offers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Binary encoding instead of text encoding&lt;/li&gt;
  &lt;li&gt;header compression&lt;/li&gt;
  &lt;li&gt;Server push&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;multiple requests on single TCP connection!!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTTP/2 allows for requests to be sent in parallel rather than sequentially.&lt;/p&gt;

&lt;p&gt;Does HTTP/2 require encryption? No. However, Chrome and Firefox will only support HTTP/2 with encryption.&lt;/p&gt;

&lt;h4 id=&quot;lets-encrypt&quot;&gt;Let’s Encrypt&lt;/h4&gt;

&lt;p&gt;Let’s Encrypt (a non-profit certificate authority) has left beta stage on the 12th of April and is a new Certificate Authority: It’s &lt;strong&gt;free&lt;/strong&gt;, &lt;strong&gt;automated&lt;/strong&gt;, and &lt;strong&gt;open&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It is backed by some major sponsors such as Mozilla, Akamai, Cisco Chrome, and so much more.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The objective of Let’s Encrypt and the ACME protocol is to make it possible to set up an HTTPS server and have it automatically obtain a browser-trusted certificate, without any human intervention.
This is accomplished by running a certificate management agent on the web server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Interested in Let’s Encrypt? Keep reading on &lt;a href=&quot;https://letsencrypt.org&quot;&gt;letsencrypt.org&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;get-https-for-free&quot;&gt;Get HTTPS for free!&lt;/h4&gt;

&lt;p&gt;Manually setting up your free HTTPS certificates from Let’s Encrypt is also an option. You can do that on &lt;a href=&quot;https://gethttpsforfree.com&quot;&gt;gethttpsforfree.com&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Suz Hinton&quot; src=&quot;/img/js-conf-budapest/speaker-mishunov.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;denys-mishunov-why-performance-matters&quot;&gt;Denys Mishunov: Why performance matters&lt;/h3&gt;

&lt;p&gt;Denys is frontend developer, speaker. Science aficionado. And writes for &lt;a href=&quot;https://www.smashingmagazine.com/&quot;&gt;@smashingmag&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can find him on Twitter using the handle &lt;a href=&quot;https://twitter.com/mishunov&quot;&gt;@mishunov&lt;/a&gt; or on his personal website &lt;a href=&quot;http://mishunov.me&quot;&gt;mishunov.me&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
Performance is not about Mathematics.
Performance is about Perception.
Perception is what makes a site with very few requests nevertheless feel slow, while a site that delivers search results during tens of seconds can feel fast enough for your user.
User’s perception of your website’s speed is the only true performance measure.

This talk is about perception, neuroscience and psychology. The time is ripe to understand performance from the user’s perspective.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In this talk Denys showed us that performance is not always in the numbers, but that it is most of the time perception.&lt;/p&gt;

&lt;p&gt;So next time you decide to invest a bunch of money in getting that request 100ms faster, make sure it will have impact!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Performance is about perception! Not mathematics.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Houston Airport was used as an example to illustrate this quote.
At Houston Airport, there were a lot of complaints about long waiting times at the baggage claim.
They decided to optimize the baggage handling process.
They managed to get luggage to the baggage claim in about 8 minutes (which is nice!).
However, complaints weren’t dropping at all.&lt;/p&gt;

&lt;p&gt;It turned out that passengers needed only 1 minute to get from the plane to the baggage claim, which meant they needed to wait 7 minutes for their luggage.
Eventually they decided to literally taxi and park the airplanes further so passengers now needed to walk 6 minutes from the plane to the baggage claim which reduced waiting times for luggage to 2 minutes.
This caused complaints to drastically reduce!&lt;/p&gt;

&lt;h4 id=&quot;speed&quot;&gt;Speed!&lt;/h4&gt;

&lt;p&gt;1 second gain will increase revenue by 1% for Company X. 1 second slower will decrease conversions by approximately 5%.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The 20% rule.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This rule defines that you should make a page load at least 20% faster, otherwise users will not notice.&lt;/p&gt;

&lt;p&gt;We’re talking about noticeable difference.
A big difference with meaningful difference.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Noticeable !== Meaningful&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We did a live test on the conference where the crowd needed to decide which of the two pages displayed loaded faster.
The first page loaded in 1.6 seconds whereas the second one loaded in 2 seconds.
Most of the people thought the second page, with 2 seconds load time was faster. This is all about perception!&lt;/p&gt;

&lt;p&gt;Another fun fact is when delaying audio on a video, our mind will trick us by syncing the audio with what is visible on the screen. Again perception!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key takeaway&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Don’t spend to much time optimizing the nitty gritty details of your code, instead try moving the active phase forward.
As soon as there is activity being shown (pages being loaded), the brain enters the active phase.
The user no longer feels as if he’s waiting (Remember the perception?).&lt;/p&gt;

&lt;p&gt;You can move the active phase forward by making use of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;async&lt;/li&gt;
  &lt;li&gt;Service workers&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The perception of performance is just as effective as actual performance in many cases” - &lt;a href=&quot;https://developer.apple.com/library/watchos/documentation/Performance/Conceptual/PerformanceOverview/BasicTips/BasicTips.html&quot;&gt;Apple quote&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;day-1-afternoon&quot;&gt;Day 1 afternoon&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Suz Hinton&quot; src=&quot;/img/js-conf-budapest/speaker-princi_ya.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;princiya-sequeira-natural-user-interfaces-using-javascript&quot;&gt;Princiya Sequeira: Natural user interfaces using JavaScript&lt;/h3&gt;

&lt;p&gt;Princiya works at Zalando Tech where she uses React and Redux. She’s also a startup enthusiast, teacher, speaker, DataViz Diva and has a love for food and JavaScript&lt;/p&gt;

&lt;p&gt;You can find her on Twitter using the handle &lt;a href=&quot;https://twitter.com/princi_ya&quot;&gt;@princi_ya&lt;/a&gt; and Zalando Tech using the handle &lt;a href=&quot;https://twitter.com/ZalandoTech&quot;&gt;@ZalandoTech&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
The way we interacted with computers on a large scale was stuck in place for roughly 20 years.
From mouse to keyboard to joystick, it is game over.
Today it is the era of gestures.
Today’s gamers can do everything from slice and dice produce in Fruit Ninja to quest for a dragon in Skyrim.
We’ve been captivated by these powerful, natural, and intuitive interactions; imagining what it would be like to have that power at our own fingertips.

In this recent decade, we’ve seen some staggering advances in technologies bring us closer making these magical experiences a reality.
In this talk I will present how we can create new, intuitive, interactions for these novel input devices using JavaScript.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This talk takes on a different approach in user interaction, in way that different ways of input can result in the same output.&lt;/p&gt;

&lt;p&gt;At this moment we know the evolution of &lt;strong&gt;Typed, Clicked and Touched&lt;/strong&gt; but currently we are evolving to &lt;strong&gt;Typed, Clicked, Touched, Guestures/Speech/…&lt;/strong&gt; etc.&lt;/p&gt;

&lt;h4 id=&quot;evolution-of-user-interfaces&quot;&gt;Evolution of user interfaces.&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;CLI: Codified, Strict&lt;/li&gt;
  &lt;li&gt;GUI: Metaphor, Exploratory&lt;/li&gt;
  &lt;li&gt;NUI (Natural User Interfaces): Direct Intuitive. More natural and more intuitive.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;nui--js--nuijs&quot;&gt;NUI + JS = NUIJS&lt;/h4&gt;

&lt;p&gt;At first, Princiya was trying to build &lt;a href=&quot;https://github.com/nuijs/simulator&quot;&gt;a simulator for motion controlled 3D camera’s&lt;/a&gt;.
A tool that is not dependent on any platform without using a physical device.
The simulator is purely based on JavaScript and easily integrates with the device’s SDKs.&lt;/p&gt;

&lt;p&gt;Once the simulator was made, she tried to build some apps with it (using leap motion for example) to move a slideshow or any other purpose.&lt;/p&gt;

&lt;p&gt;The tool can be used for many purposes an a lot of devices are already available (VR, motion, …)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Augmented Reality.&lt;/li&gt;
  &lt;li&gt;Virtual Reality.&lt;/li&gt;
  &lt;li&gt;Perceptual Computing: bringing human like behaviour to devices&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;what-next&quot;&gt;What next?&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Architecture&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Step 1: USB controller reads sensor data&lt;/li&gt;
  &lt;li&gt;Step 2: Data is stored in local memory&lt;/li&gt;
  &lt;li&gt;Step 3: Data is streamed via USB to SDK&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Live demo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Princiya demonstrated a &lt;a href=&quot;https://github.com/nuijs/apps&quot;&gt;drawing board with a brush&lt;/a&gt;, both with mousepointer and LEAP motion.
NUIJS will translate the input data from the mouse pointer to the Node.js Web Socket server and this one will process the data and send it back to the LEAP motion SDK.
The same code can be used with the LEAP motion itself since it integrates nicely with the device’s SDKs.&lt;/p&gt;

&lt;p&gt;Other open source tools Princiya mentioned were &lt;a href=&quot;https://github.com/iambrandonn/WebcamSwiper&quot;&gt;Webcam Swiper&lt;/a&gt; and &lt;a href=&quot;https://github.com/mtschirs/js-objectdetect&quot;&gt;js-objectdetect&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Viola-Jones Algorithm&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most of the tools will use or depend on the Voila-Jones Algorithm which can be used for object detection.
Combined with other tools this can be very powerful.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HAAR feature selection&lt;/li&gt;
  &lt;li&gt;Creating an integral image&lt;/li&gt;
  &lt;li&gt;Adaboost training&lt;/li&gt;
  &lt;li&gt;Cascading classifiers&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Suz Hinton&quot; src=&quot;/img/js-conf-budapest/speaker-mauricedb.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;maurice-de-beijer-event-sourcing-your-react-redux-applications&quot;&gt;Maurice de Beijer: Event-sourcing your React-Redux applications&lt;/h3&gt;

&lt;p&gt;Maurice is a freelance developer/trainer and Microsoft Azure MVP.&lt;/p&gt;

&lt;p&gt;You can find him on Twitter using the handle &lt;a href=&quot;https://twitter.com/mauricedb&quot;&gt;@mauricedb&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
With Event-Sourcing every action leading up to the current state is stored as a separate domain event.
This collection of domain events is then used as the write model in the CQRS model.
These same events are projected out to a secondary database to build the read model for the application.
In this session Maurice de Beijer will explain why you might want to use Event-Sourcing and how to get started with this design in your React and Flux applications.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;What is Event-sourcing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Event-sourcing is a way of capturing changes in the state of an application.
The traditional way of doing this would be to just update the existing state of your application to whatever state it should be in.
This way you always have the latest state of your data at your disposal.&lt;/p&gt;

&lt;p&gt;In Event-sourcing, you’ll capture all changes as events.
These events will be stored in the sequence they were applied.
You now have a complete log of events that happened in your application.
This allows for features such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Complete Rebuild: Possibility to rebuild the entire application state by re-running all events.&lt;/li&gt;
  &lt;li&gt;Temporal Query: Determining the state of the application at a given point in time.&lt;/li&gt;
  &lt;li&gt;Event Replay: Replay incorrect events by reversing it and all subsequent events, then replaying the correct event and re-applying all later events.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Common example of systems that use Event Sourcing are Version Control Systems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When to use Event-sourcing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Event-Sourcing is particularly useful in situations where you need to keep an audit trail of all changes that occurred to your data.
Accountancy for example is a domain in which Event-Sourcing is very useful, because you need to be able to provide that trail for audit purposes.
&lt;strong&gt;REPHRASE! -&amp;gt; The immutability of events allows for more scalability in your apps also.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CQRS and Event Sourcing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Where Event-Sourcing describes the practice of storing all application state changes in individual events, CQRS describes the practice of separating the command from the read side.&lt;/p&gt;

&lt;p&gt;This means you’ll have a service exposing all write functionality in your application and a separate service exposing all read operations.&lt;/p&gt;

&lt;p&gt;This model works well with Event-Sourcing as you can use the Events occurring on your system as Commands in the CQRS model.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/js-conf-budapest/Event-sourcing.png&quot; alt=&quot;CQRS-and-event-sourcing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During the talk, Maurice showed some samples of code that were the pieces of the puzzle in setting up Event-Sourcing and CQRS in your React-Redux application.&lt;/p&gt;

&lt;p&gt;Check out the slides for his talk &lt;a href=&quot;http://www.slideshare.net/mauricedb/eventsourcing-your-reactredux-applications&quot;&gt;here&lt;/a&gt; to find out more!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Suz Hinton&quot; src=&quot;/img/js-conf-budapest/speaker-ohhoe.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rachel-white-the-internet-of-cats&quot;&gt;Rachel White: The Internet of Cats&lt;/h3&gt;

&lt;p&gt;Rachel is a front end developer at IBMWatson. A lover of retro graphics &amp;amp; horror &amp;amp; coding &amp;amp; games, but above all, of Cats.&lt;/p&gt;

&lt;p&gt;You can find her on Twitter using the handle &lt;a href=&quot;https://twitter.com/ohhoe&quot;&gt;@ohhoe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Find out more about her and her projects on &lt;a href=&quot;rachelisaweso.me&quot;&gt;rachelisaweso.me&lt;/a&gt; and &lt;a href=&quot;imcool.online&quot;&gt;imcool.online&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
Ever lose out on a good night's rest because your pesky cats keep waking you up at 4am for food?
Rachel has.
Many times.
For her first project using node, socket.io, microcontrollers, and johnny-five, Rachel built a web-based feeder that delivers tasty cat chow on a configurable schedule or when triggered remotely.
She'll walk you through her learning process and get you excited about trying new things in your own projects.
Finally, she'll show you how to take the first steps to release your work to the open source community.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;One thing is for sure, Rachel really, really, really likes cats!&lt;/p&gt;

&lt;p&gt;Where a lot of people try to create things that improve others peoples lives, Rachel tries to do the same, instead, she does this for cats…&lt;/p&gt;

&lt;p&gt;One Question is constantly on her mind:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“How can we incorporate cats in technology?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eventually, she decided to create a feeder bot for her cats and immediately thought of open sourcing “the thing”.
The talk was mainly a tour of what she’s learned and encountered along the way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trying new things is scary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Rachel wasn’t exactly familiar with robotics or backend development, so she would be entering a whole new world.
She’d have to try out new things and start a project without any idea of whether all of this would actually work out.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Embarking on a new project: will it succeed, will it suck?&lt;/li&gt;
  &lt;li&gt;Using new technologies for the first time: what will happen, will it work for me?&lt;/li&gt;
  &lt;li&gt;Contributing to Open Source: putting yourself out there is terrifying!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Why so scary?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Why is this so scary? It turns out the Open Source developer community can sometimes be quite a harsh environment…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fear of rejection&lt;/li&gt;
  &lt;li&gt;Imposter Syndrome&lt;/li&gt;
  &lt;li&gt;Inclusiveness of Communities&lt;/li&gt;
  &lt;li&gt;Bad behaviour in General: e.g. Oh you didn’t know about THIS?, e.g. completely ignoring contributions&lt;/li&gt;
  &lt;li&gt;Your GitHub &lt;strong&gt;green&lt;/strong&gt; timeline is not a representation of what you’re worth. Just opening a PR just for the sake of it sucks.&lt;/li&gt;
  &lt;li&gt;Don’t insult the contributor. Why on earth …&lt;/li&gt;
  &lt;li&gt;Vulgar and brutal harassment of the community, seriously, get a life!&lt;/li&gt;
  &lt;li&gt;PR’s that get ignored (for over a year) and then the maintainer writes the same fixes and says: Oops!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eventually, Rachel set up a Twitter poll asking people about what bad experiences in Open Source Software development they’d already encountered, showing off an entire list of Twitter responses. Which weren’t that positive (euphemism!)&lt;/p&gt;

&lt;p&gt;One of her Twitter contacts actually created (and open sourced) a tool called echochamber.js, which allows you to include a commenting form in your site that stores the comments only in the local storage.
That way, you can be an a**hole and post really offensive comments without actually insulting people.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tessalt/echo-chamber-js&quot;&gt;&lt;strong&gt;Echochamber.js&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proposals for new contributors&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Knowing all of these things now, you might wonder if it’s even worth it putting yourself out there.
The answer of course is YES, but consider the following tips when doing so!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Find something you are passionate about&lt;/li&gt;
  &lt;li&gt;Something new you want to try&lt;/li&gt;
  &lt;li&gt;Make something cool and open source it yourself&lt;/li&gt;
  &lt;li&gt;First point of contact is your peers&lt;/li&gt;
  &lt;li&gt;Constructive criticism!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Building a cat feeder bot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s talk about the actual Cat Feeder bot, which was most suitably named RoboKitty. Check it out at &lt;a href=&quot;https://github.com/rachelnicole/robokitty&quot;&gt;here&lt;/a&gt;! and &lt;a href=&quot;http://imcool.online/robokitty/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/js-conf-budapest/RoboKitty-Catfeeder.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s a node based cat feeder that works over the web.
You can use it to instantly feed your cat, or you can feed periodically using cron triggers.&lt;/p&gt;

&lt;p&gt;After some trial and error on choosing the right combination of hardware, the final list of technologies involved in creating the Cat Feeder Bot looks something like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Node.js&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://johnny-five.io/&quot;&gt;Johnny-five&lt;/a&gt;: Javascript Robotics &amp;amp; IoT platform.&lt;/li&gt;
  &lt;li&gt;Particle Photon kit (with breadboard)&lt;/li&gt;
  &lt;li&gt;4xAA battery pack with on/off switch&lt;/li&gt;
  &lt;li&gt;Misc hardware accessories&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other things learned along the way were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A servo needs external power, so yeah, plugging it in the microcontroller is not enough! :D&lt;/li&gt;
  &lt;li&gt;No idea how to solder…? Worked out! -&amp;gt; Youtube -&amp;gt; Learn how to solder.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Lessons learned&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t be afraid of the unfamiliar&lt;/li&gt;
  &lt;li&gt;Don’t be afraid to ask for help&lt;/li&gt;
  &lt;li&gt;People really like cat stuff&lt;/li&gt;
  &lt;li&gt;Don’t downplay your abilities: I mean, it’s a super cool kitty food dispenser!&lt;/li&gt;
  &lt;li&gt;I like nodebots a lot&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;p-image float-image&quot; width=&quot;200&quot; alt=&quot;Suz Hinton&quot; src=&quot;/img/js-conf-budapest/speaker-hipsterbrown.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;nick-hehr-the-other-side-of-empathy&quot;&gt;Nick Hehr: The other side of empathy&lt;/h3&gt;

&lt;p&gt;Nick is an Empathetic Community Member, Front-End Dev @NamelyHR ,@hoodiehq Contributor, @tesselproject Contributor and @manhattan_js Organizer&lt;/p&gt;

&lt;p&gt;You can find him on Twitter using the handle &lt;a href=&quot;https://twitter.com/HipsterBrown&quot;&gt;@HipsterBrown&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
In an industry that is so focused frameworks &amp;amp; tooling, we tend to lose sight of the people behind the products and how we work with them.
I’ve found empathy to be a powerful resource while collaborating with teams inside companies and across the open source community.
By breaking down The Other Side of Empathy, I will demonstrate how applying its principles to your development process will benefit the community and the products they create.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id=&quot;empathy&quot;&gt;Empathy&lt;/h4&gt;

&lt;p&gt;Nick Hehr shares Rachels’ point of view on the sometimes rude Open Source communication and communication on Social media in general.
In his talk, he addressed the way you should behave when volunteering to contribute or when giving feedback to contributors in Open Source Software (OSS) projects.
And Empathy turns out to be key in this process.&lt;/p&gt;

&lt;h4 id=&quot;ranting&quot;&gt;Ranting&lt;/h4&gt;

&lt;p&gt;It’s all too easy to judge or express prejudice these days, through these social media channels and not think about the people who are actually behind the idea or concept you’re judging.
People that decide to Open Source the work on which they’ve spend tons of effort (usually because it’s their passion, but still…) aren’t exactly waiting for trolls or rants from people who like this easy judging.&lt;/p&gt;

&lt;p&gt;Empathy also plays a huge role in the other way around.
It happens all too often that people trying to contribute to OSS for the first time are being ignored (by literally ignoring their pull requests for example), being treated like idiots (instead of being given constructive feedback when there is room for improvement), etc…&lt;/p&gt;

&lt;h4 id=&quot;saying-nice-things&quot;&gt;Saying nice things&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;“If you don’t have anything nice* to say, don’t say anything at all!”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nice in this context means constructive. Comment on something you think could use improvement and offer a solution.
Compliment on certain aspects that really improve the tool.&lt;/p&gt;

&lt;p&gt;Due to the relative anonymity of social media and other communication channels, we tend to forget these principles.&lt;/p&gt;

&lt;h4 id=&quot;key-take-aways&quot;&gt;Key take-aways&lt;/h4&gt;

&lt;p&gt;Key points to take away from this session are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Give constructive feedback!!!&lt;/li&gt;
  &lt;li&gt;Always keep in mind the language your using when commenting on Open Source initiatives
    &lt;ul&gt;
      &lt;li&gt;Don’t be to blunt or direct in your reactions.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Use the right channels for your communication
    &lt;ul&gt;
      &lt;li&gt;meaning, don’t ask for feedback on twitter&lt;/li&gt;
      &lt;li&gt;Instead turn to platforms such as Slack, IRC, Gitter…&lt;/li&gt;
      &lt;li&gt;Get (constructive) feedback from people you trust&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;People that open source their tools don’t owe you anything.
    &lt;ul&gt;
      &lt;li&gt;They’re not entitled to give up all their time for you.&lt;/li&gt;
      &lt;li&gt;They’re not here to start fulfilling all requests from a demanding user base. It’s open source, submit a pull request&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Living by these rules will make the (web-)world a little bit of a better place, but won’t prevent other people from still continuing these bad habits.
Don’t let these people get to you! Continue doing what you’re passionate about and seek those that will give you that constructive feedback.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;afterparty-with-beatman-and-ludmilla&quot;&gt;Afterparty with Beatman and Ludmilla&lt;/h3&gt;

&lt;p&gt;After a long day, it was time for some party time and since JS Conf Budapest was hosted at a club, this could only be good!&lt;/p&gt;

&lt;p&gt;We were presented a live set by Breakspoll 2015 winner Beatman and Ludmilla.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/246816288&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;day-1-conclusion&quot;&gt;Day 1: Conclusion&lt;/h2&gt;

&lt;p&gt;Day 1 was packed full of great speakers and the atmosphere was superb! A lot of inspiring talks that gave us a lot of topics to cover for the months to come within the JWorks unit at Ordina Belgium.&lt;/p&gt;

&lt;p&gt;The after party with Beatman and Ludmilla was a perfect closing of the day. On our walk to the hotel we could only imagine what day 2 would bring.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/conference/2016/05/13/JS-Conf-Budapest-day-2.html&quot;&gt;Read our full report on day 2 of JS Conf Budapest here!&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 12 May 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/conference/2016/05/12/JS-Conf-Budapest-day-1.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/conference/2016/05/12/JS-Conf-Budapest-day-1.html</guid>
        
        <category>JS Conf Budapest</category>
        
        <category>JavaScript</category>
        
        <category>Conference</category>
        
        
        <category>conference</category>
        
      </item>
    
      <item>
        <title>Using JWT for state transfer</title>
        <description>&lt;p&gt;At one of our clients, we have been using Json Web Tokens quite extensively.
We even use it to persist state on the client.&lt;/p&gt;

&lt;h2 id=&quot;why-persist-state-on-the-client&quot;&gt;Why persist state on the client?&lt;/h2&gt;

&lt;p&gt;When building microservices, we need to build so-called “cloud native” applications.
One of the key tenets of cloud native application design is keeping your services stateless.
The benefit of having stateless applications is foremost the ability to respond to events by adding or removing instances without needing to significantly reconfigure or change the application.
More stateless services can easily be added when load suddenly increases, or if an existing stateless service fails, it can simply be replaced with another.
Hence, resilience and agility, are easier to achieve with stateless services.&lt;/p&gt;

&lt;p&gt;Keeping your services stateless means we need to persist our state somewhere else.
Since we are transferring state in a REST architectural style, we can use the client to retain our state.
For scaling purposes this is a great solution, as the client will only ever have to store its own state, and the server will be relieved of the state of all its clients.&lt;/p&gt;

&lt;p&gt;At our client we have chosen to use JWT for this state transfer to the client.
While JWT is primarily intended for authentication and authorization purposes, the specification allows us to add any data we’d like to verify later on.&lt;/p&gt;

&lt;h2 id=&quot;looking-good&quot;&gt;Looking good&lt;/h2&gt;

&lt;p&gt;Imagine the following scenario:&lt;/p&gt;

&lt;p&gt;A list of products is fetched from the “products microservice”.
The user isn’t allowed to view all products, so only those products the user has access to are returned.
When the user wants to order a product, he sends an order request to the “orders microservice” with the id of the product he wants to order.
At that moment the “orders microservice” needs to know whether or not the user is allowed to access this product, let alone order it.
Since the rights to access and order are the same, we’d like to reuse the information returned from the first call to the “products microservice”.
This flow is illustrated below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/JWT/jwt-for-state-tranfer.png&quot; alt=&quot;JWT state transfer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We could call the “products microservice” from the “orders microservice” and rely on caching, but that would still be an extra network hop and the cache could potentially be invalidated by the time the user orders the product.
Using the JWT approach, state is given to the client (the list of product ids the user is allowed to access), and being passed to the server again the moment an order is placed.
The signature of the token guarantees us that the state has not been tampered with, while residing on the client.&lt;/p&gt;

&lt;h2 id=&quot;too-good-to-be-true&quot;&gt;Too good to be true&lt;/h2&gt;

&lt;p&gt;This solution prevents the server from having to care about state.
It allows the client to store its own state and send it to the server whenever the server requires it - while being guaranteed the data isn’t tampered with.
While this might seem like a good idea, it can backfire quickly.&lt;/p&gt;

&lt;h3 id=&quot;coupling&quot;&gt;Coupling&lt;/h3&gt;

&lt;p&gt;In distributed systems such as microservices, it’s very important to manage the way we talk between components over the network.
Using protocols such as HTTP and especially with the REST architectural style, great care needs to go in defining the contracts between these components.
While we can use content-negotiation to version our resources, and JSON for instance as content type, we can build our clients as tolerant readers.
Headers don’t have any of these benefits.
A header is basically just a key and a value, and in case of JWT, the value is encoded.
Therefore it’s hard to do versioning or any kind of content management on the data transferred inside these tokens.&lt;/p&gt;

&lt;p&gt;In the aforementioned example, the token couples the “products microservice” with the “orders microservice”.
If the “products microservice” changes the structure of the token, the “orders microservice” will no longer be able to read it.
While this coupling would exist as well when the “orders microservice” would call the “products microservice” directly, we would manage that coupling as part of the contract between these two microservices.
In our case we don’t know there is a link between the two microservices since they don’t call each other directly.
Yet by transferring the token from one microservice over the client to the other microservice, we are creating a hidden dependency.
It’s also hard to have versioning on headers unless we put the version inside the name of the header.&lt;/p&gt;

&lt;h3 id=&quot;scaling&quot;&gt;Scaling&lt;/h3&gt;

&lt;p&gt;Adding versions to the headernames, documenting which microservices expect which versions of tokens of other microservices, and making sure we implement the tolerant-reader principle when reading the tokens might be a step in the right direction to avoid mass hysteria when tokens have to be adjusted.
But what is simply impossible to get around, is the size restriction of headers in HTTP requests and responses.
The HTTP specification doesn’t put any restriction on header size (singular or combined).
But web servers, reverse proxies, CDNs and other network components do.
Why they do this is not entirely clear as the spec allows any size, but the fact of the matter is that these restrictions exist.
Putting a list of ids in a header like in our products example, will eventually break as the list could get too long.
It’s not even clear how long is too long.&lt;/p&gt;

&lt;h2 id=&quot;alternatives&quot;&gt;Alternatives&lt;/h2&gt;

&lt;p&gt;We see three possible alternatives to this failed approach to manage state.&lt;/p&gt;

&lt;p&gt;Instead of passing the state from one microservice over a client to another microservice, we could pass the state as part of the body of the request and response.
The downside of this approach is that we can no longer use GET methods for the calls where we need to pass the previously fetched state.&lt;/p&gt;

&lt;p&gt;The second alternative is to persist the state in a key value datastore on the server.
We could asynchronously fetch products data and store it inside a datastore owned by the “orders microservice”.
This could get stale, but so could a cache on the “products microservice”.
This approach seems most common in the industry and could be well be the most preferable.&lt;/p&gt;

&lt;p&gt;And when all else fails, we can still simply make a call from the “orders microservice” to the “products microservice” and count on caching.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Using Json Web Tokens as a means to transfer state to and from microservices via the client seemed like a good idea, but in the end turned out to be quite an anti-pattern.
It introduces hidden coupling which is hard to manage, and can outright fail completely when headers become too big.
Transferring state through the body of requests and responses could be a better approach.
Using key value datastores to cache data of other microservices on your own microservice feels like the best way to go.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/microservices/2016/05/01/Using-JWT-Tokens-for-State-Transfer.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/microservices/2016/05/01/Using-JWT-Tokens-for-State-Transfer.html</guid>
        
        <category>JWT</category>
        
        <category>State</category>
        
        <category>Cache</category>
        
        
        <category>Microservices</category>
        
      </item>
    
      <item>
        <title>Component-based application architecture with AngularJS and Typescript</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ideally, the whole application should be a tree of components that implement clearly defined inputs and outputs, and minimize two-way data binding. That way, it’s easier to predict when data changes and what the state of a component is.&lt;/p&gt;

  &lt;p&gt;– AngularJS documentation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this article I will offer some basic guidelines on how to create a scalable AngularJS application with &lt;strong&gt;reusable, well encapsulated components&lt;/strong&gt; that are &lt;strong&gt;easy to maintain and refactor&lt;/strong&gt;.
AngularJS (version 1.5.5 at the time of writing) and its latest features offers us the ability to structure our apps as a tree of components.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Each component contains its own controller and template&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It can even have its own (relative) routing configured if you take advantage of the new &lt;strong&gt;Component Router&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you are on a team with multiple front-end developers you can easily divide the work by letting each developer focus on a separate component.
It also helps in migrating to Angular 2, though I cannot promise it will be an easy task.
Another bonus point is you are getting into the mindset of modern front-end development: &lt;strong&gt;web components&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;My preferred toolchain when developing AngularJS applications consists of Typescript, NPM and Webpack.
The sample code in this article and the sample application are created together with these tools.&lt;/p&gt;

&lt;p&gt;You can find the sample application on Github:
&lt;a href=&quot;https://github.com/ryandegruyter/angularjs-components&quot; title=&quot;Sample app&quot;&gt;https://github.com/ryandegruyter/angularjs-components&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-component&quot;&gt;What is a component?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;In AngularJS a &lt;strong&gt;component&lt;/strong&gt; is a directive.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;More specifically we call it a &lt;strong&gt;component directive&lt;/strong&gt; or &lt;strong&gt;template directive&lt;/strong&gt;.
It is an approach to writing your own custom HTML elements which browsers are able to read and render.
HTML comes with a set of pre-defined elements, for example the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; element or the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;By combing and nesting these standard HTML tags we can build complex UI widgets.
We can change their appearance and behavior dynamically with JavaScript and CSS.&lt;/p&gt;

&lt;p&gt;True web components can isolate their structure, appearance and behavior.
They make use of a technology called the Shadow DOM, which isolates the component in a separate DOM tree.
This element will have its styles and scripts encapsulated, they will not conflict with the styles and scripts inside the parent DOM.&lt;/p&gt;

&lt;p&gt;Angular 2 takes full advantage of this technology, but unfortunately AngularJS, the framework I will be talking about in this article, does not.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Components you write and register inside AngularJS &lt;strong&gt;do not&lt;/strong&gt; get isolated into a separate DOM tree.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lucky for us we are able to mimic the effect of Web components by using directives.
We can write a reusable UI element, declare it with a custom tag and configure it by supplying attributes on the element.
My advice is to be sure to use correct naming conventions and a module system so styles and scripts will not conflict with each other.&lt;/p&gt;

&lt;h2 id=&quot;directives-and-components&quot;&gt;Directives and components&lt;/h2&gt;

&lt;p&gt;To create and register a custom element in AngularJS, we can use either methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.directive (name, factoryFunction)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.component (name, object)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While components are restricted to custom elements, directives can be used to create both elements as well as custom attributes.&lt;/p&gt;

&lt;p&gt;There are 3 types of directives:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Component directive&lt;/li&gt;
  &lt;li&gt;Attribute directive&lt;/li&gt;
  &lt;li&gt;Structural directive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A &lt;strong&gt;Component directive&lt;/strong&gt; is a directive with a template.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;.component()&lt;/code&gt; method is a helper method which creates a directive set with default properties.&lt;/p&gt;

&lt;p&gt;An &lt;strong&gt;Attribute directive&lt;/strong&gt; is declared as an element attribute and they can change the appearance or behavior of an element (&lt;code class=&quot;highlighter-rouge&quot;&gt;ng-change&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-click&lt;/code&gt;, …).&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;Structural directive&lt;/strong&gt; is an attribute or element that manipulates the DOM by adding or removing DOM elements (&lt;code class=&quot;highlighter-rouge&quot;&gt;ng-if&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-repeat&lt;/code&gt;, …).&lt;/p&gt;

&lt;h2 id=&quot;when-do-we-use-directive-and-when-do-we-use-component&quot;&gt;When do we use .directive(), and when do we use .component()?&lt;/h2&gt;
&lt;p&gt;Custom UI elements should be created with the &lt;code class=&quot;highlighter-rouge&quot;&gt;.component()&lt;/code&gt; helper method because it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;enforces best practices and provides optimizations (isolate scope, bindings)&lt;/li&gt;
  &lt;li&gt;has handy defaults making it easy to create components&lt;/li&gt;
  &lt;li&gt;makes migration to Angular 2 easier&lt;/li&gt;
  &lt;li&gt;can take advantage of the new component router which will be the default router in Angular 2&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;.directive()&lt;/code&gt; method when you want to manipulate the DOM by adding or removing elements (Structural directive) or when you want to change the appearance or behavior of an element (Attribute directive).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;creating-a-component-based-angularjs-application&quot;&gt;Creating a component-based AngularJS application&lt;/h2&gt;
&lt;p&gt;Beginning with a component-based application architecture we need to have a root component.
Before creating a component you have to decide if it will be a  &lt;strong&gt;Presentational component&lt;/strong&gt; or a &lt;strong&gt;Container component&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;presentational-component&quot;&gt;Presentational component&lt;/h2&gt;
&lt;p&gt;Also known as a dumb component.
They are used to visualize data and can easily be reused.
They don’t manipulate application state nor do they fetch any data.
Instead they define a public API in which they can receive inputs (&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; bindings), and communicate any outputs (&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; binding) with their direct parent.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Designers can easily work on Presentational components because they don’t interfere with application logic.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These components are unaware of any application state, and they only get data passed down to them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A simple presentational root component.&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;	&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RootComponent&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IComponentOptions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;nl&quot;&gt;bindings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		    &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  		&lt;span class=&quot;nl&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
	    	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;	    	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;converter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/currency-converter&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;	  	&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'currencyConverterApp, []'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Rootcomponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RootComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This component has a very simple API with one input -  &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; - and zero outputs.
It doesn’t call a service or fetch any data.
It doesn’t update any outside resources or make any requests to manipulate application state.
Also notice how easy it was to register this component directive.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let’s create the same component directive but register it with the &lt;code class=&quot;highlighter-rouge&quot;&gt;.directive()&lt;/code&gt; method.&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RootComponent&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IDirective&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;restrict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'E'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;bindToController&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IScope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;controllerAs&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$ctrl'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;converter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/currency-converter&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;         &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IDirective&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RootComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'currencyConverterApp, []'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Rootcomponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RootComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, this has a lot more configuration compared to using the &lt;code class=&quot;highlighter-rouge&quot;&gt;.component()&lt;/code&gt; helper method.
Although it offers more power and flexibility, its more practical to have the &lt;code class=&quot;highlighter-rouge&quot;&gt;.component()&lt;/code&gt; method when creating custom UI elements.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;bindings are automatically bound to the controller&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;controllerAs&lt;/code&gt; defaults to &lt;code class=&quot;highlighter-rouge&quot;&gt;$ctrl&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;always creates an isolate scope&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;container-components&quot;&gt;Container components&lt;/h2&gt;
&lt;p&gt;Also known as smart components.
This type of component is more tightly coupled to the application and not intended for reusability.
It fetches data, manages part of the application state and provides the data to its child components.
The child component communicates any update on the data through its output bindings (&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;).
The container component eventually decides what action to take with the data, not the child component.&lt;/p&gt;

&lt;p&gt;Let’s look at an example of a container component, I will leave out the complete template for brevity’s sake, you can view the complete code in the companion repository.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;First we start with our component definition:&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CurrencyConverter&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IComponentOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'currencyConverter'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nl&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;From&quot;&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$ctrl.fromSelected(selectedCurrency)&quot;&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;currencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$ctrl.fromCurrencies&quot;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/currencies-select&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;To&quot;&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$ctrl.toSelected(selectedCurrency)&quot;&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;currencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$ctrl.toCurrencies&quot;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/currencies-select&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;		
        &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nl&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CurrencyConverterComponentController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The template contains two declarations of a presentational component &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;currencies-select&amp;gt;&lt;/code&gt;.
When we look at the attributes of the currencies-select element, the component API consists of &lt;strong&gt;three inputs&lt;/strong&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;show-values-as-rates&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;currencies&lt;/code&gt;) and &lt;strong&gt;one output&lt;/strong&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;on-selected&lt;/code&gt;).
Our container component can bind a callback method on the on-selected attribute which offers an opportunity for the currencies-select component to &lt;strong&gt;communicate with its parent component&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Below we define our components controller, here we can set and manipulate our template’s view model.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CurrencyConverterComponentController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nl&quot;&gt;selectedFromCurrency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;selectedToCurrency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nl&quot;&gt;fromCurrencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;toCurrencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$inject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CurrenciesDataService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currencyDataService&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CurrenciesDataService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;$onInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromCurrencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toCurrencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currencyDataService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCurrenciesByYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;fromSelected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectedToCurrency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectedToCurrency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectedFromCurrency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;toSelected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectedFromCurrency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectedFromCurrency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectedToCurrency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This component injects a data service to fetch a list of currencies.
We pass this list to each &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;currencies-select&amp;gt;&lt;/code&gt; element in the &lt;code class=&quot;highlighter-rouge&quot;&gt;$onInit&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;$onInit&lt;/code&gt; is a component lifecycle method that gets called by the framework each time the component gets instantiated.
In this method we set our view model properties &lt;code class=&quot;highlighter-rouge&quot;&gt;_fromCurrencies_&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;_toCurrencies_&lt;/code&gt; equal to a list of currencies fetched from the data service.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;fromSelected&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;toSelected&lt;/code&gt; methods are passed down as callbacks for the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;currencies-select on-selected&amp;gt;&lt;/code&gt; output.&lt;/p&gt;

&lt;p&gt;So how does our presentational component definition look like?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CurrencySelectComponent&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IComponentOptions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'currenciesSelect'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nl&quot;&gt;bindings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;currencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;onSelected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;amp;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;showSelected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;showValuesAsRates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;nl&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CurrencySelectComponentController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CurrencySelectComponentController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currencies&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onSelected&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showSelected&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showValuesAsRates&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;onCurrencyClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onSelected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selectedCurrency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Bindings define the components API, in the above case there are four bindings.
Our previous example declared this component but we only noticed three inputs and one output.
Apparently there is a fourth input called &lt;code class=&quot;highlighter-rouge&quot;&gt;_showSelected_&lt;/code&gt;.
We can guess that it’s a flag for showing the selected currency.
But as a new developer, we cannot be sure.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is one of the reasons why it is important to &lt;strong&gt;document your components API&lt;/strong&gt;.
It will save new developers and designers a lot of time figuring out how to correctly use your component.
Your component will become more transparent and not just an abstract definition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see this component does not inject any data services or manage any outside state.
It only receives data through its input bindings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; stands for one way string binding&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; stands for one way any other primitive/type binding&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The output binding &lt;code class=&quot;highlighter-rouge&quot;&gt;public onSelected:Function;&lt;/code&gt; gets called each time the &lt;code class=&quot;highlighter-rouge&quot;&gt;onCurrencyClick&lt;/code&gt; method gets called, it passes the selected currency which gets communicated back to the parent component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make sure the parameter object key matches the parameter name in the parent component’s viewmodel&lt;/strong&gt;, or the component will not be able to communicate any data.
in this case &lt;code class=&quot;highlighter-rouge&quot;&gt;selectedCurrency&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;onCurrencyClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onSelected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selectedCurrency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And inside the parent component’s template:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$ctrl.toSelected(selectedCurrency)&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Another way of accessing selectedCurrency, is to use &lt;code class=&quot;highlighter-rouge&quot;&gt;$locals&lt;/code&gt;.
This is useful when you want to send multiple types of data back.
The advantage is you don’t have to specify each parameter separately in the component’s template.
The disadvantage is &lt;code class=&quot;highlighter-rouge&quot;&gt;$locals&lt;/code&gt; is not descriptive.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$ctrl.toSelected($locals)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To access the selectedCurrency you would use the property on the $locals object with the same name:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;toSelected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$locals&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Currency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectedCurrency&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;component-communication&quot;&gt;Component communication&lt;/h2&gt;

&lt;h3 id=&quot;output-binding&quot;&gt;Output binding&lt;/h3&gt;

&lt;p&gt;In our previous example we saw an example of child to parent communication by mapping an output binding:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;onSelected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;amp;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The parent component can pass a method to this binding which the child component can call back and optionally send back any data to.&lt;/p&gt;

&lt;h3 id=&quot;mapping-the-require-property&quot;&gt;Mapping the require property&lt;/h3&gt;

&lt;p&gt;A child component can also require its parent components controller by mapping it in the require property:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;parentCtrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'^parentComponentName'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;strong&gt;^&lt;/strong&gt; symbol is important here.
You should replace &lt;code class=&quot;highlighter-rouge&quot;&gt;parentComponentName&lt;/code&gt; with the correct component name, you are free to choose a different name for the key, in this case &lt;code class=&quot;highlighter-rouge&quot;&gt;parentCtrl&lt;/code&gt;.
The parent controller will get bound on to the property &lt;code class=&quot;highlighter-rouge&quot;&gt;parentCtrl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Be aware that this creates a tight coupling between the child and parent component.&lt;/p&gt;

&lt;h3 id=&quot;using-a-service&quot;&gt;Using a service&lt;/h3&gt;

&lt;p&gt;We should access and manipulate application state in our container components, but only through services, a component’s controller primary responsibility is to manage the template’s view model.
You can implement a custom observer pattern inside the service, or use the rootscope as an eventbus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SampleService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SERVICE_NAME&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mysampleservice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EVENT_NAME&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sampleEvent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$inject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$rootScope'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$rootScope&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IRootscopeService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$rootScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SampleService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;EVENT_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$destroy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$rootScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SampleService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;EVENT_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A component controller can get notified by any changes by subscribing to the service:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponentController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;		
        &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$inject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$scope'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SampleService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SERVICE_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isolatescope&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sampleService&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SampleService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){}&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;$onInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sampleService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isolateScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Start with a root component and work your way down building components that are composed of either &lt;strong&gt;presentational&lt;/strong&gt; and &lt;strong&gt;container&lt;/strong&gt; components.
Data should flow down in one direction (&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; input bindings), and events should propagate back up (&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; output binding).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Services&lt;/strong&gt; manage application state&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Controllers&lt;/strong&gt; manage a templates’ view model&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Application state is accessed only by &lt;strong&gt;container components through services&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;.component()&lt;/code&gt; when writing custom HTML elements in AngularJS&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;.directive()&lt;/code&gt; when you need to manipulate the DOM or need to change the appearance or behavior of a DOM element&lt;/li&gt;
  &lt;li&gt;Minimize 2 way binding (&lt;code class=&quot;highlighter-rouge&quot;&gt;ngModel&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; binding)&lt;/li&gt;
  &lt;li&gt;Presentational components can contain both container components and presentational components and vice versa&lt;/li&gt;
  &lt;li&gt;Use the &lt;strong&gt;component router&lt;/strong&gt;, which makes it easy to bind URL paths to components. A component can contain its own relative routes too&lt;/li&gt;
  &lt;li&gt;Document your component’s API so new developers and designers know how to use it correctly&lt;/li&gt;
  &lt;li&gt;Keep your controllers clean, their main purpose is to set and manipulate the templates’ view model. &lt;strong&gt;Delegate business logic to services&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 25 Apr 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/angularjs-typescript/2016/04/25/component-based-application-architecture-with-angularjs-and-typescript.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/angularjs-typescript/2016/04/25/component-based-application-architecture-with-angularjs-and-typescript.html</guid>
        
        <category>angularjs</category>
        
        <category>typescript</category>
        
        <category>javascript</category>
        
        <category>components</category>
        
        <category>architecture</category>
        
        <category>best practices</category>
        
        
        <category>AngularJS-TypeScript</category>
        
      </item>
    
      <item>
        <title>Lagom: First Impressions and Initial Comparison to Spring Cloud</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“It’s open source. It’s highly opinionated.
   Build greenfield microservices and decompose your Java EE monolith like a boss.” - Lightbend&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#just-the-right-amount&quot;&gt;Just the right amount&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#design-philosophy&quot;&gt;Design philosophy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#building-blocks&quot;&gt;Building blocks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started-with-lagom&quot;&gt;Getting started with Lagom&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#anatomy-of-a-lagom-project&quot;&gt;Anatomy of a Lagom project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-of-a-microservice&quot;&gt;Example of a microservice&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cqrs-and-event-sourcing&quot;&gt;CQRS and Event Sourcing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lightbend-qa-at-the-codestar-launch-event&quot;&gt;Lightbend Q&amp;amp;A at the CodeStar launch event&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comparison-with-spring&quot;&gt;Comparison with Spring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#our-advice&quot;&gt;Our advice&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#useful-links&quot;&gt;Useful links&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;just-the-right-amount&quot;&gt;Just the right amount&lt;/h2&gt;
&lt;p&gt;Meet &lt;a href=&quot;https://www.lightbend.com/lagom&quot;&gt;Lagom&lt;/a&gt;, &lt;a href=&quot;https://www.lightbend.com&quot;&gt;Lightbend&lt;/a&gt;’s (formerly Typesafe) new open source framework for architecting microservices in &lt;strong&gt;Java&lt;/strong&gt;.
On the 10th of March, Lightbend released the first &lt;strong&gt;MVP version&lt;/strong&gt; of Lagom which is the current version at the time of writing.
Although there is currently only a &lt;strong&gt;Java API&lt;/strong&gt;, Scala enthusiasts should not fret because a &lt;strong&gt;Scala API&lt;/strong&gt; is a main priority and &lt;a href=&quot;https://github.com/lagom/lagom/issues/1&quot;&gt;well on its way&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lagom is a Swedish word meaning “just the right amount”.
Microservices have often been categorised as small services.
However, Lightbend wants to emphasize that finding the right boundaries between services, aligning them with bounded contexts, business capabilities, and isolation requirements are the most important aspects when architecting a microservice-based system.
Therefore, it fits very well in a &lt;strong&gt;Domain-Driven Design&lt;/strong&gt; focused mindset.&lt;/p&gt;

&lt;p&gt;Following this will help in building a scalable and resilient system that is easy to deploy and manage.
According to Lightbend the focus should not be on how small the services are, but instead they should be &lt;em&gt;just the right size&lt;/em&gt;, “Lagom” size services.
Lagom, being an opinionated framework, provides a “golden path” from which the developer can deviate if necessary.
Being based on the reactive principles as defined in the &lt;a href=&quot;http://www.reactivemanifesto.org/&quot;&gt;Reactive Manifesto&lt;/a&gt;, Lagom provides the developer a guard-railed approach with good defaults while also allowing to deviate if necessary.&lt;/p&gt;

&lt;p&gt;This blogpost will cover our initial impression on the framework together with our opinion on the choices made while architecting the framework.
Note that we won’t go too deep into detail in all the different aspects of the framework, for more details refer to Lagom’s extensive &lt;a href=&quot;http://www.lagomframework.com/documentation/1.0.x/Home.html&quot;&gt;documentation&lt;/a&gt;.
As Lightbend is entering the microservices market with Lagom, we feel obliged to make a fair comparison with existing frameworks out there.
In the Java world this is predominantly the &lt;strong&gt;Spring stack&lt;/strong&gt; with Spring Boot and Spring Cloud, standing on the shoulders of giants such as the &lt;strong&gt;Netflix OSS&lt;/strong&gt;.
In this current stage, it would be a bit too early to make an in-depth comparison between the two, seeing as you would be comparing a mature project to an MVP.
What we can share though, are our initial observations.&lt;/p&gt;

&lt;h2 id=&quot;design-philosophy&quot;&gt;Design philosophy&lt;/h2&gt;
&lt;p&gt;Lagom’s design rests on the following principles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Message-Driven and Asynchronous&lt;/strong&gt;: Built upon Akka Stream for asynchronous streaming and the JDK8 CompletionStage API.
Streaming is a first-class concept.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Distributed persistence&lt;/strong&gt;: Lagom favours distributed persistence patterns using Event Sourcing with Command Query Responsibility Segregation (CQRS).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Developer productivity&lt;/strong&gt;: Starting all microservices with a single command, code hot reloading and expressive service interface declarations are some examples of Lagom’s high emphasis on developer productivity.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;building-blocks&quot;&gt;Building blocks&lt;/h2&gt;
&lt;p&gt;The Lagom framework acts as an abstraction layer upon several Lightbend frameworks and consists of the following core technologies and frameworks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.scala-lang.org&quot;&gt;Scala&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.java.com&quot;&gt;Java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.playframework.com&quot;&gt;Play Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://akka.io&quot;&gt;Akka&lt;/a&gt; and &lt;a href=&quot;http://doc.akka.io/docs/akka/snapshot/scala/persistence.html&quot;&gt;Akka Persistence&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.scala-sbt.org&quot;&gt;sbt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cassandra.apache.org&quot;&gt;Cassandra&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/google/guice&quot;&gt;Guice&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.lightbend.com/products/conductr&quot;&gt;ConductR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Seeing as it acts as an abstraction layer the developer doesn’t need to hold any knowledge of Play Framework and Akka in order to successfully use Lagom.
Sbt has been chosen as the build tool because it also acts as a development environment.
Lagom relies heavily on the following sbt features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fine-grained tasks&lt;/li&gt;
  &lt;li&gt;Each task may return a value&lt;/li&gt;
  &lt;li&gt;The value returned by a task may be consumed by other tasks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;According to Lightbend, &lt;strong&gt;Scala’s build tool ‘sbt’&lt;/strong&gt; offers many handy features to Lagom such as fast incremental recompilation, hot code reloading, starting and stopping services in parallel and automatic injection of configuration defaults.
Sbt might be seen as a hurdle by most Java developers since it is &lt;strong&gt;Maven&lt;/strong&gt; and &lt;strong&gt;Gradle&lt;/strong&gt; (and to a lesser extent &lt;strong&gt;Ant&lt;/strong&gt;) that rule most Java projects.
Moving towards a microservices framework such as Lagom would already constitute quite a transition so we think that this might hold back Java developers from adopting the framework.
Lightbend’s rebranding could be interpreted as a move away from a Scala-oriented company towards a more Java-minded company.
In that regard it would make sense to lower the initial learning curve especially for a rather trivial component such as a building tool.
After all, the most important thing to achieve adoption is allowing people to easily get started with the new technology. 
We think that providing integration for Maven or Gradle would have a positive effect on the adoption rate and although it may not be trivial to implement, it should help convince Java developers to give Lagom a go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google’s Guice&lt;/strong&gt; has been chosen for dependency injection since it is a lightweight framework.
What is remarkable is that Guice is used as well for intermicroservices calls.
Lagom acts as a communication abstraction layer and it does so by adding a dependency on the interfaces of remote microservices.
Just like a shared domain model and shared datastores being antipatterns for microservices, having code dependencies from one service in another is as well.
Changing the code of one microservice should not have an immediate cascading effect on other microservices.
This is the very essence of the microservices architecture.
In a monolith, having code changes in one component can result in immediate breaking changes in other components of the system.
While this may be desired in order to keep technical debt low, this is an inherent characteristic of monolithic systems.
One of the reasons microservices were introduced, is to decouple components on all levels, especially binary coupling.
Using protocols between components instead of actual binary dependencies allows us to implement the tolerant reader principle and versioning through for instance content negotiation.
Lightbend argues that sharing interfaces as code will increase productivity and performance, but we fear the result of this is a distributed monolith instead of an actual decoupled microservices architecture.
While we question the default way of communicating between microservices in Lagom, we are enthusiastic that more ways of making intermicroservices calls are becoming available.
Using HTTP is possible as well, and one of the upcoming features is a &lt;a href=&quot;https://gitter.im/lagom/lagom?at=56efe42c0d69dfd122218ddc&quot;&gt;Lagom Service Client&lt;/a&gt;.
The Guice approach might also be quite favorable for people migrating from monolithic applications to microservices.
In the end it is a trade-off, but one that shouldn’t be taken lightly.&lt;/p&gt;

&lt;p&gt;As a default persistence solution, &lt;strong&gt;Apache Cassandra&lt;/strong&gt; is used due to how well it integrates with &lt;strong&gt;CQRS&lt;/strong&gt; and &lt;strong&gt;Event Sourcing&lt;/strong&gt;.
Lagom has support for Cassandra as datastore, both for the reading and writing data.
It is possible to use other datastore solutions but this comes at the cost of not being able to take advantage of the persistence module in Lagom.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ConductR&lt;/strong&gt; is an orchestration tool for managing Lightbend Reactive Platform applications across a cluster of machines and is Lightbend’s solution for running Lagom systems in production.
Note that ConductR comes with a license fee and is majorly targeted at enterprises.
The other option we currently have in order to run our Lagom system in production is to write our &lt;a href=&quot;http://www.lagomframework.com/documentation/1.0.x/Overview.html&quot;&gt;own service locator&lt;/a&gt; compatible with Lagom.
At the time of writing someone already started working on &lt;a href=&quot;https://github.com/lagom/lagom/issues/59&quot;&gt;Kubernetes support&lt;/a&gt; and we are sure that, given more time, more options will become available.
For now though, Lagom is still in an early stage where we either have to pay for the ConductR license, build our own service locator, or wait until someone does the work for us.&lt;/p&gt;

&lt;h2 id=&quot;getting-started-with-lagom&quot;&gt;Getting started with Lagom&lt;/h2&gt;

&lt;p&gt;In order to start using Lagom, &lt;a href=&quot;https://www.lightbend.com/community/core-tools/activator-and-sbt&quot;&gt;Activator&lt;/a&gt; must be correctly set up.
Currently &lt;a href=&quot;https://www.lightbend.com/activator/templates#filter:lagom&quot;&gt;two Lagom templates&lt;/a&gt; exist that can be used for creating a new Lagom application.
The &lt;a href=&quot;https://www.lightbend.com/activator/template/lagom-java&quot;&gt;Lagom Java Seed template&lt;/a&gt; should be the template of choice, the &lt;a href=&quot;https://www.lightbend.com/activator/template/lagom-java-chirper&quot;&gt;Lagom Java Chirper template&lt;/a&gt; is an example of a Twitter-like app created in Lagom.&lt;/p&gt;

&lt;p&gt;Creating a new Lagom application is as simple as using the following command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ activator new my-first-system lagom-java&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Afterwards the project can be imported in any of the prominent IDEs as an sbt project.&lt;/p&gt;

&lt;p&gt;In order to boot the system, we first need to navigate to the root of the project and start the Activator console:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ activator&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After which we can start all our services using a single simple command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ runAll&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;runAll
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] Starting embedded Cassandra server
.......
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] Cassandra server running at 127.0.0.1:4000
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] Service locator is running at http://localhost:8000
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] Service gateway is running at http://localhost:9000
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] application - Signalled start to ConductR
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] application - Signalled start to ConductR
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] application - Signalled start to ConductR
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] Service helloworld-impl listening &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;HTTP on 0:0:0:0:0:0:0:0:24266
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] Service hellostream-impl listening &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;HTTP on 0:0:0:0:0:0:0:0:26230
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Services started, use Ctrl+D to stop and go back to the console...&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This command starts a &lt;strong&gt;Cassandra server&lt;/strong&gt;, &lt;strong&gt;service locator&lt;/strong&gt; and &lt;strong&gt;service gateway&lt;/strong&gt;.
Each of our microservices is started in parallel while also registering them in the service locator.
Additionally, a &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; command to individually start services is available as well.
Note that the ports are assigned to each microservice by an &lt;a href=&quot;http://www.lagomframework.com/documentation/1.0.x/ServicePort.html&quot;&gt;algorithm&lt;/a&gt; and are consistent even on different machines.
The possibility to assign a specific port is available though.&lt;/p&gt;

&lt;p&gt;Similar to Play Framework, Lagom also supports code hot reloading allowing you to make changes in the code and immediately seeing these changes live without having to restart anything.
A feature we’re very fond of.
In general, a restart is only required when adding a new microservice API and implementation module in the project.&lt;/p&gt;

&lt;h2 id=&quot;anatomy-of-a-lagom-project&quot;&gt;Anatomy of a Lagom project&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;helloworld-api           → Microservice API submodule
 └ src/main/java         → Java source code interfaces with model objects
helloworld-impl          → Microservice implementation submodule
 └ logs                  → Logs of the microservice
 └ src/main/java         → Java source code implementation of the API submodule
 └ src/main/resources    → Contains the microservice application config
 └ src/test/java         → Java source code unit tests
logs                     → Logs of the Lagom system
project                  → Sbt configuration files
 └ build.properties      → Marker for sbt project
 └ plugins.sbt           → Sbt plugins including the declaration for Lagom itself
.gitignore               → Git ignore file
build.sbt                → Application build script
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;example-of-a-microservice&quot;&gt;Example of a microservice&lt;/h2&gt;
&lt;p&gt;In order to write a new microservice you create a new API and implementation project.
In the API project you define the interface of your microservice:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HelloService.java&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloService&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ServiceCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotUsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;ServiceCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GreetingMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;useGreeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Descriptor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;descriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;helloservice&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;restCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&quot;/api/hello/:id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;restCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/api/hello/:id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;useGreeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withAutoAcl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;Descriptor&lt;/code&gt; defines the service name and the endpoints offered by a service. 
In our case we define two REST endpoints, a GET and a POST.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GreetingMessage&lt;/code&gt; is basically an immutable class with a single String &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; instance variable.
On the subject of immutability the &lt;a href=&quot;http://www.lagomframework.com/documentation/1.0.x/ImmutablesInIDEs.html&quot;&gt;Lagom documentation&lt;/a&gt; mentions &lt;a href=&quot;https://immutables.github.io&quot;&gt;Immutables&lt;/a&gt;, a Java library that helps you create immutable objects via annotation processing.
Definitely worth a look seeing as it helps you get rid of boilerplate code.&lt;/p&gt;

&lt;p&gt;In the implementation submodule we implement our API’s interface.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HelloServiceImpl.java&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloServiceImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HelloService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotUsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;CompletableFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;completedFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GreetingMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;useGreeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;CompletableFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;completedFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll immediately notice that the service calls are non-blocking by default using &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html&quot;&gt;CompletableFutures&lt;/a&gt; introduced in JDK8.
Interesting to know is that Lagom also provides support for the &lt;a href=&quot;http://www.lagomframework.com/documentation/1.0.x/PubSub.html&quot;&gt;Publish-subscribe pattern&lt;/a&gt; out of the box.
We also need to implement the module that binds the HelloService so that it can be served.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HelloServiceModule.java&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloServiceModule&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AbstractModule&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceGuiceSupport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bindServices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceBinding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HelloServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We define our module in the &lt;code class=&quot;highlighter-rouge&quot;&gt;application.config&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helloworld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HelloServiceModule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And finally register our microservice in &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt; with its dependencies and settings:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;helloworldApi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;helloworld-api&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0-SNAPSHOT&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;libraryDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lagomJavadslApi&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;helloworldImpl&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;helloworld-impl&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enablePlugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LagomJava&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0-SNAPSHOT&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;libraryDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;lagomJavadslPersistence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;lagomJavadslTestKit&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lagomForkedTestSettings&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependsOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helloworldApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can then test our endpoint:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl localhost:24266/api/hello/World
Hello, World!

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl -H &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/json&quot;&lt;/span&gt; -X POST -d &lt;span class=&quot;s1&quot;&gt;'{&quot;message&quot;: &quot;Hello &quot;}'&lt;/span&gt; http://localhost:24266/api/hello/World
Hello World&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Seeing as any good developer writes unit tests for his/her code so should we!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloServiceTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TestServer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@BeforeClass&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;defaultSetup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@AfterClass&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tearDown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shouldRespondHello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// given&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HelloService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// when&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Yannick&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotUsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCompletableFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// then&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, Yannick&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shouldRespondGreeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// given&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HelloService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// when&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;useGreeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Yannick&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GreetingMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hi there, &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCompletableFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// then&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hi there, Yannick&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Tests can be executed in Activator via the following command:
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ test&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] Test run started
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] Test sample.helloworld.impl.HelloServiceTest.testHello started
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] Test sample.helloworld.impl.HelloServiceTest.testGreeting started
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] Test run finished: 0 failed, 0 ignored, 2 total, 16.759s
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] Passed: Total 2, Failed 0, Errors 0, Passed 2
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;success] Total &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;: 21 s, completed Apr 14, 2016 10:06:41 AM&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;cqrs-and-event-sourcing&quot;&gt;CQRS and Event Sourcing&lt;/h2&gt;
&lt;p&gt;Being an opinionated framework Lagom suggests to use &lt;strong&gt;CQRS&lt;/strong&gt; and &lt;strong&gt;Event Sourcing&lt;/strong&gt; seeing as it fits well within the reactive paradigm.
In this blogpost we are not going to explain CQRS and Event Sourcing in detail seeing as it is very well documented in the &lt;a href=&quot;http://www.lagomframework.com/documentation/1.0.x/ES_CQRS.html&quot;&gt;documentation&lt;/a&gt; of Lagom.
The gist of it is that each service should own its own data and only the service itself should have direct access to the database.
Other services need to use the service’s API in order to interact with its data.
Sharing the database across different services would result in tight coupling.
Ideally we want to work with &lt;a href=&quot;http://martinfowler.com/bliki/BoundedContext.html&quot;&gt;Bounded Contexts&lt;/a&gt; following the core principles of Domain-Driven Design where each service defines a Bounded Context.
Using &lt;strong&gt;Event Sourcing&lt;/strong&gt; gives us many advantages such as not only storing the current state of data but having an entire journal of events that tell us how the data achieved its current state.
With event sourcing we only perform reads and writes, there are no updates nor deletes.
All this makes it easy to test and debug and allows us to easily reproduce scenarios that happened in production by replaying the event log from that environment.&lt;/p&gt;

&lt;p&gt;Note that just because Lagom encourages us to use CQRS and Event Sourcing it isn’t forcing us to use it as it is not always applicable to every use case.
It is perfectly possible to, for example, plug in a PostgreSQL database for our persistence layer.
Someone has already set up &lt;a href=&quot;https://github.com/dsl-platform/lagom-postgres&quot;&gt;PostgreSQL integration using Revenj persistence&lt;/a&gt;.
However, Lightbend suggests that for best scalability preference must be given to asynchronous APIs because using blocking APIs like JDBC and JPA will have an impact on that.&lt;/p&gt;

&lt;p&gt;By default, when launching our development environment, a Cassandra server will be booted without having to do any setup ourselves besides adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;lagomJavadslPersistence&lt;/code&gt; dependency to our implementation in our &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Regarding the code, a &lt;strong&gt;persistent entity&lt;/strong&gt; needs to be defined, combined with a related &lt;strong&gt;command&lt;/strong&gt;, &lt;strong&gt;event&lt;/strong&gt; and &lt;strong&gt;state&lt;/strong&gt;.
Note that the following code samples are mainly here to give an idea of the work needed for implementing all this.
For more information and a detailed explanation, consult the &lt;a href=&quot;http://www.lagomframework.com/documentation/1.0.x/PersistentEntity.html&quot;&gt;excellent documentation&lt;/a&gt; on the subject.&lt;/p&gt;

&lt;p&gt;In the persistent entity we define the behaviour of our entity.
In order to interact with event sourced entities, commands need to be sent.
We therefore need to specify a command handler for each command class that the entity can receive.
Commands are then translated into events which will get persisted by the entity.
Each event has its own event handler registered.&lt;/p&gt;

&lt;p&gt;Example of a PersistentEntity:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld.java&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PersistentEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HelloEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WorldState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Behavior&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorldState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snapshotState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BehaviorBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newBehaviorBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;snapshotState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WorldState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCommandHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UseGreetingMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenPersist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GreetingMessageChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;evt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setEventHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GreetingMessageChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;evt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WorldState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setReadOnlyCommandHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our PersistentEntity requires a state to be defined:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WorldState.java&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JsonDeserialize&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WorldState&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompressedJsonable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@JsonCreator&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WorldState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Preconditions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;checkNotNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Preconditions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;checkNotNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WorldState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorldState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorldState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MoreObjects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toStringHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WorldState&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In our command interface we define all the commands that our entity supports.
In order to get a complete picture of the commands an entity supports, it is the convention to specify all supported commands as inner classes of the interface.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HelloCommand.java&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloCommand&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jsonable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JsonDeserialize&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UseGreetingMessage&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HelloCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompressedJsonable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PersistentEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ReplyType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@JsonCreator&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UseGreetingMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Preconditions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;checkNotNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UseGreetingMessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UseGreetingMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UseGreetingMessage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MoreObjects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toStringHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UseGreetingMessage&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JsonDeserialize&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HelloCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PersistentEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ReplyType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;organization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@JsonCreator&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;organization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Preconditions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;checkNotNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;organization&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Preconditions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;checkNotNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;organization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;organization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;organization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;organization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;organization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MoreObjects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toStringHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;organization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;organization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And finally we want to define all events that the entity supports in an event interface.
It follows the same convention as with commands, specifying all events as inner classes of the interface.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HelloEvent.java&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloEvent&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jsonable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JsonDeserialize&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GreetingMessageChanged&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HelloEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@JsonCreator&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GreetingMessageChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Preconditions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;checkNotNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GreetingMessageChanged&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GreetingMessageChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GreetingMessageChanged&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MoreObjects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toStringHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GreetingMessageChanged&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloServiceImpl.java&lt;/code&gt; class will look like the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloServiceImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HelloService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PersistentEntityRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persistentEntityRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Inject&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HelloServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PersistentEntityRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persistentEntityRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persistentEntityRegistry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persistentEntityRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;persistentEntityRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotUsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;PersistentEntityRef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persistentEntityRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;refFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GreetingMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;useGreeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;PersistentEntityRef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persistentEntityRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;refFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UseGreetingMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;lightbend-qa-at-the-codestar-launch-event&quot;&gt;Lightbend Q&amp;amp;A at the CodeStar launch event&lt;/h2&gt;
&lt;p&gt;On the 24th of March we attended the launch event of &lt;a href=&quot;http://www.codestar.nl&quot;&gt;CodeStar&lt;/a&gt;, the new unit from our Dutch Ordina colleagues focused on Full Stack Scala and Big Data solutions.
CodeStar also hold a Lightbend partnership.
One of the presentations was &lt;a href=&quot;https://www.youtube.com/watch?v=POKZ1TRJ4G4&quot;&gt;an introduction to Lagom&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/myfear&quot;&gt;Markus Eisele&lt;/a&gt;, Developer Advocate at Lightbend.
After his talk we had the opportunity to ask Markus and his colleague, &lt;a href=&quot;https://twitter.com/lutzhuehnken&quot;&gt;Lutz Hühnken&lt;/a&gt;, Solutions Architect at Lightbend, several questions regarding Lagom.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;What do you guys consider to be the major competitor for Lagom?
Spring Cloud and Netflix OSS?&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Yes, we would consider that stack to be Lagom’s main competitor. 
But we believe that with Lagom we have a number of unique features that makes us shine (because otherwise we wouldn’t have built it):
&lt;br /&gt;1) Lagom’s development environment, in my humble opinion a major productivity boost
&lt;br /&gt;2) Fostering good practices for building reactive services seeing as Lagom is opinionated, e.g. async communication by default, ES/CQRS, …
&lt;br /&gt;3) Batteries-included, from development to production
&lt;br /&gt;4) Streaming is first-class&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lagom suggests that Event Sourcing and CQRS should be used as the default solution for persistence but is it really applicable in the majority of the scenarios?&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Lagom is an opinionated framework and will try to suggest using ES &amp;amp; CQRS as the primary solution to use since it fits very well with the reactive mindset.
Of course it also depends on the use case.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Don’t you think you encourage code coupling by having microservices depend on the interface of another microservice?&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;It is true that the default way to do service calls between Lagom services is to use binary dependencies, though of course it is not enforced. We have taken great care to ensure that service calls map down to idiomatic REST and/or websockets. We do have plans in the future to allow simple removal of the binary coupling. To make service interfaces go through a non-binary specification such as Swagger, where Swagger specs will be generated and interfaces will be generated from the Swagger specs.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Does Lagom support REST level 3? Is there support for hypermedia?&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Currently not supported but we are open to it. Feel free to create a suggestions ticket at the &lt;a href=&quot;https://github.com/lagom/lagom&quot;&gt;GitHub project&lt;/a&gt;.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Don’t you think it is a bad idea to only support ConductR for production deployments?
What about pet projects of single developers? This makes it less appealing to motivate people to pick up Lagom compared to for example Spring Cloud and Netflix OSS.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;It is in the strategic planning of Lightbend to push ConductR forward as the main solution for your production environment.
Do note that it’s perfectly possible to deploy your Lagom services elsewhere as long as you implement your own &lt;a href=&quot;http://www.lagomframework.com/documentation/1.0.x/Overview.html&quot;&gt;service locator&lt;/a&gt; (as an example, the integration needed to support Lagom in ConductR is available on &lt;a href=&quot;https://github.com/typesafehub/conductr-lib/tree/master/lagom10-conductr-bundle-lib&quot;&gt;GitHub&lt;/a&gt;).
Looking at our &lt;a href=&quot;https://www.lightbend.com/open-source-position-statement&quot;&gt;Open Source Position Statement&lt;/a&gt; you will notice that one of the differentiators we see between our open source offerings and the commercial products is Time. 
Open source users tend to invest their time rather than their money. 
ConductR integration into Lagom could be seen as an example for this. 
If you would rather spend the money than invest time, buy ConductR. 
If you would rather invest time instead of money, build your own ServiceLocator implementation and use a different infrastructure.
An example of this is the &lt;a href=&quot;https://github.com/lagom/lagom/issues/59&quot;&gt;GitHub issue&lt;/a&gt; for implementing Kubernetes support.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How do you integrate with other non-Lagom microservices?&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Currently you would call them via REST URLs. 
In the near future the &lt;a href=&quot;https://gitter.im/lagom/lagom?at=56efe42c0d69dfd122218ddc&quot;&gt;Lagom Service Client&lt;/a&gt; could also be used to consume them. 
Additionally it should also be possible to integrate &lt;a href=&quot;https://github.com/Netflix/eureka&quot;&gt;Eureka&lt;/a&gt; in Lagom.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the deployment procedure exactly? How do I prepare my Lagom application for deployment into production?&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;The deployment unit in ConductR is a bundle which is an abstract term that can mean a Docker image or a zip file with a certain structure.
By default, when you have multiple services in one project, it will create multiple bundles. You call &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle:dist&lt;/code&gt; once on the top level and it will create a separate bundle for each service which can then be deployed to ConductR.
You can put multiple components in one bundle so you could have multiple services in one bundle, but we think that it is unusual.
Ideally, each service needs to be its own bundle managed in isolation by ConductR, for it to be able to be able to be developed, rolled out, upgraded and failed in isolation.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What about API versioning?&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Currently there is no versioning for your services besides the “default” way to do it, e.g. via the header or by versioning your urls.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What do you think about the so-called serverless architectures like AWS Lambda or Google Cloud Functions?&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;We think that those architectures are part of the future. 
Lagom can be seen as a step in that direction since it decouples the stateless part of the service (the behavior) from the stateful (persistent entity), allowing the stateless part to be scaled out independently, and automatically by the runtime, in a similar fashion to AWS Lambda. 
A hosted version of Lagom could give a very similar experience.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;About sbt, will you also support a more widely adopted tool such as Maven or Gradle?&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Lagom relies on some sbt features, so supporting other build tools is not trivial. 
While it is probably doable to support Maven, we’d need to do build a proof-of-concept to verify this. 
This is currently not prioritized. We’ll be watching the community’s feedback on this.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Does the Lagom circuit breaker have a dashboard such as the Hystrix dashboard? Does Lagom in general have operational dashboards?&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;You could integrate the circuit breaker data with monitoring tools such as Graphite and Grafana.
In addition, with Lightbend Monitoring you do get a suite of tools for monitoring your microservices. 
Lightbend Monitoring is included in the ConductR license.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Is it true that Typesafe rebranded to Lightbend to get a broader adoption than what was possible with a more Scala-orientated reputation attached to Typesafe?&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;That is correct.
This doesn’t mean that we are giving up on Scala, it is still core to all of our technologies.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;comparison-with-spring&quot;&gt;Comparison with Spring&lt;/h2&gt;

&lt;p&gt;Spring has been out there for more than 10 years and with Spring Boot and Spring Cloud a trend has been set to move to self-contained applications as a basis for microservices development.
Spring reaps the fruits of the Netflix OSS while offering Spring’s own components such as Spring Cloud Config and Spring Security as well.
The Netflix and Spring stack comes with all the necessary tools to build and run microservices in production.&lt;/p&gt;

&lt;p&gt;Externalized configuration, out-of-the-box free dashboards for service registries, circuit breaker monitoring and distributed tracing, integration with service registries such as Eureka, Consul and Zookeeper, production-ready monitoring and metrics features with Actuator endpoints, integration with build tools such as Maven and Gradle and extensive security features including upcoming integration with &lt;a href=&quot;https://www.vaultproject.io&quot;&gt;Vault&lt;/a&gt; are only a subset of the features Spring has to offer.&lt;/p&gt;

&lt;p&gt;Seeing as Lagom is still in its early days, it wouldn’t be fair to Lightbend to make an in-depth comparison with the Spring stack.
We hope that Lagom will continue to grow towards a more mature framework and a true alternative to Spring on all levels.
The first steps we currently see look promising and we hope that they will consider our remarks for how they want to further evolve the framework.
It is great to see more microservices frameworks become available and we applaud Lightbend for taking up the competition with Spring.&lt;/p&gt;

&lt;h2 id=&quot;our-advice&quot;&gt;Our advice&lt;/h2&gt;

&lt;p&gt;Our advice is to keep track of Lagom’s progress closely.&lt;/p&gt;

&lt;p&gt;If you are currently looking for a mature framework with integration capabilities for just about anything, go with Spring.&lt;/p&gt;

&lt;p&gt;If you want to use Event Sourcing, Lagom should be a great fit. 
Additionally, Lagom’s focus on CQRS and its reactive core are truly differentiators with other frameworks.
Lagom has great potential and is eager to get community involvement. 
If you are willing to join forces with Lightbend, Lagom might already be a viable candidate for you.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We think that Lagom looks very promising and we will definitely follow it up.
Due to Lagom being an opinionated framework everything glues together well.
Lagom is just a thin layer on top of Akka and Play, which is very mature and hardened over the years.
It might be a bit too early to do an in-depth comparison between Lagom and Spring Cloud since we would be comparing an MVP against a mature technology.&lt;/p&gt;

&lt;p&gt;We do think that using sbt might be a hurdle for Java developers and it would ease adoption if there would be other ways to use Lagom in production besides ConductR.
As it stands right now you would need to write a custom service locator yourself.
It would close the gap with Spring if support would already be available for service discovery via for example Eureka or Consul.&lt;/p&gt;

&lt;p&gt;It is clear that Lagom puts a lot of focus on reactiveness and gaining the best performance. 
This could come at the cost of binary coupling, seeing as the default way to do service calls between Lagom services is to use binary dependencies. 
We are looking forward to Lightbend’s plans to go through non-binary specifications in order to reduce coupling on a binary level as well.&lt;/p&gt;

&lt;p&gt;Given that it is currently an MVP version we are interested in seeing how Lagom matures. 
Since it is all new and shiny, you will be able to give back to the community by helping to develop parts of this new and exciting framework yourself.
Contributing to the framework is easy via pull requests and are actively reviewed by Lightbend developers.
The developers are very active on their &lt;a href=&quot;https://gitter.im/lagom/lagom&quot;&gt;Gitter&lt;/a&gt; channel and they are quick to answer questions. 
We are also very excited to the release of the Scala API.&lt;/p&gt;

&lt;p&gt;Our colleague &lt;a href=&quot;https://twitter.com/andreasevers&quot;&gt;Andreas Evers&lt;/a&gt;, who has extensive knowledge on Spring Cloud and Netflix OSS, will soon be participating in a podcast with Markus Eisele hosted by Lightbend to discuss Lagom and microservices trends.
The date should be announced soon.
Be sure to follow Andreas and Lightbend to catch it!&lt;/p&gt;

&lt;h2 id=&quot;useful-links&quot;&gt;Useful links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.lightbend.com/lagom&quot;&gt;Lagom&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lagomframework.com/documentation&quot;&gt;Lagom documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/lagom&quot;&gt;Lagom Twitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lagom/lagom&quot;&gt;Lagom GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gitter.im/lagom/lagom&quot;&gt;Lagom Gitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.lightbend.com&quot;&gt;Lightbend&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/lightbend&quot;&gt;Lightbend Twitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/myfear&quot;&gt;Markus Eisele Twitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/lutzhuehnken&quot;&gt;Lutz Hühnken Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 22 Apr 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/microservices/2016/04/22/Lagom-First-Impressions-and-Initial-Comparison-to-Spring-Cloud.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/microservices/2016/04/22/Lagom-First-Impressions-and-Initial-Comparison-to-Spring-Cloud.html</guid>
        
        <category>Lagom</category>
        
        <category>Java</category>
        
        <category>Reactive</category>
        
        <category>Domain-Driven Design</category>
        
        <category>CQRS</category>
        
        <category>Event-Sourcing</category>
        
        
        <category>Microservices</category>
        
      </item>
    
      <item>
        <title>Ordina becomes Netflix OSS contributor</title>
        <description>&lt;p&gt;Netflix has officially added Ordina as active user and contributor to their open source cloud and microservices tools and frameworks.
Ordina continues to be a leading force in cloud and microservice architectures in the BeNeLux.
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/netflix-oss.jpg&quot; alt=&quot;Netflix OSS&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
Since 2011, Netflix has been releasing more and more components of their cloud platform and utilities as free and open source software. 
These projects are available to the public through Netflix OSS.
&lt;br /&gt;
&lt;br /&gt;
Starting around 2009, Netflix completely redefined its application development and operations models. 
They were driven completely by APIs and riding the initial wave of what we would come to know as microservices. 
Industry onlookers derided the company with disbelief and uncertainty. 
While this may work with Netflix, no one else can possibly do this. 
Fast-forward to 2016, when most of those sentiments changed to commitments of active migration to microservices. 
The concept is definitely both valid and powerful.
&lt;br /&gt;
&lt;br /&gt;
Pivotal has embraced these technologies and made them approachable for the masses through the Java-based Spring ecosystem. 
In the Spring Cloud OSS program, an abstraction layer is added on top of Netflix’s components to ease adoption outside of Netflix. 
This allows local companies without silicon valley-grade scientists to embrace microservices and their benefits.
&lt;br /&gt;
&lt;br /&gt;
Ordina has successfully architected and implemented the Netflix and Spring Cloud stack at clients in Belgium. 
We continue to do so and are proud we can call ourselves Netflix OSS and Spring Cloud contributors. 
Netflix has added our logo to their &lt;a href=&quot;https://netflix.github.io/powered-by-netflix-oss.html&quot;&gt;contributors page&lt;/a&gt; 
for our continued adoption and contributions to the Netflix and Spring Cloud ecosystem.
&lt;br /&gt;
&lt;br /&gt;
Our expertise and experience using and contributing to the Netflix and Spring Cloud stack is second to none in the BeNeLux. 
We are always looking to help new or existing clients to migrate to microservices and make the step to Cloud Native architectures.
&lt;br /&gt;
&lt;br /&gt;
If this sounds interesting to your company, make sure to &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#097;&amp;#110;&amp;#100;&amp;#114;&amp;#101;&amp;#097;&amp;#115;&amp;#046;&amp;#101;&amp;#118;&amp;#101;&amp;#114;&amp;#115;&amp;#064;&amp;#111;&amp;#114;&amp;#100;&amp;#105;&amp;#110;&amp;#097;&amp;#046;&amp;#098;&amp;#101;&quot;&gt;contact us directly&lt;/a&gt;.
&lt;br /&gt;
&lt;br /&gt;
If these architectures personally excite you, take a look at &lt;a href=&quot;http://jobs.ordina.be&quot;&gt;jobs.ordina.be&lt;/a&gt; or &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#097;&amp;#110;&amp;#100;&amp;#114;&amp;#101;&amp;#097;&amp;#115;&amp;#046;&amp;#101;&amp;#118;&amp;#101;&amp;#114;&amp;#115;&amp;#064;&amp;#111;&amp;#114;&amp;#100;&amp;#105;&amp;#110;&amp;#097;&amp;#046;&amp;#098;&amp;#101;&quot;&gt;contact us directly&lt;/a&gt; as well.&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Apr 2016 00:00:00 +0000</pubDate>
        <link>https://ordina-jworks.github.io/microservices/2016/04/09/Ordina-becomes-Netflix-OSS-contributor.html</link>
        <guid isPermaLink="true">https://ordina-jworks.github.io/microservices/2016/04/09/Ordina-becomes-Netflix-OSS-contributor.html</guid>
        
        <category>Netflix</category>
        
        <category>Spring</category>
        
        <category>Microservices</category>
        
        
        <category>Microservices</category>
        
      </item>
    
  </channel>
</rss>
